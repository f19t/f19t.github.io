<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java集合</title>
    <url>/2023/02/13/Java%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h2><p>本文介绍Java集合的数据结构，与简单测试。为后续学习算法打基础。</p>
<span id="more"></span>

<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>); <span class="comment">// size=1</span></span><br><span class="line">        list.add(<span class="string">&quot;pear&quot;</span>); <span class="comment">// size=2</span></span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>); <span class="comment">// 允许重复添加元素，size=3</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        list.remove(<span class="number">1</span>);<span class="comment">//删除pear</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">apple</span><br></pre></td></tr></table></figure>

<hr>
<p>List是一种顺序列表接口常用方法：</p>
<ul>
<li>在末尾添加一个元素：boolean add(E e)</li>
<li>在指定索引添加一个元素：boolean add(int index, E e)</li>
<li>删除指定索引的元素：E remove(int index)</li>
<li>删除某个元素：boolean remove(Object e)</li>
<li>获取指定索引的元素：E get(int index)</li>
<li>获取链表大小（包含元素的个数）：int size()</li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;s&quot;</span>,<span class="string">&quot;bbbbb&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;aaaaa&quot;</span>);</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;s&quot;</span>));<span class="comment">//获取数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet())&#123;    <span class="comment">//遍历map</span></span><br><span class="line">            System.out.println(map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bbbbb</span><br><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>Java默认配置文件以.properties为扩展名，每行以key&#x3D;value表示。java内置Properties读取配置文件非常简单。</p>
<p>典型配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setting.properties</span></span><br><span class="line">last_open_file=1.txt</span><br><span class="line">auto_save_interval=60</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException,Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> <span class="string">&quot;配置文件&quot;</span>;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.load(<span class="keyword">new</span> <span class="title class_">java</span>.io.FileInputStream(f));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filepath</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;last_open_file&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">interval</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;auto_save_interval&quot;</span>, <span class="string">&quot;120&quot;</span>);<span class="comment">//如果没有值，赋予默认值</span></span><br><span class="line"></span><br><span class="line">        System.out.println(filepath);</span><br><span class="line">        System.out.println(interval);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.txt</span><br><span class="line">60</span><br></pre></td></tr></table></figure>

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>只需要存储不重复的key，并不需要存储映射的value，那么就可以使用Set。</p>
<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>队列（Queue）是一种经常使用的集合。Queue实际上是实现了一个先进先出（FIFO：First In First Out）的有序表。它和List的区别在于，List可以在任意位置添加和删除元素，而Queue只有两个操作：</p>
<ul>
<li>把元素添加到队列末尾；</li>
<li>从队列头部取出元素。</li>
</ul>
<p>队列接口Queue定义了以下几个方法：</p>
<ul>
<li>int size()：获取队列长度；</li>
<li>boolean add(E)&#x2F;boolean offer(E)：添加元素到队尾；</li>
<li>E remove()&#x2F;E poll()：获取队首元素并从队列中删除；</li>
<li>E element()&#x2F;E peek()：获取队首元素但并不从队列中删除。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException,Exception&#123;</span><br><span class="line"></span><br><span class="line">        Queue&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.offer(<span class="string">&quot;aaaaaaa&quot;</span>);</span><br><span class="line">        q.offer(<span class="string">&quot;bbbbbbb&quot;</span>);</span><br><span class="line">        q.offer(<span class="string">&quot;ccccccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(q.peek());<span class="comment">//获取首位数据，不删除</span></span><br><span class="line">        System.out.println(q.peek());</span><br><span class="line">        System.out.println(q.peek());</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">        System.out.println(q.poll());<span class="comment">//获取首位数据，并删除</span></span><br><span class="line">        System.out.println(q.poll());</span><br><span class="line">        System.out.println(q.poll());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaaaaa</span><br><span class="line">aaaaaaa</span><br><span class="line">aaaaaaa</span><br><span class="line">-------------</span><br><span class="line">aaaaaaa</span><br><span class="line">bbbbbbb</span><br><span class="line">ccccccc</span><br></pre></td></tr></table></figure>

<h3 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h3><p>两头都出，这种队列叫双端队列（Double Ended Queue），学名Deque。<br>Java集合提供了接口Deque来实现一个双端队列，它的功能是：</p>
<ul>
<li>既可以添加到队尾，也可以添加到队首；</li>
<li>既可以从队首获取，又可以从队尾获取。</li>
</ul>
<p>用处：Deque当Stack使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException,Exception&#123;</span><br><span class="line"></span><br><span class="line">        Deque&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.offerLast(<span class="string">&quot;aaaaaaa&quot;</span>);</span><br><span class="line">        q.offerLast(<span class="string">&quot;bbbbbbb&quot;</span>);</span><br><span class="line">        q.offerLast(<span class="string">&quot;ccccccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(q.peekLast());<span class="comment">//获取末位数据，不删除</span></span><br><span class="line">        System.out.println(q.peekLast());</span><br><span class="line">        System.out.println(q.peekLast());</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">        System.out.println(q.pollLast());<span class="comment">//获取末位数据，并删除</span></span><br><span class="line">        System.out.println(q.pollLast());</span><br><span class="line">        System.out.println(q.pollLast());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ccccccc</span><br><span class="line">ccccccc</span><br><span class="line">ccccccc</span><br><span class="line">-------------</span><br><span class="line">ccccccc</span><br><span class="line">bbbbbbb</span><br><span class="line">aaaaaaa</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>NYOJ-2-栈的运用</title>
    <url>/2023/02/13/NYOJ-2/</url>
    <content><![CDATA[<h2 id="NYOJ-2-栈的运用"><a href="#NYOJ-2-栈的运用" class="headerlink" title="NYOJ-2-栈的运用"></a>NYOJ-2-栈的运用</h2><p>今天刚学java集合，学到了栈，就拿这道题练练手吧。</p>
<hr>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">输入描述</span><br><span class="line">第一行输入一个数N（0&lt;N&lt;=100）,表示有N组测试数据。后面的N行输入多组输入数据，每组输入数据都是一个字符串S(S的长度小于10000，且S不是空串），测试数据组数少于5组。数据保证S中只含有&quot;[&quot;, “]”, “(”, “)” 四种字符</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">每组输入数据的输出占一行，如果该字符串中所含的括号是配对的，则输出Yes,如果不配对则输出No</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>最近刚学了Deque，可以使用栈解决这个问题。<br>思路：获取到”)”、”]”，就比对，不是就压栈，最后判断是否为空。后续有更好思路再补代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OJ2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        String arr[] = <span class="keyword">new</span> <span class="title class_">String</span>[num];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;num;i++)&#123;arr[i]=in.next();&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;num;i++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> judge(arr[i]);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">judge</span><span class="params">(String s)</span>&#123;</span><br><span class="line"></span><br><span class="line">        Deque&lt;String&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            deque.offerLast(s.substring(i,i+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (deque.peekLast().equals(<span class="string">&quot;)&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span> (deque.size()==<span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;&#125;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">                <span class="keyword">if</span> (deque.peekLast().equals(<span class="string">&quot;(&quot;</span>))&#123;deque.removeLast();&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(deque.peekLast().equals(<span class="string">&quot;]&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span> (deque.size()==<span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;&#125;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">                <span class="keyword">if</span> (deque.peekLast().equals(<span class="string">&quot;[&quot;</span>))&#123;deque.removeLast();&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deque.size()==<span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="string">&quot;Yes&quot;</span>;&#125;<span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>学到了比较值需要使用 <em><strong>.equals()</strong></em> 。</p>
]]></content>
      <categories>
        <category>OJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>NYOJ-32-深度优先搜索算法</title>
    <url>/2023/02/15/NYOJ32-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="NYOJ-32-深度优先搜索算法"><a href="#NYOJ-32-深度优先搜索算法" class="headerlink" title="NYOJ-32-深度优先搜索算法"></a>NYOJ-32-深度优先搜索算法</h2><p>最近两天学习了深度优先算法，并做了一道oj题，这里记录一下。</p>
<span id="more"></span>

<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>找出从自然数1、2、… 、n（0&lt;n&lt;10）中任取r(0&lt;r&lt;&#x3D;n)个数的所有组合。</p>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>输入n、r。</p>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>按特定顺序输出所有组合。<br>特定顺序：每一个组合中的值从大到小排列，组合之间按逆字典序排列。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入 5 3</span><br><span class="line">输出：</span><br><span class="line">543</span><br><span class="line">542</span><br><span class="line">541</span><br><span class="line">532</span><br><span class="line">531</span><br><span class="line">521</span><br><span class="line">432</span><br><span class="line">431</span><br><span class="line">421</span><br><span class="line">321</span><br></pre></td></tr></table></figure>

<h3 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NYOJ32</span> &#123; <span class="comment">//组合数，深度优先搜索</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt(); <span class="comment">//读取基础数据</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> in.nextInt(); <span class="comment">//读取长度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] book = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];<span class="comment">//标记数据是否被使用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] out = <span class="keyword">new</span> <span class="title class_">int</span>[r+<span class="number">1</span>]; <span class="comment">//设置输出长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> step)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (step &gt; r) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=r-<span class="number">1</span>;i++)&#123;  <span class="comment">//判断高位大于低位</span></span><br><span class="line">                <span class="keyword">if</span> (out[i]&lt;out[i+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;=r; i++) &#123;</span><br><span class="line">                System.out.print(out[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = n; i &gt; <span class="number">0</span>; i--) &#123;  <span class="comment">//深度优先算法</span></span><br><span class="line">            <span class="keyword">if</span> (book[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                out[step]=i;</span><br><span class="line">                book[i]=<span class="number">1</span>;</span><br><span class="line">                dfs(step+<span class="number">1</span>);</span><br><span class="line">                book[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>学到了，理解深度优先搜索的关键在于解决 <em><strong>“当下该如何做”</strong></em> 。至于 <em><strong>“下一步如何做”</strong></em> 则与 <em><strong>“当下该如何做”</strong></em> 是一样的。</p>
]]></content>
      <categories>
        <category>OJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
