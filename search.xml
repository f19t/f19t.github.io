<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java反射</title>
    <url>/2023/02/19/Java%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h2><p>之前学过反射，半知半解，今天重新学习一下Java反射机制，以及能做的事情。</p>
<span id="more"></span>

<p>下面是反射获取类Test的的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//字段1，直接赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;<span class="comment">//字段2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>);<span class="comment">//字段3，间接赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123; <span class="comment">//构造函数1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(<span class="type">int</span> m, <span class="type">double</span> n)</span> <span class="keyword">throws</span> IOException &#123;<span class="comment">//有参构造函数2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;有参构造函数&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到int=&quot;</span>+m);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到double=&quot;</span>+n);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open /System/Applications/Calculator.app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String s)</span> &#123;  <span class="comment">//方法1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调用hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hello2</span><span class="params">(<span class="type">int</span> x,<span class="type">double</span> y)</span> <span class="keyword">throws</span> IOException &#123;  <span class="comment">//方法2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取到int=&quot;</span>+x);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到double=&quot;</span>+y);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open /System/Applications/Calculator.app&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="反射创建对象实例"><a href="#反射创建对象实例" class="headerlink" title="反射创建对象实例"></a>反射创建对象实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: f19t</span></span><br><span class="line"><span class="comment"> * Date: 2023/2/18 21:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_Reflect_getConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ct1</span> <span class="operator">=</span> c.getConstructor();<span class="comment">//不会初始化，无参构造</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">obj</span> <span class="operator">=</span> (Test)ct1.newInstance();<span class="comment">//初始化执行</span></span><br><span class="line">        obj.hello(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        Class partypes[] = <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">2</span>];</span><br><span class="line">        partypes[<span class="number">0</span>] = Integer.TYPE;</span><br><span class="line">        partypes[<span class="number">1</span>] = Double.TYPE;</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ct2</span> <span class="operator">=</span> c.getConstructor(partypes);<span class="comment">//不会初始化，有参构造</span></span><br><span class="line">        Object arglist[] = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">2</span>];</span><br><span class="line">        arglist[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">37</span>);</span><br><span class="line">        arglist[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">47.0</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> ct2.newInstance(arglist);<span class="comment">//有参生成对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="反射获取类方法"><a href="#反射获取类方法" class="headerlink" title="反射获取类方法"></a>反射获取类方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: f19t</span></span><br><span class="line"><span class="comment"> * Date: 2023/2/18 19:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_Reflect_methods</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);<span class="comment">//获取类</span></span><br><span class="line">    Method methods[] = c.getDeclaredMethods();<span class="comment">//获取所有方法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> methods[i];</span><br><span class="line">        Class pvec[] =m.getParameterTypes();</span><br><span class="line"><span class="comment">//        System.out.println(&quot;类名=&quot; +m.getDeclaringClass());//获取类名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法=&quot;</span>+m.getName());<span class="comment">//获取方法名</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> <span class="number">0</span>; q &lt; pvec.length; q++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数类型&quot;</span>+pvec[q].getName()); <span class="comment">//获取方法参数</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回类型=&quot;</span>+m.getReturnType());<span class="comment">//获取返回类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: f19t</span></span><br><span class="line"><span class="comment"> * Date: 2023/2/18 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_Reflect_field</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        Field fieldlist[] = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fieldlist.length; i++) &#123;</span><br><span class="line">            fieldlist[i].setAccessible(<span class="literal">true</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;字段名=&quot;</span>+fieldlist[i].getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;字段值=&quot;</span>+fieldlist[i].get(c.newInstance()));<span class="comment">//get方法需要传入实例对象</span></span><br><span class="line">            System.out.println(<span class="string">&quot;字段类型=&quot;</span>+fieldlist[i].getType());</span><br><span class="line">            <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> fieldlist[i].getModifiers();</span><br><span class="line">            System.out.println(<span class="string">&quot;声明类型=&quot;</span>+ Modifier.toString(mod));</span><br><span class="line">            System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字段名=h</span><br><span class="line">无参构造函数</span><br><span class="line">字段值=5</span><br><span class="line">字段类型=int</span><br><span class="line">声明类型=public static final</span><br><span class="line">----------------------------</span><br><span class="line">字段名=s</span><br><span class="line">无参构造函数</span><br><span class="line">字段值=test</span><br><span class="line">字段类型=class java.lang.String</span><br><span class="line">声明类型=public</span><br><span class="line">----------------------------</span><br><span class="line">字段名=b</span><br><span class="line">无参构造函数</span><br><span class="line">字段值=false</span><br><span class="line">字段类型=boolean</span><br><span class="line">声明类型=public static final</span><br><span class="line">----------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h4><p>反射修改注意如果是static final修饰的，需要先去掉final，再次进行修改，还需要注意，static final修饰的直接赋值还是间接赋值，直接赋值只能通过反射获取修改后的数据（编译优化导致）。间接赋值的可以直接获取修改后的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: f19t</span></span><br><span class="line"><span class="comment"> * Date: 2023/2/18 22:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_Reflect_Set_field</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException, IOException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        Field field[] = c.getDeclaredFields();</span><br><span class="line">        <span class="type">Test</span> <span class="variable">obj</span> <span class="operator">=</span> (Test) c.newInstance();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; field.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改前的值&quot;</span>+field[i].getName()+<span class="string">&quot;=&quot;</span>+field[i].get(obj)+<span class="string">&quot; 类型为 &quot;</span>+Modifier.toString(field[i].getModifiers()));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        field[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">modifiers</span> <span class="operator">=</span> field[<span class="number">0</span>].getClass().getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">        modifiers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        modifiers.setInt(field[<span class="number">0</span>], field[<span class="number">0</span>].getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">        field[<span class="number">0</span>].set(obj, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;反射修改后直接获取&quot;</span>+field[<span class="number">0</span>].getName()+<span class="string">&quot;=&quot;</span>+obj.h);</span><br><span class="line">        System.out.println(<span class="string">&quot;反射修改后反射获取&quot;</span>+field[<span class="number">0</span>].getName()+<span class="string">&quot;=&quot;</span>+field[<span class="number">0</span>].get(obj));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        field[<span class="number">1</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        modifiers.setInt(field[<span class="number">1</span>], field[<span class="number">1</span>].getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">        field[<span class="number">1</span>].set(obj, <span class="string">&quot;hack&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;反射修改后直接获取&quot;</span>+field[<span class="number">1</span>].getName()+<span class="string">&quot;=&quot;</span>+obj.s);</span><br><span class="line">        System.out.println(<span class="string">&quot;反射修改后反射获取&quot;</span>+field[<span class="number">1</span>].getName()+<span class="string">&quot;=&quot;</span>+field[<span class="number">1</span>].get(obj));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        field[<span class="number">2</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        modifiers.setInt(field[<span class="number">2</span>], field[<span class="number">2</span>].getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">        field[<span class="number">2</span>].set(obj, <span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;反射修改后直接获取&quot;</span>+field[<span class="number">2</span>].getName()+<span class="string">&quot;=&quot;</span>+obj.b);</span><br><span class="line">        System.out.println(<span class="string">&quot;反射修改后反射获取&quot;</span>+field[<span class="number">2</span>].getName()+<span class="string">&quot;=&quot;</span>+field[<span class="number">2</span>].get(obj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">无参构造函数</span><br><span class="line">修改前的值h=<span class="number">5</span> 类型为 <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span></span><br><span class="line">修改前的值s=test 类型为 <span class="keyword">public</span></span><br><span class="line">修改前的值b=<span class="literal">false</span> 类型为 <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span></span><br><span class="line">------------------</span><br><span class="line">反射修改后直接获取h=<span class="number">5</span></span><br><span class="line">反射修改后反射获取h=<span class="number">10</span></span><br><span class="line">--------------------</span><br><span class="line">反射修改后直接获取s=hack</span><br><span class="line">反射修改后反射获取s=hack</span><br><span class="line">--------------------</span><br><span class="line">反射修改后直接获取b=<span class="literal">true</span></span><br><span class="line">反射修改后反射获取b=<span class="literal">true</span></span><br></pre></td></tr></table></figure>





<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><h4 id="常规类调用方法"><a href="#常规类调用方法" class="headerlink" title="常规类调用方法"></a>常规类调用方法</h4><p>常规类调用方法流程为获取类、创建实例、执行方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: f19t</span></span><br><span class="line"><span class="comment"> * Date: 2023/2/18 21:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_Reflect_Get_methods</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        Class partypes[] = <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">2</span>];</span><br><span class="line">        partypes[<span class="number">0</span>] = Integer.TYPE;</span><br><span class="line">        partypes[<span class="number">1</span>] = Double.TYPE;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">meth</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;hello2&quot;</span>, partypes);</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        Object arglist[] = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">2</span>];</span><br><span class="line">        arglist[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">3</span>);</span><br><span class="line">        arglist[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">3.1</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ref</span> <span class="operator">=</span> meth.invoke(test, arglist);</span><br><span class="line">        System.out.println(ref);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="单例类调用方法"><a href="#单例类调用方法" class="headerlink" title="单例类调用方法"></a>单例类调用方法</h4><h5 id="单例模式的特点"><a href="#单例模式的特点" class="headerlink" title="单例模式的特点"></a>单例模式的特点</h5><ul>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
<li>单例模式保证了全局对象的唯一性，比如系统启动读取配置文件就需要单例保证配置的一致性。</li>
</ul>
<p>java.lang.Runtime就是一个单例模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Runtime</span> <span class="variable">currentRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the runtime object associated with the current Java application.</span></span><br><span class="line"><span class="comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class="line"><span class="comment">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class="line"><span class="comment">     *          Java application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Don&#x27;t let anyone else instantiate this class */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Runtime</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure>


<h4 id="Runtime的调用"><a href="#Runtime的调用" class="headerlink" title="Runtime的调用"></a>Runtime的调用</h4><p>这里直接放代码了，有个小点没搞懂，后续搞懂了之后再回来补充。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: f19t</span></span><br><span class="line"><span class="comment"> * Date: 2023/2/18 21:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_Reflect_Get_methods</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method1.invoke(c);<span class="comment">//不明白这个地方为什么放类可以，难到单例模式类，本身就是对象吗？</span></span><br><span class="line">        method.invoke(obj, <span class="string">&quot;open /System/Applications/Calculator.app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JAVA基础</category>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVASEC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合</title>
    <url>/2023/02/13/Java%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h2><p>本文介绍Java集合的数据结构，与简单测试。为后续学习算法打基础。</p>
<span id="more"></span>

<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>); <span class="comment">// size=1</span></span><br><span class="line">        list.add(<span class="string">&quot;pear&quot;</span>); <span class="comment">// size=2</span></span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>); <span class="comment">// 允许重复添加元素，size=3</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        list.remove(<span class="number">1</span>);<span class="comment">//删除pear</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">apple</span><br></pre></td></tr></table></figure>

<hr>
<p>List是一种顺序列表接口常用方法：</p>
<ul>
<li>在末尾添加一个元素：boolean add(E e)</li>
<li>在指定索引添加一个元素：boolean add(int index, E e)</li>
<li>删除指定索引的元素：E remove(int index)</li>
<li>删除某个元素：boolean remove(Object e)</li>
<li>获取指定索引的元素：E get(int index)</li>
<li>获取链表大小（包含元素的个数）：int size()</li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;s&quot;</span>,<span class="string">&quot;bbbbb&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;aaaaa&quot;</span>);</span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;s&quot;</span>));<span class="comment">//获取数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet())&#123;    <span class="comment">//遍历map</span></span><br><span class="line">            System.out.println(map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bbbbb</span><br><span class="line">aaaaa</span><br><span class="line">bbbbb</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>Java默认配置文件以.properties为扩展名，每行以key&#x3D;value表示。java内置Properties读取配置文件非常简单。</p>
<p>典型配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setting.properties</span></span><br><span class="line">last_open_file=1.txt</span><br><span class="line">auto_save_interval=60</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException,Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> <span class="string">&quot;配置文件&quot;</span>;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.load(<span class="keyword">new</span> <span class="title class_">java</span>.io.FileInputStream(f));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filepath</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;last_open_file&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">interval</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;auto_save_interval&quot;</span>, <span class="string">&quot;120&quot;</span>);<span class="comment">//如果没有值，赋予默认值</span></span><br><span class="line"></span><br><span class="line">        System.out.println(filepath);</span><br><span class="line">        System.out.println(interval);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.txt</span><br><span class="line">60</span><br></pre></td></tr></table></figure>

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>只需要存储不重复的key，并不需要存储映射的value，那么就可以使用Set。</p>
<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>队列（Queue）是一种经常使用的集合。Queue实际上是实现了一个先进先出（FIFO：First In First Out）的有序表。它和List的区别在于，List可以在任意位置添加和删除元素，而Queue只有两个操作：</p>
<ul>
<li>把元素添加到队列末尾；</li>
<li>从队列头部取出元素。</li>
</ul>
<p>队列接口Queue定义了以下几个方法：</p>
<ul>
<li>int size()：获取队列长度；</li>
<li>boolean add(E)&#x2F;boolean offer(E)：添加元素到队尾；</li>
<li>E remove()&#x2F;E poll()：获取队首元素并从队列中删除；</li>
<li>E element()&#x2F;E peek()：获取队首元素但并不从队列中删除。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException,Exception&#123;</span><br><span class="line"></span><br><span class="line">        Queue&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.offer(<span class="string">&quot;aaaaaaa&quot;</span>);</span><br><span class="line">        q.offer(<span class="string">&quot;bbbbbbb&quot;</span>);</span><br><span class="line">        q.offer(<span class="string">&quot;ccccccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(q.peek());<span class="comment">//获取首位数据，不删除</span></span><br><span class="line">        System.out.println(q.peek());</span><br><span class="line">        System.out.println(q.peek());</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">        System.out.println(q.poll());<span class="comment">//获取首位数据，并删除</span></span><br><span class="line">        System.out.println(q.poll());</span><br><span class="line">        System.out.println(q.poll());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaaaaa</span><br><span class="line">aaaaaaa</span><br><span class="line">aaaaaaa</span><br><span class="line">-------------</span><br><span class="line">aaaaaaa</span><br><span class="line">bbbbbbb</span><br><span class="line">ccccccc</span><br></pre></td></tr></table></figure>

<h3 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h3><p>两头都出，这种队列叫双端队列（Double Ended Queue），学名Deque。<br>Java集合提供了接口Deque来实现一个双端队列，它的功能是：</p>
<ul>
<li>既可以添加到队尾，也可以添加到队首；</li>
<li>既可以从队首获取，又可以从队尾获取。</li>
</ul>
<p>用处：Deque当Stack使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException,Exception&#123;</span><br><span class="line"></span><br><span class="line">        Deque&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.offerLast(<span class="string">&quot;aaaaaaa&quot;</span>);</span><br><span class="line">        q.offerLast(<span class="string">&quot;bbbbbbb&quot;</span>);</span><br><span class="line">        q.offerLast(<span class="string">&quot;ccccccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(q.peekLast());<span class="comment">//获取末位数据，不删除</span></span><br><span class="line">        System.out.println(q.peekLast());</span><br><span class="line">        System.out.println(q.peekLast());</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">        System.out.println(q.pollLast());<span class="comment">//获取末位数据，并删除</span></span><br><span class="line">        System.out.println(q.pollLast());</span><br><span class="line">        System.out.println(q.pollLast());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ccccccc</span><br><span class="line">ccccccc</span><br><span class="line">ccccccc</span><br><span class="line">-------------</span><br><span class="line">ccccccc</span><br><span class="line">bbbbbbb</span><br><span class="line">aaaaaaa</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>NYOJ-2-栈的运用</title>
    <url>/2023/02/13/NYOJ-2/</url>
    <content><![CDATA[<h2 id="NYOJ-2-栈的运用"><a href="#NYOJ-2-栈的运用" class="headerlink" title="NYOJ-2-栈的运用"></a>NYOJ-2-栈的运用</h2><p>今天刚学java集合，学到了栈，就拿这道题练练手吧。</p>
<hr>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">输入描述</span><br><span class="line">第一行输入一个数N（0&lt;N&lt;=100）,表示有N组测试数据。后面的N行输入多组输入数据，每组输入数据都是一个字符串S(S的长度小于10000，且S不是空串），测试数据组数少于5组。数据保证S中只含有&quot;[&quot;, “]”, “(”, “)” 四种字符</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">每组输入数据的输出占一行，如果该字符串中所含的括号是配对的，则输出Yes,如果不配对则输出No</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>最近刚学了Deque，可以使用栈解决这个问题。<br>思路：获取到”)”、”]”，就比对，不是就压栈，最后判断是否为空。后续有更好思路再补代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OJ2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        String arr[] = <span class="keyword">new</span> <span class="title class_">String</span>[num];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;num;i++)&#123;arr[i]=in.next();&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;num;i++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> judge(arr[i]);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">judge</span><span class="params">(String s)</span>&#123;</span><br><span class="line"></span><br><span class="line">        Deque&lt;String&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            deque.offerLast(s.substring(i,i+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (deque.peekLast().equals(<span class="string">&quot;)&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span> (deque.size()==<span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;&#125;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">                <span class="keyword">if</span> (deque.peekLast().equals(<span class="string">&quot;(&quot;</span>))&#123;deque.removeLast();&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(deque.peekLast().equals(<span class="string">&quot;]&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span> (deque.size()==<span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;&#125;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">                <span class="keyword">if</span> (deque.peekLast().equals(<span class="string">&quot;[&quot;</span>))&#123;deque.removeLast();&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deque.size()==<span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="string">&quot;Yes&quot;</span>;&#125;<span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>学到了比较值需要使用 <em><strong>.equals()</strong></em> 。</p>
]]></content>
      <categories>
        <category>OJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>NYOJ-32-深度优先搜索算法</title>
    <url>/2023/02/15/NYOJ32-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="NYOJ-32-深度优先搜索算法"><a href="#NYOJ-32-深度优先搜索算法" class="headerlink" title="NYOJ-32-深度优先搜索算法"></a>NYOJ-32-深度优先搜索算法</h2><p>最近两天学习了深度优先算法，并做了一道oj题，这里记录一下。</p>
<span id="more"></span>

<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>找出从自然数1、2、… 、n（0&lt;n&lt;10）中任取r(0&lt;r&lt;&#x3D;n)个数的所有组合。</p>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>输入n、r。</p>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>按特定顺序输出所有组合。<br>特定顺序：每一个组合中的值从大到小排列，组合之间按逆字典序排列。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入 5 3</span><br><span class="line">输出：</span><br><span class="line">543</span><br><span class="line">542</span><br><span class="line">541</span><br><span class="line">532</span><br><span class="line">531</span><br><span class="line">521</span><br><span class="line">432</span><br><span class="line">431</span><br><span class="line">421</span><br><span class="line">321</span><br></pre></td></tr></table></figure>

<h3 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NYOJ32</span> &#123; <span class="comment">//组合数，深度优先搜索</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt(); <span class="comment">//读取基础数据</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> in.nextInt(); <span class="comment">//读取长度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] book = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];<span class="comment">//标记数据是否被使用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] out = <span class="keyword">new</span> <span class="title class_">int</span>[r+<span class="number">1</span>]; <span class="comment">//设置输出长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> step)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (step &gt; r) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=r-<span class="number">1</span>;i++)&#123;  <span class="comment">//判断高位大于低位</span></span><br><span class="line">                <span class="keyword">if</span> (out[i]&lt;out[i+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;=r; i++) &#123;</span><br><span class="line">                System.out.print(out[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = n; i &gt; <span class="number">0</span>; i--) &#123;  <span class="comment">//深度优先算法</span></span><br><span class="line">            <span class="keyword">if</span> (book[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                out[step]=i;</span><br><span class="line">                book[i]=<span class="number">1</span>;</span><br><span class="line">                dfs(step+<span class="number">1</span>);</span><br><span class="line">                book[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>学到了，理解深度优先搜索的关键在于解决 <em><strong>“当下该如何做”</strong></em> 。至于 <em><strong>“下一步如何做”</strong></em> 则与 <em><strong>“当下该如何做”</strong></em> 是一样的。</p>
]]></content>
      <categories>
        <category>OJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>NYOJ58-广度优先搜索算法</title>
    <url>/2023/02/17/NYOJ58-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="NYOJ-58-广度优先搜索算法"><a href="#NYOJ-58-广度优先搜索算法" class="headerlink" title="NYOJ-58-广度优先搜索算法"></a>NYOJ-58-广度优先搜索算法</h2><p>最近三天学习了深度优先算法，并做了一道oj题，遇到了一些问题，并解决了一些问题，这里记录一下。</p>
<span id="more"></span>

<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>这有一个迷宫，有0~8行和0~8列：</p>
<p> 1,1,1,1,1,1,1,1,1<br> 1,0,0,1,0,0,1,0,1<br> 1,0,0,1,1,0,0,0,1<br> 1,0,1,0,1,1,0,1,1<br> 1,0,0,0,0,1,0,0,1<br> 1,1,0,1,0,1,0,0,1<br> 1,1,0,1,0,1,0,0,1<br> 1,1,0,1,0,0,0,0,1<br> 1,1,1,1,1,1,1,1,1</p>
<p>0表示道路，1表示墙。<br>现在输入一个道路的坐标作为起点，再如输入一个道路的坐标作为终点，问最少走几步才能从起点到达终点？<br>（注：一步是指从一坐标点走到其上下左右相邻坐标点，如：从（3，1）到（4,1）。）</p>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>第一行输入一个整数n（0&lt;n&lt;&#x3D;100），表示有n组测试数据;<br>随后n行,每行有四个整数a,b,c,d（0&lt;&#x3D;a,b,c,d&lt;&#x3D;8）分别表示起点的行、列，终点的行、列。</p>
<p>输出描述</p>
<p>输出最少走几步。</p>
<h3 id="解题源码"><a href="#解题源码" class="headerlink" title="解题源码"></a>解题源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OJ58</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] walked =<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">9</span>][<span class="number">9</span>]; <span class="comment">//记录那些路径走过</span></span><br><span class="line">    <span class="keyword">static</span> Queue&lt;location&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;location&gt;();<span class="comment">//创建队列，将所有的位置都走一遍</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] map=&#123;&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (a == c &amp;&amp; b == d) &#123;</span><br><span class="line">                System.out.println(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            move(a, b,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span> (queue.size() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">location</span> <span class="variable">laca</span> <span class="operator">=</span> queue.poll();</span><br><span class="line"><span class="comment">//                System.out.print(&quot;走过(&quot;);</span></span><br><span class="line"><span class="comment">//                System.out.print(laca.x);</span></span><br><span class="line"><span class="comment">//                System.out.print(&quot;,&quot;);</span></span><br><span class="line"><span class="comment">//                System.out.print(laca.y);</span></span><br><span class="line"><span class="comment">//                System.out.print(&quot;)位置&quot;);</span></span><br><span class="line"><span class="comment">//                System.out.print(&quot;，步数&quot;);</span></span><br><span class="line"><span class="comment">//                System.out.println(laca.step);</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (laca.x == c &amp;&amp; laca.y == d) &#123;</span><br><span class="line">                    System.out.println(laca.step);</span><br><span class="line">                    queue.clear();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">0</span>; w &lt; <span class="number">9</span>; w++) &#123;</span><br><span class="line">                        Arrays.fill(walked[w], <span class="number">0</span>);<span class="comment">//二维数组全部赋值为0</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    move(laca.x,laca.y, laca.step);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> steps)</span> &#123; <span class="comment">//每个点上下左右移动</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x + i &gt; -<span class="number">1</span> &amp;&amp; x + i &lt;= <span class="number">8</span> &amp;&amp; walked[x + i][y] == <span class="number">0</span> &amp;&amp; map[x + i][y] == <span class="number">0</span>) &#123;</span><br><span class="line">                walked[x + i][y] = <span class="number">1</span>;</span><br><span class="line">                <span class="type">location</span> <span class="variable">laca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">location</span>();</span><br><span class="line">                laca.x = x + i;</span><br><span class="line">                laca.y = y;</span><br><span class="line">                laca.step =steps+<span class="number">1</span>;</span><br><span class="line">                queue.offer(laca);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y + i &gt; -<span class="number">1</span> &amp;&amp; y + i &lt;= <span class="number">8</span> &amp;&amp; walked[x][y + i] == <span class="number">0</span> &amp;&amp; map[x][y + i] == <span class="number">0</span>) &#123;</span><br><span class="line">                walked[x][y + i] = <span class="number">1</span>;</span><br><span class="line">                <span class="type">location</span> <span class="variable">laca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">location</span>();</span><br><span class="line">                laca.x = x;</span><br><span class="line">                laca.y = y+i;</span><br><span class="line">                laca.step = steps+<span class="number">1</span>;</span><br><span class="line">                queue.offer(laca);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">location</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="type">int</span> step;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="java结构体"><a href="#java结构体" class="headerlink" title="java结构体"></a>java结构体</h4><p>java没有结构体，Queue<E> E是泛型 可以自己构建类去充当元素，使用object &#x3D;null去释放赋值对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Interface Queue&lt;E&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">location</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="type">int</span> step;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">location</span> <span class="variable">laca</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">location</span>();</span><br><span class="line">queue.offer(laca);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="多维数组赋值为0"><a href="#多维数组赋值为0" class="headerlink" title="多维数组赋值为0"></a>多维数组赋值为0</h4><p>java.util.Arrays.fill()方法处理的是一维数组，处理二维数组使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">0</span>; w &lt; <span class="number">9</span>; w++) &#123;</span><br><span class="line">    Arrays.fill(walked[w], <span class="number">0</span>);<span class="comment">//二维数组全部赋值为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h4><p>广度优先搜索可以解决最短路径问题，像火一样蔓延，一层层去查找。</p>
]]></content>
      <categories>
        <category>OJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
